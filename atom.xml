<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Freedom_ATX&#39;s Blog</title>
  
  
  <link href="http://www.qintianjun.top/atom.xml" rel="self"/>
  
  <link href="http://www.qintianjun.top/"/>
  <updated>2023-11-24T12:29:43.099Z</updated>
  <id>http://www.qintianjun.top/</id>
  
  <author>
    <name>QinTianJun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用mc admin管理minio集群</title>
    <link href="http://www.qintianjun.top/2023/11/24/%E4%BD%BF%E7%94%A8mcadmin%E7%AE%A1%E7%90%86minio%E9%9B%86%E7%BE%A4/"/>
    <id>http://www.qintianjun.top/2023/11/24/%E4%BD%BF%E7%94%A8mcadmin%E7%AE%A1%E7%90%86minio%E9%9B%86%E7%BE%A4/</id>
    <published>2023-11-24T12:09:30.000Z</published>
    <updated>2023-11-24T12:29:43.099Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在mc中添加集群"><a href="#在mc中添加集群" class="headerlink" title="在mc中添加集群"></a>在mc中添加集群</h2><p>在控制台添加aksk </p><p><img src="https://s2.loli.net/2023/11/24/JWSexaR476BDMCo.jpg" alt="img"></p><p>使用<code>mc config host add &lt;ALIAS&gt; &lt;ENDPOINT&gt; ACCESS_KEY SECRET_KEY</code>添加minio实例</p><p><img src="https://s2.loli.net/2023/11/24/5CPl2f8wcIoxdkN.jpg" alt="img"></p><p>使用命令测试与新添加的 MinIO 部署的连接：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mc <span class="hljs-keyword">admin</span> <span class="hljs-keyword">info</span> &lt;<span class="hljs-keyword">ALIAS</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/11/24/L8FBnTa3rzsGe59.jpg" alt="img"></p><h2 id="将webhook添加到Minio"><a href="#将webhook添加到Minio" class="headerlink" title="将webhook添加到Minio"></a>将webhook添加到Minio</h2><p>MinIO 支持 使用命令和配置密钥在正在运行的进程上添加或更新 Webhook 端点。您必须重新启动该 过程才能应用任何新的或更新的配置设置。<a href="https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#command-minio.server" title="minio服务器"><code>minio server</code></a><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#mc.admin.config.set" title="mc.admin.config.set"><code>mc admin config set</code></a><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#mc-conf.notify_webhook" title="mc-conf.notify_webhook"><code>notify_webhook</code></a><a href="https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#command-minio.server" title="minio服务器"><code>minio server</code></a></p><p>以下示例代码设置 与配置 Webhook 服务端点相关的_所有设置。必须要有的设置是 ：<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#mc-conf.notify_webhook.endpoint" title="mc-conf.notify_webhook.endpoint"><code>notify_webhook endpoint</code></a></p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">mc admin config  <span class="hljs-built_in">set</span> ALIAS/ notify_webhook:IDENTIFIER \</span><br><span class="language-bash">endpoint=<span class="hljs-string">&quot;&lt;ENDPOINT&gt;&quot;</span> \ </span>   <br>auth_token=&quot;&lt;string&gt;&quot; \    <br>queue_dir=&quot;&lt;string&gt;&quot; \    <br>queue_limit=&quot;&lt;string&gt;&quot; \    <br>client_cert=&quot;&lt;string&gt;&quot; \    <br>client_key=&quot;&lt;string&gt;&quot; \    <br>comment=&quot;&lt;string&gt;&quot;  <br></code></pre></td></tr></table></figure><p> ● 替换<code>IDENTIFIER</code>为 Webhook 服务端点的唯一描述性字符串。此过程中的以下示例假定标识符为<code>PRIMARY</code>。</p><p>● 如果指定的值<code>IDENTIFIER</code>与 MinIO 部署上的现有 Webhook 服务端点匹配，则新设置_将覆盖_ 该端点的任何现有设置。用于 查看 MinIO 部署上当前配置的 Webhook 端点。<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#mc.admin.config.get" title="mc.admin.config.get"><code>mc admin config get notify_webhook</code></a></p><p>● 替换<code>ENDPOINT</code>为 Webhook 服务端点的 URL。例如： <code>https://webhook.example.com</code></p><p>有关每个设置的完整文档，请参阅<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#minio-server-config-bucket-notification-webhook"> </a><a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-config.html#minio-server-config-bucket-notification-webhook">Webhook 存储桶通知配置设置。</a></p><p><strong>识别存储桶通知的 ARN</strong></p><p><code>&lt;IDENTIFIER&gt;</code>在之前创建终端节点时定义了分配给存储桶通知的目标 ARN。以下步骤返回在部署中配置的 ARN。通过查找<code>&lt;IDENTIFIER&gt;</code>您指定的 ARN 来识别之前创建的 ARN。</p><p><strong>查看 JSON 输出</strong></p><ol><li>复制并运行以下命令，替换<code>ALIAS</code>为部署的<a href="https://min.io/docs/minio/linux/reference/minio-mc/mc-alias-set.html#alias">别名。</a></li><li>mc admin info –json ALIAS</li><li>在 JSON 输出中，查找 key <code>info.sqsARN</code>。</li><li>您需要的 ARN 是与您指定的密钥相匹配的值<code>&lt;IDENTIFIER&gt;</code>。</li><li>例如，<code>arn:minio:sqs::primary:webhook</code>.</li></ol><p><strong>使用 jq 解析 JSON 中的值</strong></p><ol><li><a href="https://stedolan.github.io/jq/">安装jq</a></li><li>复制并运行以下命令，替换<code>ALIAS</code>为部署的<a href="https://min.io/docs/minio/linux/reference/minio-mc/mc-alias-set.html#alias">别名。</a></li><li>mc admin info –json ALIAS | jq .info.sqsARN</li><li>这将返回用于通知的 ARN，例如<code>arn:minio:sqs::primary:webhook</code></li></ol><p><img src="https://s2.loli.net/2023/11/24/7KzdRZWQlvD2fY3.jpg" alt="img"></p><p><img src="https://s2.loli.net/2023/11/24/IbPHhMNqs4ZnwUB.jpg" alt="img"></p><p><img src="https://s2.loli.net/2023/11/24/sT2Aih9oeqD5L7Z.jpg" alt="img"></p><p><img src="https://s2.loli.net/2023/11/24/4Iz6FkoUnlSJ7te.jpg" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mc config host  add hotfix-test http://10.73.195.24:19000 AK  SK       <br>mc admin config  set hotfix-test/ notify_webhook:SECONDARY \     <br>endpoint=&quot;http://10.73.195.24:19000&quot;        <br>mc event add  hotfix-test/hotfix-test arn:minio:sqs::SECONDARY:webhook --event  s3:ObjectCreated:*,s3:ObjectAccessed:*,s3:ObjectRemoved:*,s3:Replication:*,s3:ObjectRestore:*,s3:ObjectTransition:*     <br>mc admin config  set minio-domestic notify_webhook:PRIMARY \   <br>endpoint=&quot;http://ksgame-public-minio-event-webhook-domestic.internal:80/webhook/&quot;  \     queue_dir=&quot;/data/logs/minio/event&quot; \    <br>queue_limit=&quot;100000&quot;   <br></code></pre></td></tr></table></figure><h2 id="mc操作远程集群"><a href="#mc操作远程集群" class="headerlink" title="mc操作远程集群"></a>mc操作远程集群</h2><h3 id="添加远程集群"><a href="#添加远程集群" class="headerlink" title="添加远程集群"></a>添加远程集群</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$mc</span> <span class="hljs-built_in">alias</span> <span class="hljs-built_in">set</span>  minio-test-1 http://ksgame-gamecloud-hotfix-minio-test-1.hb.txyun:9000  MINIOUSER MINIOPASSWD  Added  `minio-test-1` successfully  <br><span class="hljs-variable">$mc</span> <span class="hljs-built_in">alias</span> <span class="hljs-built_in">set</span>  minio-test-2 http://ksgame-gamecloud-hotfix-minio-test2-1.hb.txyun:9000  MINIOUSER MINIOPASSWD  Added `minio-test-2`  successfully.  <br></code></pre></td></tr></table></figure><p> 验证 <code>mc alias list</code>, 如下输出代表成功</p><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">minio-test-<span class="hljs-number">1</span>   <br>URL     : <span class="hljs-type">http</span>://ksgame-gamecloud-hotfix-minio-test-<span class="hljs-number">1</span>.hb.txyun:<span class="hljs-number">9000</span> <br>AccessKey : <span class="hljs-type">MINIOUSER</span>   <br>SecretKey : <span class="hljs-type">MINIOPASSWD</span>   <br>API     : <span class="hljs-type">s3v4</span>   <br>Path     : <span class="hljs-type">auto</span>     <br>minio-test-<span class="hljs-number">2</span>   <br>URL     : <span class="hljs-type">http</span>://ksgame-gamecloud-hotfix-minio-test2-<span class="hljs-number">1</span>.hb.txyun:<span class="hljs-number">9000</span>   <br>AccessKey : <span class="hljs-type">MINIOUSER</span>   <br>SecretKey : <span class="hljs-type">MINIOPASSWD</span>   <br>API     : <span class="hljs-type">s3v4</span>   <br>Path     : <span class="hljs-type">auto</span>  <br></code></pre></td></tr></table></figure><p><code>mc admin info</code>, 如下输出代表成功 </p><p><img src="https://s2.loli.net/2023/11/24/zfPodm4MC9jNSq2.jpg" alt="img"></p><p><img src="https://s2.loli.net/2023/11/24/pXkgAQK2dhZE5Tf.jpg" alt="img"></p><h3 id="跨集群桶的单向复制"><a href="#跨集群桶的单向复制" class="headerlink" title="跨集群桶的单向复制"></a>跨集群桶的单向复制</h3><h4 id="创建桶"><a href="#创建桶" class="headerlink" title="创建桶"></a>创建桶</h4><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># mc mb 创建桶 </span><br><span class="hljs-comment"># -p 存在则不执行，不存在则创建 </span><br>$ mc mb -p minio-<span class="hljs-keyword">test</span>-<span class="hljs-number">1</span>/hotfix-<span class="hljs-keyword">test</span> <br>$ mc mb -p minio-<span class="hljs-keyword">test</span>-<span class="hljs-number">2</span>/hotfix-<span class="hljs-keyword">test</span> <br></code></pre></td></tr></table></figure><p>验证 </p><p><img src="https://s2.loli.net/2023/11/24/HGRiUA8mBqTEM9j.jpg" alt="img"></p><h4 id="启用桶版本控制"><a href="#启用桶版本控制" class="headerlink" title="启用桶版本控制"></a>启用桶版本控制</h4><p>对上一步创建的桶开启版本控制</p><p> <code> mc version  enable minio-test-1/hotfix-test  mc version  eanble minio-test-2/hotfix-test </code></p><p> 为目标集群创建复制目标</p><p>使用<code>mc replicate add</code>命令添加复制规则，语法</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">mc</span> <span class="hljs-string">replicate</span> <span class="hljs-string">add</span>  <span class="hljs-string">ALIAS</span>/<span class="hljs-string">BUCKET</span> \    <span class="hljs-built_in">--remote-bucket</span>  <span class="hljs-string">&#x27;https://USER:PASSWORD@HOSTNAME:PORT/BUCKET&#x27;</span> \    <span class="hljs-built_in">--replicate</span>  <span class="hljs-string">&quot;delete,delete-marker,existing-objects&quot;</span>  <br></code></pre></td></tr></table></figure><p>使用该命令向每个 MinIO 部署添加新的复制规则。</p><p>● 替换<code>ALIAS</code>为原始 MinIO 部署的<a href="https://min.io/docs/minio/linux/reference/minio-mc/mc-alias-set.html#alias">别名。</a>该名称_必须_与上一步中创建远程目标时指定的存储桶匹配。</p><p>● 替换<code>BUCKET</code>为要从源部署上复制的存储桶的名称。</p><p>● 替换<code>--remote-bucket</code>来指定远程 MinIO 部署和<code>ALIAS/BUCKET</code>复制到的存储桶。</p><p>● 必须对应于远程部署上具有<a href="https://min.io/docs/minio/linux/administration/bucket-replication/enable-server-side-two-way-bucket-replication.html#minio-bucket-replication-serverside-twoway-permissions">必要复制权限</a><code>USER:PASSWORD</code>的用户。</p><p>● 必须<code>HOSTNAME:PORT</code>解析为远程部署上可访问的 MinIO 实例。必须<code>BUCKET</code>存在并且满足所有其他<a href="https://min.io/docs/minio/linux/administration/bucket-replication/bucket-replication-requirements.html#minio-bucket-replication-requirements">复制要求</a>。</p><p>● 该标志启用以下复制功能：<code>--replicate &quot;delete,delete-marker,existing-objects&quot;</code></p><p>○<a href="https://min.io/docs/minio/linux/administration/bucket-replication.html#minio-replication-behavior-delete">删除的复制</a></p><p>○<a href="https://min.io/docs/minio/linux/administration/bucket-replication.html#minio-replication-behavior-existing-objects">现有对象的复制</a></p><p>请参阅参考资料 更完整的文档。省略任何字段即可禁用该组件的复制。<a href="https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-add.html#mc.replicate.add.-replicate" title="mc.replicate.add.--复制"><code>mc replicate add --replicate</code></a></p><p>此处将minio-test-1集群的hotfix-test桶同步到minio-test-2的同名桶，执行：</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mc</span> replicate add  minio-test-<span class="hljs-number">1</span>/hotfix-test   --remote-bucket  &#x27;http://MINIOUSER:MINIOPASSWD@ksgame-gamecloud-hotfix-minio-test2-<span class="hljs-number">1</span>.hb.txyun:<span class="hljs-number">9000</span>/hotfix-test&#x27;  --replicate  <span class="hljs-string">&quot;delete,delete-marker,existing-objects&quot;</span> <br></code></pre></td></tr></table></figure><p>返回</p><p> <img src="https://s2.loli.net/2023/11/24/rub2nAQPHtvNLpx.jpg" alt="img"></p><p>使用</p><p><img src="https://s2.loli.net/2023/11/24/Yys67C5ODeLJohn.jpg" alt="img"></p><p>打开minio-test-1&#x2F;hotfix-test桶配置页，可以看到同步相关配置</p><p><img src="https://s2.loli.net/2023/11/24/uDTLERldGiQ2ScJ.jpg" alt="img"></p><p><img src="https://s2.loli.net/2023/11/24/YK2GmrCqhL91Qg7.jpg" alt="img"></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>打开minio-test-1及minio-test-2的hotfix-test桶，可以看到文件已经从minio-test-1集群同步至minio-test-2集群 使用<code>mc ls ALIAS/BUCKET</code> 可以验证目标桶是否存在对象</p><p><img src="https://s2.loli.net/2023/11/24/5b1UJ46ZHwdoq7t.jpg" alt="img"></p><p>此时在minio-test-1上传一个test1.zip的压缩包</p><p><img src="https://s2.loli.net/2023/11/24/dUvIsu4JKfraPQH.jpg" alt="img"></p><p>可以看到test1.zip被同步给了minio-test-2 </p><p><img src="/%E4%BD%BF%E7%94%A8mc%E7%AE%A1%E7%90%86minio%E9%9B%86%E7%BE%A4.assets/clip_image036.jpg" alt="img"></p><p>● 使用该命令修改现有的复制规则。<a href="**%5B**https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#command-mc.replicate.update**%5D(https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#command-mc.replicate.update"><code>mc replicate update</code></a> **”mc.****复制.更新”)</p><p>○使用带有标志的命令来禁用现有的复制规则。<a href="**%5B**https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#command-mc.replicate.update**%5D(https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#command-mc.replicate.update"><code>mc replicate update</code></a> **”mc.****复制.更新”)<a href="**%5B**https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#mc.replicate.update.-state**%5D(https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-update.html#mc.replicate.update.-state"><code>--state &quot;disable&quot;</code></a> **”mc.replicate.update.–****状态”)</p><p>○使用该命令删除现有的复制规则。<a href="**%5B**https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-rm.html#command-mc.replicate.rm**%5D(https://min.io/docs/minio/linux/reference/minio-mc/mc-replicate-rm.html#command-mc.replicate.rm"><code>mc replicate rm</code></a> **”mc.replicate.rm”)</p><h2 id="server-版本更新"><a href="#server-版本更新" class="headerlink" title="server 版本更新"></a>server 版本更新</h2><p>此处以systemctl托管minio部署为例 使用<code>mc admin info ALIAS</code> 命令查看当前版本信息</p><p><img src="https://s2.loli.net/2023/11/24/e5LYuhQZqbGDvHM.jpg" alt="img"></p><h3 id="更新节点上minio二进制文件"><a href="#更新节点上minio二进制文件" class="headerlink" title="更新节点上minio二进制文件"></a>更新节点上minio二进制文件</h3><p>下载最新稳定的 MinIO 二进制文件：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget  https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio  <br>chmod +x minio  <br></code></pre></td></tr></table></figure><p>使用ansible命令分发至各服务器<code>/usr/local/bin</code> 目录下，并覆盖现有二进制文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">ansible -i hosts2 hosts2 -m copy -a  <span class="hljs-string">&quot;src=./bin/minio dest=/usr/local/bin/minio&quot;</span> -b --become-user=root  ksgame-gamecloud-hotfix-minio-test2-4.hb.txyun  | CHANGED =&gt; &#123;    <span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">true</span>,    <span class="hljs-string">&quot;checksum&quot;</span>: <span class="hljs-string">&quot;abd60fdc8f830680f6a78bb50f757a28f1849f2c&quot;</span>,    <span class="hljs-string">&quot;dest&quot;</span>:  <span class="hljs-string">&quot;/usr/local/bin/minio&quot;</span>,    <span class="hljs-string">&quot;gid&quot;</span>: 0,    <span class="hljs-string">&quot;group&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>,    <span class="hljs-string">&quot;md5sum&quot;</span>:  <span class="hljs-string">&quot;405051193782db9dbeb84f5fbd9f383d&quot;</span>,    <span class="hljs-string">&quot;mode&quot;</span>: <span class="hljs-string">&quot;0755&quot;</span>,    <span class="hljs-string">&quot;owner&quot;</span>: <span class="hljs-string">&quot;root&quot;</span>,    <span class="hljs-string">&quot;size&quot;</span>: 97423360,    <span class="hljs-string">&quot;src&quot;</span>:  <span class="hljs-string">&quot;/home/sre/.ansible/tmp/ansible-tmp-1695112504.53-187677157269723/source&quot;</span>,    <span class="hljs-string">&quot;state&quot;</span>: <span class="hljs-string">&quot;file&quot;</span>,    <span class="hljs-string">&quot;uid&quot;</span>: 0  &#125;</span> <br>ksgame-gamecloud-hotfix-minio-test2-1.hb.txyun  | CHANGED =&gt; &#123;    &quot;changed&quot;: true,    &quot;checksum&quot;:  &quot;abd60fdc8f830680f6a78bb50f757a28f1849f2c&quot;,    &quot;dest&quot;:  &quot;/usr/local/bin/minio&quot;,    &quot;gid&quot;: 0,    &quot;group&quot;: &quot;root&quot;,    &quot;md5sum&quot;:  &quot;405051193782db9dbeb84f5fbd9f383d&quot;,    &quot;mode&quot;: &quot;0755&quot;,    &quot;owner&quot;: &quot;root&quot;,    &quot;size&quot;: 97423360,    &quot;src&quot;: &quot;/home/sre/.ansible/tmp/ansible-tmp-1695112504.51-77545080547971/source&quot;,    &quot;state&quot;: &quot;file&quot;,    &quot;uid&quot;: 0  &#125;  <br>ksgame-gamecloud-hotfix-minio-test2-2.hb.txyun  | CHANGED =&gt; &#123;    &quot;changed&quot;: true,    &quot;checksum&quot;:  &quot;abd60fdc8f830680f6a78bb50f757a28f1849f2c&quot;,    &quot;dest&quot;:  &quot;/usr/local/bin/minio&quot;,    &quot;gid&quot;: 0,    &quot;group&quot;: &quot;root&quot;,    &quot;md5sum&quot;:  &quot;405051193782db9dbeb84f5fbd9f383d&quot;,    &quot;mode&quot;: &quot;0755&quot;,    &quot;owner&quot;: &quot;root&quot;,    &quot;size&quot;: 97423360,    &quot;src&quot;:  &quot;/home/sre/.ansible/tmp/ansible-tmp-1695112504.52-33563145091871/source&quot;,    &quot;state&quot;: &quot;file&quot;,    &quot;uid&quot;: 0  &#125;  <br>ksgame-gamecloud-hotfix-minio-test2-3.hb.txyun  | CHANGED =&gt; &#123;    &quot;changed&quot;: true,    &quot;checksum&quot;:  &quot;abd60fdc8f830680f6a78bb50f757a28f1849f2c&quot;,    &quot;dest&quot;:  &quot;/usr/local/bin/minio&quot;,    &quot;gid&quot;: 0,    &quot;group&quot;: &quot;root&quot;,    &quot;md5sum&quot;:  &quot;405051193782db9dbeb84f5fbd9f383d&quot;,    &quot;mode&quot;: &quot;0755&quot;,    &quot;owner&quot;: &quot;root&quot;,    &quot;size&quot;: 97423360,    &quot;src&quot;:  &quot;/home/sre/.ansible/tmp/ansible-tmp-1695112504.52-117741071403493/source&quot;,    &quot;state&quot;: &quot;file&quot;,    &quot;uid&quot;: 0  &#125;  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">ansible -i hosts2 hosts2 -m shell -a  <span class="hljs-string">&quot;ls -lh /usr/local/bin/minio&quot;</span> -b --become-user=root</span>  <br>ksgame-gamecloud-hotfix-minio-test2-1.hb.txyun  | CHANGED | rc=0 &gt;&gt;  -rwxr-xr-x 1  root root 93M Sep 19 16:35 /usr/local/bin/minio     <br>ksgame-gamecloud-hotfix-minio-test2-4.hb.txyun  | CHANGED | rc=0 &gt;&gt;  -rwxr-xr-x 1  root root 93M Sep 19 16:35 /usr/local/bin/minio     <br>ksgame-gamecloud-hotfix-minio-test2-2.hb.txyun  | CHANGED | rc=0 &gt;&gt;  -rwxr-xr-x 1  root root 93M Sep 19 16:35 /usr/local/bin/minio     <br>ksgame-gamecloud-hotfix-minio-test2-3.hb.txyun  | CHANGED | rc=0 &gt;&gt;  -rwxr-xr-x 1  root root 93M Sep 19 16:35 /usr/local/bin/minio  <br><br><br></code></pre></td></tr></table></figure><h3 id="重新启动部署"><a href="#重新启动部署" class="headerlink" title="重新启动部署"></a>重新启动部署</h3><p>运行命令以同时重新启动部署中的所有 MinIO 服务器进程。<a href="https://min.io/docs/minio/linux/reference/minio-mc-admin/mc-admin-service.html#mc.admin.service.restart" title="mc.admin.service.restart"><code>mc admin service restart</code></a></p><p>重新启动过程通常会在几秒钟内完成，并且_不会中断_正在进行的操作。 </p><p><img src="https://s2.loli.net/2023/11/24/uHUnmhz24CjgVfs.png" alt="image-20231124202325194"></p><p>提示重启完成</p><h3 id="验证升级"><a href="#验证升级" class="headerlink" title="验证升级"></a>验证升级</h3><p>再次使用<code>mc admin info ALIAS</code> 命令查看当前版本信息</p><p><img src="https://s2.loli.net/2023/11/24/Ek71GwaD4jFgqxV.jpg" alt="img"></p><p>确认版本已被更新</p>]]></content>
    
    
    <summary type="html">使用minio官方的mc客户端管理minio集群</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
    <category term="minio" scheme="http://www.qintianjun.top/tags/minio/"/>
    
  </entry>
  
  <entry>
    <title>minio安装</title>
    <link href="http://www.qintianjun.top/2023/08/10/minio%E5%AE%89%E8%A3%85/"/>
    <id>http://www.qintianjun.top/2023/08/10/minio%E5%AE%89%E8%A3%85/</id>
    <published>2023-08-10T10:27:14.000Z</published>
    <updated>2023-08-11T05:10:32.111Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 本文收集整理自minio.io官方, 2023年6月文档</p></blockquote><h1 id="单节点单驱动器"><a href="#单节点单驱动器" class="headerlink" title="单节点单驱动器"></a>单节点单驱动器</h1><p>本页上的过程介绍了在单节点单驱动器（SNSD）配置中部署 MinIO，以便进行早期开发和评估。SNSD 除了底层存储卷实现的内容（RAID、LVM、ZFS 等）之外，部署不提供额外的可靠性或可用性。</p><p>从开始 <a href="https://github.com/minio/minio/releases/tag/RELEASE.2022-06-02T02-11-04Z">RELEASE.2022-06-02T02-11-04Z</a>，MinIO 为单节点单驱动器部署实现了零奇偶校验纠删码后端。此功能允许在不需要多个驱动器的情况下访问 <a href="https://www.minio.org.cn/docs/cn/minio/linux/operations/concepts/erasure-coding.html#minio-erasure-coding">纠删码相关功能</a>。</p><p>MinIO仅从 SNSD（Single-Node,Single-Drive） 模式，如果存储卷或路径为空 _or_，则仅包含由以前的 SNSD 部署。有关详细信息，请参阅上的 <a href="https://www.minio.org.cn/docs/cn/minio/linux/operations/install-deploy-manage/deploy-minio-single-node-single-drive.html#minio-snsd-pre-existing-data">具有预先存在数据的 SNSD 行为</a> 文档。</p><p>对于扩展的开发或生产环境，请在拓扑中 <a href="https://www.minio.org.cn/docs/cn/minio/linux/operations/install-deploy-manage/deploy-minio-multi-node-multi-drive.html#minio-mnmd">多节点多驱动器（分布式）</a> 部署 MinIO</p><blockquote><p><a href="https://github.com/minio/minio/releases/tag/RELEASE.2022-10-29T06-21-33Z">RELEASE.2022-10-29T06-21-33Z</a> 完全删除 <a href="https://blog.min.io/deprecation-of-the-minio-gateway/">已弃用的网关&#x2F;文件系统</a> 后端。如果 MinIO 启动并检测到现有的文件系统后端文件，则会返回错误。</p></blockquote><p>要从 FS 后端部署迁移，请使用 <a href="https://www.minio.org.cn/docs/cn/minio/linux/reference/minio-mc/mc-mirror.html#command-mc.mirror" title="mc.mirror"><code>mc mirror</code></a> 或 <a href="https://www.minio.org.cn/docs/cn/minio/linux/reference/minio-mc/mc-cp.html#command-mc.cp" title="mc.cp"><code>mc cp</code></a> 将数据复制到新的 MinIO SNSD 部署。你还应该在 SNSD 部署。</p><h2 id="预先存在的数据"><a href="#预先存在的数据" class="headerlink" title="预先存在的数据"></a>预先存在的数据</h2><p>MinIO 启动行为取决于指定存储卷或路径的内容。服务器检查 MinIO 内部后端数据以及现有文件夹和文件的结构。下表列出了可能的存储卷状态和 MinIO 行为：<br><img src="https://s2.loli.net/2023/08/11/y5kfK49zCeHRYlc.png"></p><h2 id="部署单节点单驱动器-MinIO"><a href="#部署单节点单驱动器-MinIO" class="headerlink" title="部署单节点单驱动器 MinIO"></a>部署单节点单驱动器 MinIO</h2><p>以下过程部署由单个 MinIO 服务器和单个驱动器或存储卷组成的 MinIO。</p><h3 id="1-下载-MinIO-服务器"><a href="#1-下载-MinIO-服务器" class="headerlink" title="1) 下载 MinIO 服务器"></a>1) 下载 MinIO 服务器</h3><p><strong>rpm</strong>:</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64<span class="hljs-regexp">/archive/mi</span>nio-<span class="hljs-number">20230504214430.0</span>.<span class="hljs-number">0</span>.x86_64.rpm -O minio.rpm<br>rpm -ivh install minio.rpm<br></code></pre></td></tr></table></figure><p><strong>二进制</strong></p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio<br>chmod +x minio<br>sudo mv minio <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><h3 id="2-systemd-创建服务文件"><a href="#2-systemd-创建服务文件" class="headerlink" title="2) systemd 创建服务文件"></a>2) <code>systemd</code> 创建服务文件</h3><p><code>.deb</code>或软件包<code>.rpm</code>将以下 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a>服务文件安装到 <code>/etc/systemd/system/minio.service</code>. 对于二进制安装，在所有 MinIO 主机上手动创建此文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=MinIO<br><span class="hljs-attr">Documentation</span>=https://min.io/docs/minio/linux/index.html<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">AssertFileIsExecutable</span>=/usr/local/bin/minio<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">WorkingDirectory</span>=/usr/local<br><br><span class="hljs-attr">User</span>=minio-user<br><span class="hljs-attr">Group</span>=minio-user<br><span class="hljs-attr">ProtectProc</span>=invisible<br><br><span class="hljs-attr">EnvironmentFile</span>=-/etc/default/minio<br><span class="hljs-attr">ExecStartPre</span>=/bin/bash -c <span class="hljs-string">&quot;if [ -z \&quot;$&#123;MINIO_VOLUMES&#125;\&quot; ]; then echo \&quot;Variable MINIO_VOLUMES not set in /etc/default/minio\&quot;; exit 1; fi&quot;</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/minio server <span class="hljs-variable">$MINIO_OPTS</span> <span class="hljs-variable">$MINIO_VOLUMES</span><br><br><span class="hljs-comment"># Let systemd restart this service always</span><br><span class="hljs-attr">Restart</span>=always<br><br><span class="hljs-comment"># Specifies the maximum file descriptor number that can be opened by this process</span><br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span><br><br><span class="hljs-comment"># Specifies the maximum number of threads this process can create</span><br><span class="hljs-attr">TasksMax</span>=infinity<br><br><span class="hljs-comment"># Disable timeout logic and wait until process is stopped</span><br><span class="hljs-attr">TimeoutStopSec</span>=infinity<br><span class="hljs-attr">SendSIGKILL</span>=<span class="hljs-literal">no</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment"># Built for $&#123;project.name&#125;-$&#123;project.version&#125; ($&#123;project.name&#125;)</span><br></code></pre></td></tr></table></figure><p>默认情况下，该<code>minio.service</code>文件作为<code>minio-user</code>用户和组运行。<code>groupadd</code>您可以使用和命令创建用户和组<code>useradd</code> 。以下示例创建用户、组并设置权限以访问旨在供 MinIO 使用的文件夹路径。这些命令通常需要 root ( <code>sudo</code>) 权限。</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">groupadd -r minio-<span class="hljs-keyword">user</span><br><span class="hljs-title">useradd</span> -M -r -g minio-<span class="hljs-keyword">user</span> <span class="hljs-title">minio-user</span><br>chown minio-user:minio-<span class="hljs-keyword">user</span> <span class="hljs-title">/mnt</span>/disk1 /mnt/disk2 /mnt/disk3 /mnt/disk4<br></code></pre></td></tr></table></figure><p>指定的驱动器路径作为示例提供。更改它们以匹配 MinIO 打算使用的那些驱动器的路径。</p><p><code>User</code>或者，将和值更改<code>Group</code>为系统主机上具有必要访问权限和权限的另一个用户和组。<br>附：<br><a href="https://github.com/minio/minio-service">MinIO 在github.com&#x2F;minio&#x2F;minio-service</a>上发布了额外的启动脚本示例 。</p><h3 id="3-创建环境变量文件"><a href="#3-创建环境变量文件" class="headerlink" title="3) 创建环境变量文件"></a>3) 创建环境变量文件</h3><p>创建一个环境变量文件在<code>/etc/default/minio</code><br>例子：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"># cat /etc/<span class="hljs-keyword">default</span>/minio<br># MINIO_ROOT_USER <span class="hljs-keyword">and</span> MINIO_ROOT_PASSWORD sets the root account <span class="hljs-keyword">for</span> the MinIO <span class="hljs-keyword">server</span>.<br># This <span class="hljs-keyword">user</span> has unrestricted permissions <span class="hljs-keyword">to</span> <span class="hljs-keyword">perform</span> S3 <span class="hljs-keyword">and</span> administrative API operations <span class="hljs-keyword">on</span> <span class="hljs-keyword">any</span> resource <span class="hljs-keyword">in</span> the deployment.<br># Omit <span class="hljs-keyword">to</span> use the <span class="hljs-keyword">default</span> <span class="hljs-keyword">values</span> <span class="hljs-string">&#x27;minioadmin:minioadmin&#x27;</span>.<br># MinIO recommends setting non-<span class="hljs-keyword">default</span> <span class="hljs-keyword">values</span> <span class="hljs-keyword">as</span> a best practice, regardless <span class="hljs-keyword">of</span> environment<br><br>MINIO_ROOT_USER=<span class="hljs-keyword">USER</span><br>MINIO_ROOT_PASSWORD=<span class="hljs-keyword">PASSWORD</span><br><br># Use <span class="hljs-keyword">if</span> you want <span class="hljs-keyword">to</span> run MinIO <span class="hljs-keyword">on</span> a custom port.<br># MINIO_OPTS=&quot;--address :9199 --console-address :9001&quot;<br>MINIO_OPTS=&quot;--console-address :40167&quot;<br><br># MINIO_VOLUMES sets the <span class="hljs-keyword">storage</span> volume <span class="hljs-keyword">or</span> <span class="hljs-type">path</span> <span class="hljs-keyword">to</span> use <span class="hljs-keyword">for</span> the MinIO <span class="hljs-keyword">server</span>.<br><br>MINIO_VOLUMES=&quot;/data/web_server/minio_data&quot;<br><br># MINIO_SERVER_URL sets the hostname <span class="hljs-keyword">of</span> the <span class="hljs-keyword">local</span> machine <span class="hljs-keyword">for</span> use <span class="hljs-keyword">with</span> the MinIO <span class="hljs-keyword">Server</span><br># MinIO assumes your network control plane can correctly resolve this hostname <span class="hljs-keyword">to</span> the <span class="hljs-keyword">local</span> machine<br></code></pre></td></tr></table></figure><h3 id="4-启动-MinIO-服务"><a href="#4-启动-MinIO-服务" class="headerlink" title="4) 启动 MinIO 服务"></a>4) 启动 MinIO 服务</h3><p>在本地主机上发出以下命令以启动 MinIO SNSD部署作为服务：</p><p><code>sudo systemctl start minio.service</code></p><p>使用以下命令确认服务在线且正常运行：</p><p><code>sudo systemctl status minio.service</code><br><code>journalctl -f -u minio.service</code></p><p>当服务器进程连接和同步时，MinIO 可能会记录更多的非严重警告。这些警告通常是暂时的，应该会在部署上线时解决。<br>如果任何驱动器在启动 MinIO 后仍处于脱机状态，请在开始生产工作负载之前检查并解决任何阻碍其功能的问题。</p><p>输出<code>journalctl</code>应类似于以下内容：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl status  minio -l</span><br>● minio.service - MinIO<br>   Loaded: loaded (/etc/systemd/system/minio.service; disabled; vendor preset: disabled)<br>   Active: active (running) since Fri 2023-05-12 11:44:29 CST; 16s ago<br>     Docs: https://min.io/docs/minio/linux/index.html<br>  Process: 1702456 ExecStartPre=/bin/bash -c if [ -z &quot;$&#123;MINIO_VOLUMES&#125;&quot; ]; then echo &quot;Variable MINIO_VOLUMES not set in /etc/default/minio&quot;; exit 1; fi (code=exited, status=0/SUCCESS)<br> Main PID: 1702459 (minio)<br>   CGroup: /system.slice/minio.service<br>           └─1702459 /usr/local/bin/minio server --console-address :40167 /data/web_server/minio_data<br><br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Copyright: 2015-2023 MinIO, Inc.<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: License: GNU AGPLv3 &lt;https://www.gnu.org/licenses/agpl-3.0.html&gt;<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Version: RELEASE.2023-04-13T03-08-07Z (go1.20.3 linux/amd64)<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Status:         1 Online, 0 Offline.<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: API: http://10.73.198.192:9000  http://127.0.0.1:9000<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Console: http://10.73.198.192:40167 http://127.0.0.1:40167<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Documentation: https://min.io/docs/minio/linux/index.html<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Warning: The standard parity is set to 0. This can lead to data loss.<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: You are running an older version of MinIO released 3 weeks ago<br>May 12 11:44:30 ksgame-gamecloud-minio-test-1.hb.txyun minio[1702459]: Update: Run `mc admin update`<br></code></pre></td></tr></table></figure><h3 id="5-连接到-MinIO-服务"><a href="#5-连接到-MinIO-服务" class="headerlink" title="5) 连接到 MinIO 服务"></a>5) 连接到 MinIO 服务</h3><h1 id="多节点多驱动器"><a href="#多节点多驱动器" class="headerlink" title="多节点多驱动器"></a>多节点多驱动器</h1><h2 id="顺序主机名"><a href="#顺序主机名" class="headerlink" title="顺序主机名"></a>顺序主机名</h2><p>MinIO_需要_在创建服务器池时使用扩展符号<code>&#123;x...y&#125;</code>来表示一系列连续的 MinIO 主机。因此，MinIO_需要_ 使用按顺序编号的主机名来表示 部署中的每个进程。</p><p>例如，以下主机名将支持 4 节点分布式部署：</p><ul><li>ksgame-gamecloud-minio-test-1.hb.txyun</li><li>ksgame-gamecloud-minio-test-2.hb.txyun</li><li>ksgame-gamecloud-minio-test-3.hb.txyun</li><li>ksgame-gamecloud-minio-test-4.hb.txyun</li></ul><h2 id="顺序挂载的本地-JBOD-存储"><a href="#顺序挂载的本地-JBOD-存储" class="headerlink" title="顺序挂载的本地 JBOD 存储"></a>顺序挂载的本地 JBOD 存储</h2><p>MinIO 强烈建议使用 XFS 格式磁盘的直连JBOD 阵列以获得最佳性能。</p><ul><li><p>与网络存储（NAS、SAN、NFS）相比，直连存储 (DAS) 具有显着的性能和一致性优势。</p></li><li><p>使用非 XFS 文件系统（ext4、btrfs、zfs）的部署往往性能较低，同时会出现意外或不良行为。</p></li><li><p>RAID 或类似技术在与分布式 MinIO 部署一起使用时不会提供额外的弹性或可用性优势，并且通常会降低系统性能。</p></li></ul><blockquote><p>确保部署中的所有节点都使用具有相同容量（例如<code>N</code>TB）的相同类型（NVMe、SSD 或 HDD）的驱动器。MinIO 不区分驱动器类型，也不受益于混合存储类型。此外。MinIO 将每个驱动器使用的大小限制为部署中的最小驱动器。例如，如果部署有 15 个 10TB 驱动器和 1 个 1TB 驱动器，MinIO 将每个驱动器的容量限制为 1TB。</p></blockquote><p>MinIO_要求_在创建新部署时使用扩展符号<code>&#123;x...y&#125;</code>来表示一系列连续的驱动器，其中部署中的所有节点都有一组相同的已安装驱动器。MinIO 还要求物理驱动器的顺序在重启后保持不变，这样给定的挂载点总是指向相同格式的驱动器。因此，MinIO<strong>强烈建议</strong>使用<code>/etc/fstab</code>或类似的基于文件的挂载配置，以确保驱动器顺序在重启后不会更改。例如：</p><p><img src="https://s2.loli.net/2023/08/11/YVWImN1FTv7xO4U.png"></p><p>然后您可以使用扩展符号指定整个驱动器范围 <code>/mnt/disk&#123;1...2&#125;</code>。如果要在每个驱动器上使用特定的子文件夹，请将其指定为<code>/mnt/disk&#123;1...2&#125;/minio</code>.</p><p>挂载数据盘：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># mkdir /mnt/disk1</span><br><span class="hljs-comment"># mount /dev/vdb /mnt/disk1</span><br><span class="hljs-comment"># mkdir /mnt/disk2</span><br><span class="hljs-comment"># mount /dev/vdc /mnt/disk2</span><br><span class="hljs-comment"># df -Th</span><br>Filesystem     Type      Size  Used Avail Use% Mounted on<br>devtmpfs       devtmpfs  3.9G     0  3.9G   0% /dev<br>tmpfs          tmpfs     3.9G   52K  3.9G   1% /dev/shm<br>tmpfs          tmpfs     3.9G  780K  3.9G   1% /run<br>tmpfs          tmpfs     3.9G     0  3.9G   0% /sys/fs/cgroup<br>/dev/vda1      ext4       99G  5.6G   89G   6% /<br>tmpfs          tmpfs     785M     0  785M   0% /run/user/0<br>tmpfs          tmpfs     785M     0  785M   0% /run/user/1000<br>tmpfs          tmpfs     785M     0  785M   0% /run/user/1101<br>/dev/vdb       xfs       500G   33M  500G   1% /mnt/disk1<br>/dev/vdc       xfs       500G   33M  500G   1% /mnt/disk2<br></code></pre></td></tr></table></figure><p>写入fstab，开机自动挂载：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"># cat <span class="hljs-regexp">/etc/</span>fstab<br>....<br># &lt;<span class="hljs-keyword">file</span> system&gt;  &lt;mount point&gt;  &lt;type&gt;  &lt;<span class="hljs-keyword">options</span>&gt;         &lt;<span class="hljs-keyword">dump</span>&gt;  &lt;pass&gt;<br>LABEL=DISK1      <span class="hljs-regexp">/mnt/</span>disk1     xfs     defaults,noatime  <span class="hljs-number">0</span>       <span class="hljs-number">2</span><br>LABEL=DISK2      <span class="hljs-regexp">/mnt/</span>disk2     xfs     defaults,noatime  <span class="hljs-number">0</span>       <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="部署分布式-MinIO"><a href="#部署分布式-MinIO" class="headerlink" title="部署分布式 MinIO"></a>部署分布式 MinIO</h1><p>以下过程创建一个新的分布式 MinIO 部署，其中包含一个<a href="https://min.io/docs/minio/linux/operations/concepts.html#minio-intro-server-pool">Server Pool</a>。</p><p>下面提供的所有命令都使用示例值。将这些值替换为适合部署的值。</p><h2 id="1-在每个节点上安装-MinIO-二进制文件"><a href="#1-在每个节点上安装-MinIO-二进制文件" class="headerlink" title="1 在每个节点上安装 MinIO 二进制文件"></a>1 在每个节点上安装 MinIO 二进制文件</h2><p>以下选项卡提供了使用 RPM、DEB 或二进制将 MinIO 安装到 64 位 Linux 操作系统上的示例。RPM 和 DEB 包自动将 MinIO 安装到必要的系统路径并<code>minio</code>为<code>systemctl</code>. MinIO 强烈建议使用 RPM 或 DEB 安装路径。要更新使用管理的部署<code>systemctl</code>，请参阅<a href="https://min.io/docs/minio/linux/operations/install-deploy-manage/upgrade-minio-deployment.html#minio-upgrade-systemctl">更新 systemctl-Managed MinIO 部署</a>。</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//</span>dl.min.io<span class="hljs-regexp">/server/mi</span>nio<span class="hljs-regexp">/release/</span>linux-amd64/minio<br>chmod +x minio<br>sudo mv minio <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><h2 id="2-创建systemd服务文件"><a href="#2-创建systemd服务文件" class="headerlink" title="2 创建systemd服务文件"></a>2 创建<code>systemd</code>服务文件</h2><p><code>.deb</code>或软件包<code>.rpm</code>将以下 <a href="https://www.freedesktop.org/wiki/Software/systemd/">systemd</a>服务文件安装到 <code>/etc/systemd/system/minio.service</code>. 对于二进制安装，在所有 MinIO 主机上手动创建此文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=MinIO<br><span class="hljs-attr">Documentation</span>=https://min.io/docs/minio/linux/index.html<br><span class="hljs-attr">Wants</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">After</span>=network-<span class="hljs-literal">on</span>line.target<br><span class="hljs-attr">AssertFileIsExecutable</span>=/usr/local/bin/minio<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">WorkingDirectory</span>=/usr/local<br><br><span class="hljs-attr">User</span>=minio-user<br><span class="hljs-attr">Group</span>=minio-user<br><span class="hljs-attr">ProtectProc</span>=invisible <span class="hljs-comment"># 官网这个参数加上以后运行提示不识别，我给注释了</span><br><br><span class="hljs-attr">EnvironmentFile</span>=-/etc/default/minio<br><span class="hljs-attr">ExecStartPre</span>=/bin/bash -c <span class="hljs-string">&quot;if [ -z \&quot;$&#123;MINIO_VOLUMES&#125;\&quot; ]; then echo \&quot;Variable MINIO_VOLUMES not set in /etc/default/minio\&quot;; exit 1; fi&quot;</span><br><span class="hljs-attr">ExecStart</span>=/usr/local/bin/minio server <span class="hljs-variable">$MINIO_OPTS</span> <span class="hljs-variable">$MINIO_VOLUMES</span><br><br><span class="hljs-comment"># MinIO RELEASE.2023-05-04T21-44-30Z adds support for Type=notify (https://www.freedesktop.org/software/systemd/man/systemd.service.html#Type=)</span><br><span class="hljs-comment"># This may improve systemctl setups where other services use `After=minio.server`</span><br><span class="hljs-comment"># Uncomment the line to enable the functionality</span><br><span class="hljs-comment"># Type=notify</span><br><br><span class="hljs-comment"># Let systemd restart this service always</span><br><span class="hljs-attr">Restart</span>=always<br><br><span class="hljs-comment"># Specifies the maximum file descriptor number that can be opened by this process</span><br><span class="hljs-attr">LimitNOFILE</span>=<span class="hljs-number">65536</span><br><br><span class="hljs-comment"># Specifies the maximum number of threads this process can create</span><br><span class="hljs-attr">TasksMax</span>=infinity<br><br><span class="hljs-comment"># Disable timeout logic and wait until process is stopped</span><br><span class="hljs-attr">TimeoutStopSec</span>=infinity<br><span class="hljs-attr">SendSIGKILL</span>=<span class="hljs-literal">no</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br><br><span class="hljs-comment"># Built for $&#123;project.name&#125;-$&#123;project.version&#125; ($&#123;project.name&#125;)</span><br></code></pre></td></tr></table></figure><p>默认情况下，该<code>minio.service</code>文件作为<code>minio-user</code>用户和组运行。<code>groupadd</code>您可以使用和命令创建用户和组<code>useradd</code> 。以下示例创建用户、组并设置权限以访问旨在供 MinIO 使用的文件夹路径。这些命令通常需要 root ( <code>sudo</code>) 权限。</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">groupadd -r minio-<span class="hljs-keyword">user</span><br><span class="hljs-title">useradd</span> -M -r -g minio-<span class="hljs-keyword">user</span> <span class="hljs-title">minio-user</span><br>chown minio-user:minio-<span class="hljs-keyword">user</span> <span class="hljs-title">/mnt</span>/disk1 /mnt/disk2 /mnt/disk3 /mnt/disk4<br></code></pre></td></tr></table></figure><p><code>User</code>或者，将和值更改<code>Group</code>为系统主机上具有必要访问权限和权限的另一个用户和组。</p><p><a href="https://github.com/minio/minio-service">MinIO 在github.com&#x2F;minio&#x2F;minio-service</a>上发布了额外的启动脚本示例 。</p><h2 id="3-创建服务环境文件"><a href="#3-创建服务环境文件" class="headerlink" title="3 创建服务环境文件"></a>3 创建服务环境文件</h2><p>在 处创建一个环境文件<code>/etc/default/minio</code>。MinIO 服务使用这个文件作为 MinIO和_文件使用的所有 <a href="https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#minio-server-environment-variables">环境变量</a>的来源 。<code>minio.service</code></p><blockquote><p>目前测试环境有4台实例<br>ksgame-gamecloud-minio-test-1.hb.txyun<br>ksgame-gamecloud-minio-test-2hb.txyun<br>ksgame-gamecloud-minio-test-3.hb.txyun<br>ksgame-gamecloud-minio-test-4.hb.txyun<br>每台实例挂载2块数据盘<br>&#x2F;mnt&#x2F;disk1<br>&#x2F;mnt&#x2F;disk2</p></blockquote><p>修改示例以反映您的部署拓扑：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat minio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_ROOT_USER and MINIO_ROOT_PASSWORD sets the root account <span class="hljs-keyword">for</span> the MinIO server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">This user has unrestricted permissions to perform S3 and administrative API operations on any resource <span class="hljs-keyword">in</span> the deployment.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Omit to use the default values <span class="hljs-string">&#x27;minioadmin:minioadmin&#x27;</span>.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MinIO recommends setting non-default values as a best practice, regardless of environment</span><br><br>MINIO_ROOT_USER=USER<br>MINIO_ROOT_PASSWORD=PASSWORD<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use <span class="hljs-keyword">if</span> you want to run MinIO on a custom port.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_OPTS=<span class="hljs-string">&quot;--address :9199 --console-address :9001&quot;</span></span><br>MINIO_OPTS=&quot;--console-address :40167 --address :9000&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_VOLUMES sets the storage volume or path to use <span class="hljs-keyword">for</span> the MinIO server.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MINIO_VOLUMES=<span class="hljs-string">&quot;/minio_data&quot;</span></span><br>MINIO_VOLUMES=&quot;http://ksgame-gamecloud-minio-test-&#123;1...4&#125;.hb.txyun:9000/mnt/disk&#123;1...2&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_SERVER_URL sets the hostname of the <span class="hljs-built_in">local</span> machine <span class="hljs-keyword">for</span> use with the MinIO Server</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MinIO assumes your network control plane can correctly resolve this hostname to the <span class="hljs-built_in">local</span> machine</span><br>[sre@game-cs002 /home/sre/game-scripts/minio]$cat minio<br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_ROOT_USER and MINIO_ROOT_PASSWORD sets the root account <span class="hljs-keyword">for</span> the MinIO server.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">This user has unrestricted permissions to perform S3 and administrative API operations on any resource <span class="hljs-keyword">in</span> the deployment.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Omit to use the default values <span class="hljs-string">&#x27;minioadmin:minioadmin&#x27;</span>.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MinIO recommends setting non-default values as a best practice, regardless of environment</span><br><br>MINIO_ROOT_USER=USER<br>MINIO_ROOT_PASSWORD=$PASSWORD<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Use <span class="hljs-keyword">if</span> you want to run MinIO on a custom port.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_OPTS=<span class="hljs-string">&quot;--address :9199 --console-address :9001&quot;</span></span><br>MINIO_OPTS=&quot;--console-address :9001 --address :9000&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_VOLUMES sets the storage volume or path to use <span class="hljs-keyword">for</span> the MinIO server.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">MINIO_VOLUMES=<span class="hljs-string">&quot;/minio_data&quot;</span></span><br>MINIO_VOLUMES=&quot;http://ksgame-gamecloud-minio-test-&#123;1...4&#125;.hb.txyun:9000/mnt/disk&#123;1...2&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MINIO_SERVER_URL sets the hostname of the <span class="hljs-built_in">local</span> machine <span class="hljs-keyword">for</span> use with the MinIO Server</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">MinIO assumes your network control plane can correctly resolve this hostname to the <span class="hljs-built_in">local</span> machine</span><br></code></pre></td></tr></table></figure><p>您可以根据部署的需要指定其他<a href="https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#minio-server-environment-variables">环境变量或服务器命令行选项。</a>部署中的所有 MinIO 节点都应该包含相同的环境变量，每个变量的值都相同。</p><h2 id="4-添加-TLS-x2F-SSL-证书"><a href="#4-添加-TLS-x2F-SSL-证书" class="headerlink" title="4 添加 TLS&#x2F;SSL 证书"></a>4 添加 TLS&#x2F;SSL 证书</h2><blockquote><p>因为我们有nginx集群，证书统一托管，故未在minio机器上单独部署证书，姑且一看</p></blockquote><p>MinIO在 MinIO目录中检测到有效的 x.509 证书 ( ) 和私钥 ( ) 后自动启用<a href="https://min.io/docs/minio/linux/operations/network-encryption.html#minio-tls">传输层安全 (TLS)</a> 1.2+ 。<code>.crt``.key``$&#123;HOME&#125;/.minio/certs</code></p><p>对于<code>systemd</code>托管部署，使用<code>$HOME</code>运行 MinIO 服务器进程的用户的目录。提供的<code>minio.service</code> 文件以<code>minio-user</code>. 前面的步骤包括使用主目录创建此用户的说明<code>/home/minio-user</code>。</p><ul><li><p>将 TLS 证书放入<code>/home/minio-user/.minio/certs</code>.</p></li><li><p>如果_任何_MinIO 服务器或客户端使用由未知证书颁发机构（自签名或内部 CA）签名的证书，则必须_将_CA 证书放在<code>/home/minio-user/.minio/certs/CAs</code>部署中的所有 MinIO 主机上。MinIO 拒绝无效证书（不受信任、过期或格式错误）。</p></li></ul><p>如果该<code>minio.service</code>文件指定了不同的用户帐户，请使用 <code>$HOME</code>该帐户的目录。或者，使用命令行参数指定自定义证书目录 。修改中的变量 以设置此选项。运行 MinIO 服务器进程的用户必须_对_指定目录具有读取和列出权限。<a href="https://min.io/docs/minio/linux/reference/minio-server/minio-server.html#minio.server.-certs-dir" title="minio.server.--证书目录"><code>minio server --certs-dir</code></a><code>MINIO_OPTS``/etc/defaults/minio``systemd</code></p><p>有关为 TLS 配置 MinIO 的更多具体指南，包括通过服务器名称指示 (SNI) 的多域支持，请参阅<a href="https://min.io/docs/minio/linux/operations/network-encryption.html#minio-tls">网络加密 (TLS)</a>。您可以选择跳过此步骤以在不启用 TLS 的情况下进行部署。MinIO 强烈建议_不要在早期开发之外进行_非 TLS 部署。</p><h2 id="5-运行-MinIO-服务器进程"><a href="#5-运行-MinIO-服务器进程" class="headerlink" title="5 运行 MinIO 服务器进程"></a>5 运行 MinIO 服务器进程</h2><p>在部署中的每个节点上发出以下命令以启动 MinIO 服务：</p><p>sudo systemctl start minio.service</p><p>使用以下命令确认服务在线且正常运行：</p><p>sudo systemctl status minio.service<br>journalctl -f -u minio.service</p><p>当服务器进程连接和同步时，MinIO 可能会记录更多的非严重警告。这些警告通常是暂时的，应该会在部署上线时解决。</p><h2 id="6-nginx配置"><a href="#6-nginx配置" class="headerlink" title="6 nginx配置"></a>6 nginx配置</h2><p>参考</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> minio-minio-api &#123;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">10.73.198.192:9000</span> weight=<span class="hljs-number">10</span>;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">10.73.198.162:9000</span> weight=<span class="hljs-number">10</span>;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">10.73.195.139:9000</span> weight=<span class="hljs-number">10</span>;<br>  <span class="hljs-attribute">server</span> <span class="hljs-number">10.73.195.171:9000</span> weight=<span class="hljs-number">10</span>;<br>  <span class="hljs-attribute">keepalive</span> <span class="hljs-number">1000</span>;<br>  <span class="hljs-attribute">check</span> interval=<span class="hljs-number">5000</span> rise=<span class="hljs-number">2</span> fall=<span class="hljs-number">3</span> timeout=<span class="hljs-number">30000</span> type=tcp default_down=<span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span>;<br>  <span class="hljs-attribute">listen</span>      <span class="hljs-number">443</span> ssl;<br>  <span class="hljs-attribute">include</span>     extra/YOURCERT;<br>  <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">50m</span>;<br>  <span class="hljs-attribute">ssl_session_timeout</span>  <span class="hljs-number">5m</span>;<br>  <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>  <span class="hljs-attribute">ssl_ciphers</span> AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:DHE-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4;<br>  <span class="hljs-attribute">ssl_protocols</span>   TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br><br>  <span class="hljs-attribute">server_name</span> YOURDOMAIN;<br><br>  <span class="hljs-attribute">access_log</span>  /data/logs/nginx/gifshow.access.log  main;<br>  <span class="hljs-attribute">error_log</span>  /data/logs/nginx/gifshow.<span class="hljs-literal">error</span>.log;<br><br>  <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>  <span class="hljs-section">location</span> = /50x.html &#123;<br>    <span class="hljs-attribute">root</span>   html;<br>  &#125;<br><br>  <span class="hljs-attribute">if</span> ( <span class="hljs-variable">$scheme</span> = http ) &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br>  &#125;<br><br>  <span class="hljs-attribute">include</span>   extra/logid.conf;<br>  <span class="hljs-attribute">include</span>   limit/waf_anticc.conf;<br>  <span class="hljs-attribute">include</span>   extra/proxy.conf;<br><br>  <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">client_body_buffer_size</span> <span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">100m</span>;<br>    <span class="hljs-attribute">proxy_buffers</span> <span class="hljs-number">1024</span> <span class="hljs-number">4k</span>;<br>    <span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">300</span>;<br>    <span class="hljs-attribute">proxy_pass</span> http://minio-api;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-打开-MinIO-控制台"><a href="#7-打开-MinIO-控制台" class="headerlink" title="7 打开 MinIO 控制台"></a>7 打开 MinIO 控制台</h2><p>打开浏览器并在端口访问任何 MinIO 主机名<code>:9001</code>以打开<a href="https://min.io/docs/minio/linux/administration/minio-console.html#minio-console">MinIO 控制台</a>登录页面。例如， <code>https://minio1.example.com:9001</code>。</p><p>使用上一步中的minio_root_user和minio_root_password登录。</p><p><img src="https://s2.loli.net/2023/08/11/2P9Xfa1sqdtgebl.png"></p><p>您可以使用 MinIO 控制台执行一般管理任务，例如身份和访问管理、指标和日志监控或服务器配置。每个 MinIO 服务器都包含自己的嵌入式 MinIO 控制台。</p><p>多节点多驱动器部署完成</p>]]></content>
    
    
    <summary type="html">minio的部署安装，目前采用主机模式部署，后续添加k8s模式部署实验步骤</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
    <category term="minio" scheme="http://www.qintianjun.top/tags/minio/"/>
    
  </entry>
  
  <entry>
    <title>harbor高可用安装（离线方式）</title>
    <link href="http://www.qintianjun.top/2023/06/01/harbor%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%96%B9%E5%BC%8F%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2023/06/01/harbor%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AE%89%E8%A3%85%EF%BC%88%E7%A6%BB%E7%BA%BF%E6%96%B9%E5%BC%8F%EF%BC%89/</id>
    <published>2023-06-01T12:01:43.000Z</published>
    <updated>2023-06-02T06:38:21.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文实验参考微信公众号harbor进阶实践</p></blockquote><h2 id="1-环境说明"><a href="#1-环境说明" class="headerlink" title="1 环境说明"></a>1 环境说明</h2><h3 id="1-1-架构图"><a href="#1-1-架构图" class="headerlink" title="1.1 架构图"></a>1.1 架构图</h3><p><img src="https://s2.loli.net/2023/06/02/PrCRODq6YyVzGXg.png"></p><blockquote><p>将Harbor的redis缓存组件、PostgreSQL数据库组件迁移到系统外部做高可用，使用外部共享存储实现多个Harbor实例的数据共享，Harbor实例可横向扩展。</p></blockquote><h3 id="1-2-主机清单"><a href="#1-2-主机清单" class="headerlink" title="1.2 主机清单"></a>1.2 主机清单</h3><table><thead><tr><th align="left">ip地址</th><th align="left">主机名</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">192.168.88.131</td><td align="left">harbor-data</td><td align="left">部署Harbor实例的共享存储、外部数据库、外部缓存服务</td></tr><tr><td align="left">192.168.88.138</td><td align="left">harbo1</td><td align="left">Harbor实例1，8021端口</td></tr><tr><td align="left">192.168.88.139</td><td align="left">harbor2</td><td align="left">Harbor实例2，8021端口</td></tr><tr><td align="left">192.168.88.121</td><td align="left">&#x2F;</td><td align="left">负载均衡VIP,8121端口</td></tr></tbody></table><h3 id="1-3-服务版本"><a href="#1-3-服务版本" class="headerlink" title="1.3 服务版本"></a>1.3 服务版本</h3><table><thead><tr><th align="left">服务</th><th align="left">版本要求</th><th align="left">安装版本</th></tr></thead><tbody><tr><td align="left">Harbor</td><td align="left">&#x2F;</td><td align="left">2.3.5</td></tr><tr><td align="left">Docker</td><td align="left">17.06.0+</td><td align="left">19.03.8</td></tr><tr><td align="left">Docker-compose</td><td align="left">1.18.0+</td><td align="left">v2.2.3</td></tr><tr><td align="left">Redis</td><td align="left">6.0.16</td><td align="left">6.2.7</td></tr></tbody></table><h2 id="2-主机初始化"><a href="#2-主机初始化" class="headerlink" title="2 主机初始化"></a>2 主机初始化</h2><h3 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1 安装docker"></a>2.1 安装docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum install -y docker-ce</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl <span class="hljs-built_in">enable</span>  --now docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl status docker</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/docker/daemon.json</span></span><br>&#123;<br>   &quot;registry-mirrors&quot;: [&quot;https://xcg41ct3.mirror.aliyuncs.com&quot;],<br>   &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],  <br>   &quot;registry-mirrors&quot;: [&quot;https://3hjcmqfe.mirror.aliyuncs.com&quot;], <br>   &quot;log-driver&quot;: &quot;json-file&quot;,<br>   &quot;log-opts&quot;: &#123;<br>           &quot;max-size&quot;: &quot;500m&quot;,<br>           &quot;max-file&quot;: &quot;2&quot; <br>        &#125;<br>&#125;<br>EOF <br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">systemctl daemon-reload</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">systemctl restart docker</span></span><br></code></pre></td></tr></table></figure><blockquote><p>exec-opts”: [“native.cgroupdriver&#x3D;systemd”],     #驱动器 registry-mirrors: 镜像加速地址，可多个 max-file: log 最多保留数量 live-restore: 重启 docker 不重启容器，多用于 k8s 上</p></blockquote><h3 id="2-2-安装docker-compose"><a href="#2-2-安装docker-compose" class="headerlink" title="2.2 安装docker-compose"></a>2.2 安装docker-compose</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget https://github.com/docker/compose/releases/download/v2.2.3/docker-compose-linux-x86_64 <span class="hljs-comment"># 下载前先确认链接有效性</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mv</span>  docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker-compose version</span><br>Docker Compose version v2.2.3<br></code></pre></td></tr></table></figure><h3 id="2-3-配置内核参数"><a href="#2-3-配置内核参数" class="headerlink" title="2.3 配置内核参数"></a>2.3 配置内核参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">modprobe br_netfilter</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cat</span> &gt;&gt; /etc/sysctl.conf &lt;&lt; <span class="hljs-string">EOF</span></span><br>net.bridge.bridge-nf-call-ip6tables = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.ipv4.ip_forward = 1      #路由转发<br>EOF<br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-string">sysctl -p</span></span><br></code></pre></td></tr></table></figure><blockquote><p>如果提示<code>sysctl: cannot stat /proc/sys/net/ipv4/ip_forward : No such file or director</code><br>可能是conntrack没有加载，执行<code>lsmod |grep conntrack</code> 查看，执行<code>modprobe ip_conntrack</code>加载</p></blockquote><h2 id="3-使用NFS提供外部共享存储"><a href="#3-使用NFS提供外部共享存储" class="headerlink" title="3 使用NFS提供外部共享存储"></a>3 使用NFS提供外部共享存储</h2><h3 id="3-1-部署NFS服务端"><a href="#3-1-部署NFS服务端" class="headerlink" title="3.1 部署NFS服务端"></a>3.1 部署NFS服务端</h3><ul><li><p>安装并启动nfs</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum  install -y  nfs-utils</span> <br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl start nfs &amp;&amp; systemctl <span class="hljs-built_in">enable</span> nfs  &amp;&amp; systemctl status nfs</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">chkconfig nfs on              <span class="hljs-comment">#设置为开机自启</span></span><br></code></pre></td></tr></table></figure></li><li><p>创建共享目录</p></li></ul><p>客户端的数据将远程存入到共享目录下。</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor-data ~]# mkdir -p /data/harbor_data<br></code></pre></td></tr></table></figure><ul><li><p>修改配置</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor-data harbor_data]# cat /etc/exports<br>/data/harbor_data 192.168.88.0/24(rw,no_root_squash)<br></code></pre></td></tr></table></figure></li><li><p>重启nfs服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor-data harbor_data]# systemctl restart nfs<br>[root@harbor-data harbor_data]# systemctl status nfs<br>● nfs-server.service - NFS server and services<br>   Loaded: loaded (/usr/lib/systemd/system/nfs-server.service; enabled; vendor preset: disabled)<br>   Active: active (exited) since Fri 2023-04-07 06:50:46 CST; 3s ago<br>  Process: 2020 ExecStopPost=/usr/sbin/exportfs -f (code=exited, status=0/SUCCESS)<br>  Process: 2017 ExecStopPost=/usr/sbin/exportfs -au (code=exited, status=0/SUCCESS)<br>  Process: 2015 ExecStop=/usr/sbin/rpc.nfsd 0 (code=exited, status=0/SUCCESS)<br>  Process: 2050 ExecStartPost=/bin/sh -c if systemctl -q is-active gssproxy; then systemctl reload gssproxy ; fi (code=exited, status=0/SUCCESS)<br>  Process: 2035 ExecStart=/usr/sbin/rpc.nfsd $RPCNFSDARGS (code=exited, status=0/SUCCESS)<br>  Process: 2034 ExecStartPre=/usr/sbin/exportfs -r (code=exited, status=0/SUCCESS)<br> Main PID: 2035 (code=exited, status=0/SUCCESS)<br>    Tasks: 0<br>   Memory: 0B<br>   CGroup: /system.slice/nfs-server.service<br><br>Apr 07 06:50:45 harbor-data systemd[1]: Starting NFS server and services...<br>Apr 07 06:50:46 harbor-data systemd[1]: Started NFS server and services.<br><br></code></pre></td></tr></table></figure></li><li><p>检查共享目录信息</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor-data harbor_data]# showmount -e localhost<br>Export list for localhost:<br>/data/harbor_data 192.168.88.0/24<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-2-部署客户端"><a href="#3-2-部署客户端" class="headerlink" title="3.2 部署客户端"></a>3.2 部署客户端</h3><p>在harbor1和harbor2上操作</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">yum -y install nfs-utils</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">systemctl start nfs-utils &amp;&amp;  systemctl <span class="hljs-built_in">enable</span> nfs-utils &amp;&amp; systemctl status  nfs-utils</span><br></code></pre></td></tr></table></figure><h3 id="3-3-客户端挂在NFS共享存储"><a href="#3-3-客户端挂在NFS共享存储" class="headerlink" title="3.3 客户端挂在NFS共享存储"></a>3.3 客户端挂在NFS共享存储</h3><p>在 harbor1 和 harbor2 节点操作, 创建实例的存储目录，然后挂载到 NFS。</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor1 harbor]# mkdir -pv /data/harbor_data<br>mkdir: created directory ‘/data/harbor_data’<br>[root@harbor1 harbor]# cat &lt;&lt; EOF &gt;&gt; /etc/fstab <br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">192.168.88.131:/data/harbor_data /data/harbor_data nfs  defaults  0 0</span><br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">EOF</span><br>[root@harbor1 harbor]# mount -a<br></code></pre></td></tr></table></figure><blockquote><p>挂载格式：NFSIP: 共享目录   本地目录  nfs defaults 0 0</p></blockquote><p>测试是否可以正常使用<br><img src="https://s2.loli.net/2023/06/02/135g9LOMCGaDHik.png"><br><img src="https://s2.loli.net/2023/06/02/IwaEeVLhDtBPf2l.png"></p><h2 id="4-部署Redis缓存服务（源码）"><a href="#4-部署Redis缓存服务（源码）" class="headerlink" title="4 部署Redis缓存服务（源码）"></a>4 部署Redis缓存服务（源码）</h2><p>在harbor-data上部署redis，为harbor1和harbor2实例提供外部redis缓存服务</p><h3 id="4-1-下载安装包"><a href="#4-1-下载安装包" class="headerlink" title="4.1 下载安装包"></a>4.1 下载安装包</h3><p><code>$ wget https://download.redis.io/releases/redis-6.2.7.tar.gz</code></p><h3 id="4-2-安装依赖包"><a href="#4-2-安装依赖包" class="headerlink" title="4.2 安装依赖包"></a>4.2 安装依赖包</h3><p><code>$ yum  install  -y  gcc  gcc-c++</code></p><h3 id="4-3-源码编译"><a href="#4-3-源码编译" class="headerlink" title="4.3 源码编译"></a>4.3 源码编译</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -p /data/app/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">tar zxvf  redis-6.2.7.tar.gz  -C /data/app</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /data/app/redis-6.2.7/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make   <span class="hljs-comment">#编译</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">make  install   <span class="hljs-comment">#安装, 这里不加参数默认就是/usr/local/bin目录下</span></span><br></code></pre></td></tr></table></figure><h3 id="4-4-修改配置文件"><a href="#4-4-修改配置文件" class="headerlink" title="4.4 修改配置文件"></a>4.4 修改配置文件</h3><p>redis 默认只支持本地使用, 本处需要修改几个参数：</p><ul><li>外部可连接;  </li><li>redis 启动方式;</li><li>redis 远程连接密码；<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">bind 192.168.88.** #75行，允许内网主机连接；<br>daemonize yes       #259行，将no修改为yes，使redis可以使用守护进程方式启动；<br>requirepass 123456   #903行，设置redis连接的auth密码<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-5-启动redis服务"><a href="#4-5-启动redis服务" class="headerlink" title="4.5 启动redis服务"></a>4.5 启动redis服务</h3><p>前面配置了使用守护进程方式启动，所以直接使用systemctl 则可以启动redis服务</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@habor-data redis-6.2.7]# pwd<br>/data/app/redis-6.2.7<br>[root@habor-data redis-6.2.7]# redis-server redis.conf<br></code></pre></td></tr></table></figure><h3 id="4-6-服务验证"><a href="#4-6-服务验证" class="headerlink" title="4.6 服务验证"></a>4.6 服务验证</h3><p>1）查看redis服务版本</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm">$ redis-<span class="hljs-keyword">cli</span> -v  <br>redis-<span class="hljs-keyword">cli</span> <span class="hljs-number">6.2</span><span class="hljs-number">.7</span><br></code></pre></td></tr></table></figure><p>2）查看端口</p><p>redis默认监听6379端口</p><figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">[root@habor-data ~]<span class="hljs-comment"># ps -ef | grep 6379</span><br>root      <span class="hljs-number"> 6504 </span>    <span class="hljs-number"> 1 </span><span class="hljs-number"> 0 </span>04:52 ?        00:00:47 redis-server *:6379<br>root      <span class="hljs-number"> 8882 </span> <span class="hljs-number"> 8864 </span><span class="hljs-number"> 0 </span>15:12 pts/0    00:00:00 grep --color=auto 6379<br></code></pre></td></tr></table></figure><p>3）客户端连接Redis<br><code>harbor1</code>和<code>harbor2</code>作为redis客户端</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">$ which redis-cli      #查看redis-cli工具位置  <br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>redis-cli<br>[root@habor-data ~]# scp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>redis-cli <span class="hljs-number">192.168</span>.<span class="hljs-number">88.138</span>:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br>[root@habor-data ~]# scp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>redis-cli <span class="hljs-number">192.168</span>.<span class="hljs-number">88.139</span>:<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span><br></code></pre></td></tr></table></figure><p>客户端使用redis-cli工具连接redis服务器</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@harbor1 ~]</span># redis-cli -h <span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">88</span>.<span class="hljs-number">131</span> <br><span class="hljs-number">192.168.88.131:6379</span>&gt; auth <span class="hljs-number">123456</span><br>OK<br></code></pre></td></tr></table></figure><blockquote><p>也可以使用-a参数指定密码</p></blockquote><h2 id="5-部署PostgreSQL外部存储服务（源码）"><a href="#5-部署PostgreSQL外部存储服务（源码）" class="headerlink" title="5 部署PostgreSQL外部存储服务（源码）"></a>5 部署PostgreSQL外部存储服务（源码）</h2><h3 id="5-1-新建postgres用户"><a href="#5-1-新建postgres用户" class="headerlink" title="5.1 新建postgres用户"></a>5.1 新建postgres用户</h3><p>默认超级用户（root）不能启动postgresql，需要手动建用户postgres。</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@habor-data ~]</span><span class="hljs-comment"># useradd postgres</span><br><span class="hljs-section">[root@habor-data ~]</span><span class="hljs-comment"># id postgres</span><br><span class="hljs-attr">uid</span>=<span class="hljs-number">1000</span>(postgres) gid=<span class="hljs-number">1000</span>(postgres) groups=<span class="hljs-number">1000</span>(postgres)<br></code></pre></td></tr></table></figure><h3 id="5-2-安装依赖包"><a href="#5-2-安装依赖包" class="headerlink" title="5.2 安装依赖包"></a>5.2 安装依赖包</h3><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis">$ yum -y install readline-devel  <span class="hljs-literal">zlib</span>-devel  gcc <span class="hljs-literal">zlib</span><br></code></pre></td></tr></table></figure><h3 id="5-3-下载解压源码包"><a href="#5-3-下载解压源码包" class="headerlink" title="5.3 下载解压源码包"></a>5.3 下载解压源码包</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ wget https:<span class="hljs-regexp">//</span>ftp.postgresql.org<span class="hljs-regexp">/pub/</span>source<span class="hljs-regexp">/v13.5/</span>postgresql-<span class="hljs-number">13.5</span>.tar.gz --no-check-certificate  <br>$ tar zxvf postgresql-<span class="hljs-number">13.5</span>.tar.gz   -C  <span class="hljs-regexp">/app/</span><br></code></pre></td></tr></table></figure><h3 id="5-4-编译安装"><a href="#5-4-编译安装" class="headerlink" title="5.4 编译安装"></a>5.4 编译安装</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/postgresql-13.5/</span>  <br>$ .<span class="hljs-regexp">/configure  --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>postgresql  <br>$ make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="5-5-创建数据目录"><a href="#5-5-创建数据目录" class="headerlink" title="5.5 创建数据目录"></a>5.5 创建数据目录</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ mkdir -p <span class="hljs-regexp">/data/</span>postgresql/data  <br>$ chown -R postgres:postgres <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/postgresql/</span>  <br>$ chown -R postgres:postgres <span class="hljs-regexp">/data/</span>postgresql<span class="hljs-regexp">/data/</span><br></code></pre></td></tr></table></figure><h3 id="5-6-设置postgres环境变量"><a href="#5-6-设置postgres环境变量" class="headerlink" title="5.6 设置postgres环境变量"></a>5.6 设置postgres环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor-data postgresql-13.5]# su  - postgres  <br>[postgres@harbor-data ~]$ vim  ~/.bash_profile  <br>PGHOME=/usr/local/postgresql   #psql安装目录  <br>export PGHOME  <br>PGDATA=/data/postgresql/data    #数据库目录  <br>export PGDATA  <br>PATH=$PATH:$HOME/bin:$HOME/.local/bin:$PGHOME/bin  <br>export PATH  <br>[postgres@harbor-data ~]$ source ./.bash_profile  <br>[postgres@harbor-data ~]$ which psql  <br>/usr/local/postgresql/bin/psql<br></code></pre></td></tr></table></figure><p>查看版本 [postgres@harbor-data ~]$ psql -V psql (PostgreSQL) 13.5</p><h3 id="5-7-初始化数据库"><a href="#5-7-初始化数据库" class="headerlink" title="5.7 初始化数据库"></a>5.7 初始化数据库</h3><blockquote><p>由于 Red Hat 系列发行版的政策，PostgreSQL 安装不会启用自动启动或自动初始化数据库。要完成数据库安装，您需要根据您的发行版执行以下步骤：</p></blockquote><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[postgres<span class="hljs-variable">@habor</span><span class="hljs-operator">-</span>data postgresql]$ initdb<br>The files belonging <span class="hljs-keyword">to</span> this database <span class="hljs-keyword">system</span> will be owned <span class="hljs-keyword">by</span> <span class="hljs-keyword">user</span> &quot;postgres&quot;.<br>This <span class="hljs-keyword">user</span> must also own the server process.<br><br>The database cluster will be initialized <span class="hljs-keyword">with</span> locale &quot;en_US.UTF-8&quot;.<br>The <span class="hljs-keyword">default</span> database encoding has accordingly been <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> &quot;UTF8&quot;.<br>The <span class="hljs-keyword">default</span> text <span class="hljs-keyword">search</span> configuration will be <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> &quot;english&quot;.<br><br>Data page checksums <span class="hljs-keyword">are</span> disabled.<br><br>fixing permissions <span class="hljs-keyword">on</span> existing directory <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>postgresql<span class="hljs-operator">/</span>data ... ok<br>creating subdirectories ... ok<br>selecting <span class="hljs-keyword">dynamic</span> shared memory implementation ... posix<br>selecting <span class="hljs-keyword">default</span> max_connections ... <span class="hljs-number">100</span><br>selecting <span class="hljs-keyword">default</span> shared_buffers ... <span class="hljs-number">128</span>MB<br>selecting <span class="hljs-keyword">default</span> <span class="hljs-type">time</span> zone ... Asia<span class="hljs-operator">/</span>Shanghai<br>creating configuration files ... ok<br><span class="hljs-keyword">running</span> bootstrap script ... ok<br>performing post<span class="hljs-operator">-</span>bootstrap initialization ... ok<br>syncing data <span class="hljs-keyword">to</span> disk ... ok<br><br>initdb: warning: enabling &quot;trust&quot; authentication <span class="hljs-keyword">for</span> <span class="hljs-keyword">local</span> connections<br>You can change this <span class="hljs-keyword">by</span> editing pg_hba.conf <span class="hljs-keyword">or</span> <span class="hljs-keyword">using</span> the option <span class="hljs-operator">-</span>A, <span class="hljs-keyword">or</span><br><span class="hljs-comment">--auth-local and --auth-host, the next time you run initdb.</span><br><br>Success. You can now <span class="hljs-keyword">start</span> the database server <span class="hljs-keyword">using</span>:<br><br>    pg_ctl <span class="hljs-operator">-</span>D <span class="hljs-operator">/</span>data<span class="hljs-operator">/</span>postgresql<span class="hljs-operator">/</span>data <span class="hljs-operator">-</span>l logfile <span class="hljs-keyword">start</span><br></code></pre></td></tr></table></figure><h3 id="5-8-启动PostgreSQL"><a href="#5-8-启动PostgreSQL" class="headerlink" title="5.8 启动PostgreSQL"></a>5.8 启动PostgreSQL</h3><p>根据刚才初始化成功后的提示执行启动命令！</p><figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">postgres</span>@<span class="hljs-type">habor</span>-<span class="hljs-type">data</span> <span class="hljs-type">postgresql</span>]<span class="hljs-variable">$</span> pg_ctl <span class="hljs-literal">-D</span> /<span class="hljs-keyword">data</span>/postgresql/<span class="hljs-keyword">data</span> <span class="hljs-literal">-l</span> logfile <span class="hljs-built_in">start</span><br>waiting <span class="hljs-keyword">for</span> server to <span class="hljs-built_in">start</span>.... done<br>server started<br></code></pre></td></tr></table></figure><h3 id="5-9-设置（修改）Postgresql密码"><a href="#5-9-设置（修改）Postgresql密码" class="headerlink" title="5.9 设置（修改）Postgresql密码"></a>5.9 设置（修改）Postgresql密码</h3><blockquote><p>默认psql本地登录是不需要密码的，即使我们设置了密码，也不需要密码就能登录。应为配置文件pg_hba.conf中的local设置为trust , 为了安全我们修改为 password，就是使用密码才能登陆，（当我们忘记密码的时间，也可以使用这用方式，先设置为trust之后，修改密码，然后在设置为password。）</p></blockquote><figure class="highlight livescript"><table><tr><td class="code"><pre><code class="hljs livescript">[postgres@habor-data postgresql]$ psql<br>psql (<span class="hljs-number">13.5</span>)<br>Type <span class="hljs-string">&quot;help&quot;</span> <span class="hljs-keyword">for</span> help.<br><br>postgres=<span class="hljs-comment"># \password</span><br>Enter <span class="hljs-keyword">new</span> password: <br>Enter <span class="hljs-literal">it</span> again: <br>postgres=<span class="hljs-comment"># \q</span><br></code></pre></td></tr></table></figure><h3 id="5-10-设置可远程登录PostgreSQL"><a href="#5-10-设置可远程登录PostgreSQL" class="headerlink" title="5.10  设置可远程登录PostgreSQL"></a>5.10  设置可远程登录PostgreSQL</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">[postgres@harbor-data ~]$ vim /data/postgresql/data/postgresql.conf  <br>listen_addresses = <span class="hljs-string">&#x27;*&#x27;</span>    #<span class="hljs-number">60</span>行，监听所有地址  <br>[postgres@harbor-data ~]$ vim + /data/postgresql/data/pg_hba.conf  <br><span class="hljs-keyword">local</span>   <span class="hljs-keyword">all</span>             <span class="hljs-keyword">all</span>                                 <span class="hljs-keyword">password</span>  <br>host    <span class="hljs-keyword">all</span>             <span class="hljs-keyword">all</span>             <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">0</span>            <span class="hljs-keyword">password</span>  <br>host    <span class="hljs-keyword">all</span>             <span class="hljs-keyword">all</span>             ::<span class="hljs-number">1</span>/<span class="hljs-number">128</span>             <span class="hljs-keyword">password</span><br></code></pre></td></tr></table></figure><h3 id="5-11-重启PostgreSQL"><a href="#5-11-重启PostgreSQL" class="headerlink" title="5.11 重启PostgreSQL"></a>5.11 重启PostgreSQL</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[postgres@habor-data postgresql]$ pg_ctl -D /data/postgresql/data -l logfile restart<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> shut down<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>stopped<br>waiting <span class="hljs-keyword">for</span><span class="hljs-built_in"> server </span><span class="hljs-keyword">to</span> start<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span> done<span class="hljs-built_in"></span><br><span class="hljs-built_in">server </span>started<br></code></pre></td></tr></table></figure><h3 id="5-12-创建数据库"><a href="#5-12-创建数据库" class="headerlink" title="5.12 创建数据库"></a>5.12 创建数据库</h3><p>Harbor 2.3.5需要创建的数据库：</p><ul><li><strong>notaryserver</strong></li><li><strong>notarysigner</strong></li><li><strong>registry</strong></li></ul><blockquote><p>目前Harbor仅支持PostgraSQL数据库，需要手动在外部的PostgreSQL上创建registry、notary_signer、notary_servers三个数据库，Harbor启动时会自动在对应数据库下生成表。</p></blockquote><blockquote><p>因为本处主要是演示环境，PostgreSQL数据库的用户就以超级管理员<code>postgres</code>为例，如果是生产环境，建议新建用户，并授予harbor、notary_signer、notary_servers三个数据库相对应的权限。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">[postgres@habor-data postgresql]$ psql<br>psql (<span class="hljs-number">13.5</span>)<br><span class="hljs-keyword">Type</span> &quot;help&quot; <span class="hljs-keyword">for</span> help.<br><br>postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> registry;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span><br>postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> notary_signer;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span><br>postgres=# <span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> notary_servers;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span><br>postgres=# <br>postgres=# \q<br></code></pre></td></tr></table></figure><h2 id="6-负载均衡设置（Nginx-Keepalived）"><a href="#6-负载均衡设置（Nginx-Keepalived）" class="headerlink" title="6 负载均衡设置（Nginx + Keepalived）"></a>6 负载均衡设置（Nginx + Keepalived）</h2><blockquote><p>使用keepalived和Nginx实现harbor的高可用。在<code>harbor1</code>和<code>harbor2</code>节点上安装keepalived服务来提供VIP实现负载均衡。Nginx服务则实现将来到VIP的请求转发到后端服务器组harbor</p></blockquote><h3 id="6-1-安装nginx和keepalived"><a href="#6-1-安装nginx和keepalived" class="headerlink" title="6.1 安装nginx和keepalived"></a>6.1 安装nginx和keepalived</h3><p>在harbor1和harbor2操作</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ wget -O <span class="hljs-regexp">/etc/yum</span>.repos.d<span class="hljs-regexp">/epel.repo http:/</span><span class="hljs-regexp">/mirrors.aliyun.com/</span>repo/epel-<span class="hljs-number">7</span>.repo$ yum install -y nginx keepalived$ yum -y install nginx-all-modules.noarch     <span class="hljs-comment">#安装nginx的stream模块</span><br></code></pre></td></tr></table></figure><p>nginx从1.9.0开始新增了steam模块，用来实现四层协议的转发、代理、负载均衡等。二进制安装的nginx则在.&#x2F;configure时添加–with-stream参数来安装stream模块。</p><h3 id="6-2-修改nginx配置文件"><a href="#6-2-修改nginx配置文件" class="headerlink" title="6.2 修改nginx配置文件"></a>6.2 修改nginx配置文件</h3><p>在harbor1和harbor2的Nginx服务配置文件一样。</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># For more information on configuration, see:</span><br><span class="hljs-comment">#   * Official English Documentation: http://nginx.org/en/docs/</span><br><span class="hljs-comment">#   * Official Russian Documentation: http://nginx.org/ru/docs/</span><br><br><span class="hljs-attribute">user</span> nginx;<br><span class="hljs-attribute">worker_processes</span> auto;<br><span class="hljs-attribute">error_log</span> /var/log/nginx/<span class="hljs-literal">error</span>.log;<br><span class="hljs-attribute">pid</span> /run/nginx.pid;<br><br><span class="hljs-comment"># Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.</span><br><span class="hljs-attribute">include</span> /usr/share/nginx/modules/<span class="hljs-regexp">*.conf</span>;<br><br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span> <span class="hljs-number">1024</span>;<br>&#125;<br><br><span class="hljs-section">stream</span> &#123;<br>  <span class="hljs-attribute">log_format</span> main <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> <span class="hljs-variable">$upstream_addr</span> - [<span class="hljs-variable">$time_local</span>] <span class="hljs-variable">$status</span> <span class="hljs-variable">$upstream_bytes_sent</span>&#x27;</span>;<br>   <span class="hljs-section">upstream</span> harbor&#123;<br>       <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.88.138:8021</span>;   <span class="hljs-comment"># harbor1</span><br>       <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.88.139:8021</span>;   <span class="hljs-comment"># harbor2</span><br>   &#125;<br>   <span class="hljs-section">server</span> &#123;<br>       <span class="hljs-attribute">listen</span>  <span class="hljs-number">8121</span>;  <span class="hljs-comment">#由于nginx与harbor节点复用，这个监听端口不能是8021，否则会冲突</span><br>       <span class="hljs-attribute">proxy_pass</span> harbor;<br>   &#125;<br>&#125;<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">log_format</span>  main  <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] &quot;<span class="hljs-variable">$request</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;<span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> &quot;<span class="hljs-variable">$http_referer</span>&quot; &#x27;</span><br>                      <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;<br><br>    <span class="hljs-attribute">access_log</span>  /var/log/nginx/access.log  main;<br><br>    <span class="hljs-attribute">sendfile</span>            <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nopush</span>          <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">tcp_nodelay</span>         <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>   <span class="hljs-number">65</span>;<br>    <span class="hljs-attribute">types_hash_max_size</span> <span class="hljs-number">4096</span>;<br><br>    <span class="hljs-attribute">include</span>             /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>        application/octet-stream;<br><br>    <span class="hljs-comment"># Load modular configuration files from the /etc/nginx/conf.d directory.</span><br>    <span class="hljs-comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span><br>    <span class="hljs-comment"># for more information.</span><br>    <span class="hljs-attribute">include</span> /etc/nginx/conf.d/<span class="hljs-regexp">*.conf</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>检测nginx配置文件语法</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">$ nginx -t<br>nginx: the configuration <span class="hljs-keyword">file</span> <span class="hljs-regexp">/etc/</span>nginx<span class="hljs-regexp">/nginx.conf syntax is oknginx: configuration file /</span>etc<span class="hljs-regexp">/nginx/</span>nginx.conf test is successful<br></code></pre></td></tr></table></figure><h3 id="6-3-修改keepalived-配置"><a href="#6-3-修改keepalived-配置" class="headerlink" title="6.3 修改keepalived 配置"></a>6.3 修改keepalived 配置</h3><p>本处以harbor1为keepalived服务的主节点，harbor2为keepalived的备节点，主备节点的keepalived的文件配置不一样</p><h4 id="1-主节点（harbor1）"><a href="#1-主节点（harbor1）" class="headerlink" title="1)主节点（harbor1）"></a>1)主节点（harbor1）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor1 ~]# cat /etc/keepalived/keepalived.conf<br>! Configuration File for keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>    454536188@qq.com<br>   &#125;<br>   router_id master1<br>&#125;<br><br>vrrp_instance lidabai &#123;<br>    state MASTER<br>    interface ens33<br>    mcast_src_ip 192.168.88.138<br>    virtual_router_id 107<br>    priority 100<br>    advert_int 1<br>    nopreempt<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.88.111/24  #虚拟VIP地址<br>    &#125;<br>    track_script &#123;<br>        chk_nginx<br>    &#125;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">#### 健康检查</span></span><br>vrrp_script chk_nginx &#123;      <br>    script &quot;/etc/keepalived/check_nginx.sh&quot;<br>    interval 2<br>    weight -20<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-备节点（harbo2）"><a href="#2-备节点（harbo2）" class="headerlink" title="2)备节点（harbo2）"></a>2)备节点（harbo2）</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor2 ~]# cat /etc/keepalived/keepalived.conf<br>! Configuration File for keepalived<br><br>global_defs &#123;<br>   notification_email &#123;<br>     454536188@qq.com<br>   &#125;<br>   router_id master2<br>&#125;<br><br>vrrp_instance lidabai &#123;<br>    state BACKUP<br>    interface ens33<br>    mcast_src_ip 192.168.88.139<br>    virtual_router_id 107<br>    priority 80    #权重<br>    advert_int 1<br>    nopreempt<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.88.111/24<br>    &#125;<br>    track_script &#123;<br>    chk_nginx<br>    &#125;<br>&#125;<br>vrrp_script chk_nginx &#123;<br>  script &quot;/etc/keepalived/check_nginx.sh&quot;<br>  interval 2<br>  weight -20<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-4-编写健康检查脚本"><a href="#6-4-编写健康检查脚本" class="headerlink" title="6.4 编写健康检查脚本"></a>6.4 编写健康检查脚本</h3><p>在harbor1,harbor2添加</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@harbor2 ~]# cat /etc/keepalived/check_nginx.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">1、判断Nginx是否存活</span><br>counter=`ps -C nginx --no-header | wc -l`<br>if [ $counter -eq 0 ]; then<br>    #2、如果不存活则尝试启动Nginx<br>    service nginx start<br>    sleep 2<br>    #3、等待2秒后再次获取一次Nginx状态<br>    counter=`ps -C nginx --no-header | wc -l`<br>    #4、再次进行判断，如Nginx还不存活则停止Keepalived，让地址进行漂移<br>    if [ $counter -eq 0 ]; then<br>        service  keepalived stop<br>    fi<br>fi<br></code></pre></td></tr></table></figure><h3 id="6-5-启动服务"><a href="#6-5-启动服务" class="headerlink" title="6.5 启动服务"></a>6.5 启动服务</h3><p>先启动master1和master2节点上的nginx服务，再启动keepalived服务</p><h4 id="1）启动nginx服务"><a href="#1）启动nginx服务" class="headerlink" title="1）启动nginx服务"></a>1）启动nginx服务</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@harbor1 ~]</span># systemctl enable <span class="hljs-attr">--now</span> nginx   #启动nginx服务并设置开机自启<span class="hljs-selector-attr">[root@harbor2 ~]</span># systemctl enable <span class="hljs-attr">--now</span> nginx<span class="hljs-selector-attr">[root@harbor1 ~]</span># systemctl status nginx<span class="hljs-selector-class">.service</span> <span class="hljs-selector-attr">[root@harbor2 ~]</span># systemctl status nginx<span class="hljs-selector-class">.service</span><br></code></pre></td></tr></table></figure><blockquote><p>如果报错<code> [emerg] bind() to 0.0.0.0:XXXX failed (13: Permission denied)</code> 并且是root用户的话，可以检查是否开启了selinux</p></blockquote><h4 id="2）启动keepalived服务"><a href="#2）启动keepalived服务" class="headerlink" title="2）启动keepalived服务"></a>2）启动keepalived服务</h4><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@harbor1 ~]</span># systemctl enable <span class="hljs-attr">--now</span> keepalived<span class="hljs-selector-attr">[root@harbor2 ~]</span># systemctl enable <span class="hljs-attr">--now</span> keepalived<span class="hljs-selector-attr">[root@harbor1 ~]</span># systemctl status keepalived<span class="hljs-selector-class">.service</span><span class="hljs-selector-attr">[root@harbor2 ~]</span># systemctl status keepalived<span class="hljs-selector-class">.service</span><br></code></pre></td></tr></table></figure><h3 id="6-6-查看VIP"><a href="#6-6-查看VIP" class="headerlink" title="6.6 查看VIP"></a>6.6 查看VIP</h3><p>在harbor1节点查看VIP是否成功绑定。</p><p><img src="https://s2.loli.net/2023/06/02/Wk4qTaNlMyIYFCp.png"></p><blockquote><p>通过ifconfig是无法查看到VIP的，通过<code>hostname -I</code>命令也可以查看到VIP。</p></blockquote><h2 id="7-部署harbor实例"><a href="#7-部署harbor实例" class="headerlink" title="7 部署harbor实例"></a>7 部署harbor实例</h2><h3 id="7-1-在harbor1-主机上部署harbor服务"><a href="#7-1-在harbor1-主机上部署harbor服务" class="headerlink" title="7.1 在harbor1 主机上部署harbor服务"></a>7.1 在harbor1 主机上部署harbor服务</h3><h4 id="1-）下载解压离线安装包"><a href="#1-）下载解压离线安装包" class="headerlink" title="1 ）下载解压离线安装包"></a>1 ）下载解压离线安装包</h4><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ mkdir /app   <span class="hljs-comment">#创建安装目录  </span><br>$ wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/goharbor/</span>harbor<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/v2.5.0/</span>harbor-offline-installer-v2.<span class="hljs-number">3.5</span>.tgz  <br>$ tar zxvf harbor-offline-installer-v2.<span class="hljs-number">5.0</span>.tgz  -C  <span class="hljs-regexp">/app/</span><br></code></pre></td></tr></table></figure><h4 id="2）修改配置文件"><a href="#2）修改配置文件" class="headerlink" title="2）修改配置文件"></a>2）修改配置文件</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">hostname:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.138</span><br><span class="hljs-attr">http:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8021</span><br><span class="hljs-comment">#取消https安全加密访问方式：  </span><br><span class="hljs-comment">#https:  </span><br><span class="hljs-comment">#  port: 443  </span><br><span class="hljs-comment">#  certificate: /your/certificate/path  </span><br><span class="hljs-comment">#  private_key: /your/private/key/path</span><br><span class="hljs-comment">## 启用外部代理，启用后hostname将不再使用</span><br><span class="hljs-attr">external_url:</span> <span class="hljs-string">https://192.168.88.111:8121</span><br><span class="hljs-attr">harbor_admin_password:</span> <span class="hljs-string">Harbor12345</span><br><span class="hljs-attr">database:</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">root123</span><br>  <span class="hljs-attr">max_idle_conns:</span> <span class="hljs-number">100</span><br>  <span class="hljs-attr">max_open_conns:</span> <span class="hljs-number">900</span><br><span class="hljs-comment">## 配置共享存储，即挂载的NFS目录</span><br><span class="hljs-attr">data_volume:</span> <span class="hljs-string">/data/harbor_data</span><br><span class="hljs-attr">trivy:</span><br>  <span class="hljs-attr">ignore_unfixed:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">skip_update:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">offline_scan:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">insecure:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">jobservice:</span><br>  <span class="hljs-attr">max_job_workers:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">notification:</span><br>  <span class="hljs-attr">webhook_job_max_retry:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">chart:</span><br>  <span class="hljs-attr">absolute_url:</span> <span class="hljs-string">disabled</span><br><span class="hljs-attr">log:</span><br>  <span class="hljs-attr">level:</span> <span class="hljs-string">info</span><br>  <span class="hljs-attr">local:</span><br>    <span class="hljs-attr">rotate_count:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">rotate_size:</span> <span class="hljs-string">200M</span><br>    <span class="hljs-attr">location:</span> <span class="hljs-string">/var/log/harbor</span><br><span class="hljs-attr">_version:</span> <span class="hljs-number">2.5</span><span class="hljs-number">.0</span><br><span class="hljs-comment">## 配置外部数据库</span><br><span class="hljs-attr">external_database:</span><br>  <span class="hljs-attr">harbor:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.131</span>  <span class="hljs-comment"># 数据库主机地址</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5432</span>  <span class="hljs-comment"># 数据库端口</span><br>    <span class="hljs-attr">db_name:</span> <span class="hljs-string">registry</span>  <span class="hljs-comment"># 数据库名称</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">postgres</span>  <span class="hljs-comment"># 连接该数据库的用户名</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <span class="hljs-comment"># 连接数据库的密码</span><br>    <span class="hljs-attr">ssl_mode:</span> <span class="hljs-string">disable</span><br>    <span class="hljs-attr">max_idle_conns:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">max_open_conns:</span> <span class="hljs-number">0</span><br>  <span class="hljs-attr">notary_signer:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.131</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5432</span><br>    <span class="hljs-attr">db_name:</span> <span class="hljs-string">notary_signer</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">ssl_mode:</span> <span class="hljs-string">disable</span><br>  <span class="hljs-attr">notary_server:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.131</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5432</span><br>    <span class="hljs-attr">db_name:</span> <span class="hljs-string">notary_server</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">postgres</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">ssl_mode:</span> <span class="hljs-string">disable</span><br><span class="hljs-comment"># 配置外部Redis 实例</span><br><span class="hljs-attr">external_redis:</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">redis:6379</span>  <span class="hljs-comment"># redis服务IP地址和端口号。如果redis是哨兵模式，这里应该是host_sentinel1:port_sentinel1,host_sentinel2:port_sentinel2</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <span class="hljs-comment"># 连接外部redis服务的密码</span><br>  <span class="hljs-attr">registry_db_index:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">jobservice_db_index:</span> <span class="hljs-number">2</span>  <span class="hljs-comment"># job服务的数据库索引</span><br>  <span class="hljs-attr">chartmuseum_db_index:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># chartmeseum插件的redis索引</span><br>  <span class="hljs-attr">trivy_db_index:</span> <span class="hljs-number">5</span>  <span class="hljs-comment"># trivy 扫描器的数据索引</span><br>  <span class="hljs-attr">idle_timeout_seconds:</span> <span class="hljs-number">30</span>  <span class="hljs-comment"># 超时时间</span><br><span class="hljs-attr">proxy:</span><br>  <span class="hljs-attr">http_proxy:</span><br>  <span class="hljs-attr">https_proxy:</span><br>  <span class="hljs-attr">no_proxy:</span><br>  <span class="hljs-attr">components:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">core</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">jobservice</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">trivy</span><br><span class="hljs-comment">## 启用metrics数据采集插件：</span><br><span class="hljs-attr">metric:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">9090</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/metrics</span><br><span class="hljs-attr">upload_purging:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-string">168h</span><br>  <span class="hljs-attr">interval:</span> <span class="hljs-string">24h</span><br>  <span class="hljs-attr">dryrun:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h4 id="3-将配置文件注入到组件中"><a href="#3-将配置文件注入到组件中" class="headerlink" title="3) 将配置文件注入到组件中"></a>3) 将配置文件注入到组件中</h4><p><code>./prepare</code>将harbor.yml配置文件的内容注入到各组件的配置文件中。</p><p><img src="https://s2.loli.net/2023/06/02/ObWBT8hz7G5KQ1R.png"></p><h4 id="4-安装harbor"><a href="#4-安装harbor" class="headerlink" title="4)  安装harbor"></a>4)  安装harbor</h4><p>安装期间会自动导入镜像，执行完成会自动启动Harbor服务。</p><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">[root@harbor1 harbor]# ./install.sh --<span class="hljs-keyword">with</span>-trivy --<span class="hljs-keyword">with</span>-chartmuseum<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/02/aQBUvLKut1xGXbF.png"><br>-Harbor has been installed and started successfully.- 表示安装成功！</p><h4 id="5）查看服务状态"><a href="#5）查看服务状态" class="headerlink" title="5）查看服务状态"></a>5）查看服务状态</h4><p><code>docker-compose ps</code>查看服务状态</p><p><img src="https://s2.loli.net/2023/06/02/Ty3kd1J9wbaPSmG.png"></p><p>使用实例主机IP+端口在浏览器访问harbor UI</p><p>harbor1:<br><img src="https://s2.loli.net/2023/06/02/wye9cEobdNJ8tfz.png"></p><p>harbor2:</p><p><img src="https://s2.loli.net/2023/06/02/WzE3kgGRt1Qneqr.png"></p><p>查看harbor日志：<br><img src="https://s2.loli.net/2023/06/02/7GyXbNWIHqRDtwK.png"></p><h1 id="8-服务验证"><a href="#8-服务验证" class="headerlink" title="8 服务验证"></a>8 服务验证</h1><h2 id="8-1-浏览器访问VIP和端口"><a href="#8-1-浏览器访问VIP和端口" class="headerlink" title="8.1 浏览器访问VIP和端口"></a>8.1 浏览器访问VIP和端口</h2><p><a href="http://192.168.88.111/">http://192.168.88.111</a></p><p><img src="https://s2.loli.net/2023/06/02/FKVPfZWb72zv4ON.png"><br><img src="https://s2.loli.net/2023/06/02/zrGFQMiDvJcLU5X.png"></p><h2 id="8-2-命令行登录Harbor"><a href="#8-2-命令行登录Harbor" class="headerlink" title="8.2 命令行登录Harbor"></a>8.2 命令行登录Harbor</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">$ docker login http:<span class="hljs-regexp">//</span><span class="hljs-number">192.168</span>.<span class="hljs-number">88.111</span>:<span class="hljs-number">8121</span> -u admin -p Harbor12345<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/02/Srnlp1vymAKQsC2.png"></p><p>出现报错:<br>Error response from daemon: Get <a href="https://192.168.2.111:8121/v2/">https://192.168.2.111:8121/v2/</a>: http: server gave HTTP response to HTTPS client 在docker配置文件中添加参数：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">cat /etc/docker/daemon.json<br>&#123;<br>  <span class="hljs-string">&quot;exec-opts&quot;</span>: [<br>    <span class="hljs-string">&quot;native.cgroupdriver=systemd&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;insecure-registries&quot;</span>: [<span class="hljs-string">&quot;192.168.88.111:8121&quot;</span>, <span class="hljs-string">&quot;192.168.88.138:8021&quot;</span>, <span class="hljs-string">&quot;192.168.88.139:8021&quot;</span>],<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;log-driver&quot;</span>: <span class="hljs-string">&quot;json-file&quot;</span>,<br>  <span class="hljs-string">&quot;log-opts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;max-size&quot;</span>: <span class="hljs-string">&quot;100m&quot;</span><br>  &#125;,<br>  <span class="hljs-string">&quot;storage-driver&quot;</span>: <span class="hljs-string">&quot;overlay2&quot;</span><br>&#125;<br><span class="hljs-meta"># 重启docker</span><br>[root<span class="hljs-symbol">@habor</span>-data ~]<span class="hljs-meta"># systemctl daemon-reload</span><br>[root<span class="hljs-symbol">@habor</span>-data ~]<span class="hljs-meta"># systemctl restart docker</span><br><br></code></pre></td></tr></table></figure><h2 id="8-3-向Harbor推送镜像"><a href="#8-3-向Harbor推送镜像" class="headerlink" title="8.3 向Harbor推送镜像"></a>8.3 向Harbor推送镜像</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">[root@habor-data ~]# docker <span class="hljs-keyword">push</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">88.111</span>:<span class="hljs-number">8121</span><span class="hljs-regexp">/library/</span>alpine:<span class="hljs-number">3.16</span><br>The <span class="hljs-keyword">push</span> refers to repository [<span class="hljs-number">192.168</span>.<span class="hljs-number">88.111</span>:<span class="hljs-number">8121</span><span class="hljs-regexp">/library/</span>alpine]<br><span class="hljs-number">5</span>bc340f6d4f5: Pushed <br><span class="hljs-number">3.16</span>: digest: sha256:e28792ec7904bff56f22df296d78cc1188caf347bd824570d0ecf235e4f6e4cd <span class="hljs-keyword">size</span>: <span class="hljs-number">528</span><br><br>[root@habor-data ~]# docker <span class="hljs-keyword">push</span> <span class="hljs-number">192.168</span>.<span class="hljs-number">88.111</span>:<span class="hljs-number">8121</span><span class="hljs-regexp">/library/</span>alpine:<span class="hljs-number">3.16</span><br>The <span class="hljs-keyword">push</span> refers to repository [<span class="hljs-number">192.168</span>.<span class="hljs-number">88.111</span>:<span class="hljs-number">8121</span><span class="hljs-regexp">/library/</span>alpine]<br><span class="hljs-number">5</span>bc340f6d4f5: Pushed <br><span class="hljs-number">3.16</span>: digest: sha256:e28792ec7904bff56f22df296d78cc1188caf347bd824570d0ecf235e4f6e4cd <span class="hljs-keyword">size</span>: <span class="hljs-number">528</span><br></code></pre></td></tr></table></figure><p>然后可以在Harbor UI界面查看到镜像已经推送成功！</p><p><img src="https://s2.loli.net/2023/06/02/I7PVFRu68Gxe39N.png"></p>]]></content>
    
    
    <summary type="html">高可用方式安装harbor镜像仓库</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>k8s业务容器化实战案例</title>
    <link href="http://www.qintianjun.top/2023/02/24/k8s%E4%B8%9A%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/"/>
    <id>http://www.qintianjun.top/2023/02/24/k8s%E4%B8%9A%E5%8A%A1%E5%AE%B9%E5%99%A8%E5%8C%96%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/</id>
    <published>2023-02-24T11:14:39.000Z</published>
    <updated>2023-02-24T11:15:48.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="k8s-业务容器化实战案例"><a href="#k8s-业务容器化实战案例" class="headerlink" title="k8s 业务容器化实战案例"></a>k8s 业务容器化实战案例</h1><h2 id="1-业务容器化优势"><a href="#1-业务容器化优势" class="headerlink" title="1 业务容器化优势:"></a>1 业务容器化优势:</h2><ol><li>提高资源利用率、节约部署IT成本。</li><li>提高部署效率，基于kubernetes实现微服务的快速部署与交付、 容器的批量调度与秒级启动。</li><li>实现横向扩容、灰度部署、回滚、链路追踪、服务治理等。</li><li>可根据业务负载进行自动弹性伸缩。</li><li>容器将环境和代码打包在镜像内，保证了测试与生产运行环境<br>的一致性。</li><li>紧跟云原生社区技术发展的步伐，不给公司遗留技术债，为后<br>期技术升级夯实了基础。</li><li>为个人储备前沿技术，提高个人level。</li></ol><p><img src="https://s2.loli.net/2023/02/24/y92vHhR3L8mX5Zg.png" alt="image-20220731155255757"></p><h2 id="2-业务规划及镜像分层构建"><a href="#2-业务规划及镜像分层构建" class="headerlink" title="2 业务规划及镜像分层构建"></a>2 业务规划及镜像分层构建</h2><p><img src="https://s2.loli.net/2023/02/24/9fUlTZu3rjmegEB.png" alt="image-20220731155321533"></p><p><img src="/" alt="image-20220731155946942"></p><ul><li>通过基础镜像构建，如：ubuntu: 22.04</li><li>在基础镜像上安装运行必要的环境，如JDK11</li><li>以安装JDK11的镜像为基础，构建tomcat, dubbo, spring 镜像</li><li>通过tomcat&#x2F;dubbo&#x2F;spring镜像打包业务代码，构建具体业务镜像</li></ul><h3 id="2-1-构建基础镜像"><a href="#2-1-构建基础镜像" class="headerlink" title="2.1 构建基础镜像"></a>2.1 构建基础镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager centos]# cat build-command.sh  # 构建脚本<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>docker build -t  harbor.qintianjun.local/k8s/centos-base:7.9.2009 .<br><br>docker push harbor.qintianjun.local/k8s/centos-base:7.9.2009  # 上传到本地harbor<br>[root@manager centos]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">自定义Centos 基础镜像</span><br>FROM harbor.qintianjun.local/k8s/centos:7.9.2009  # 使用本地harbor的centos作为基础镜像<br>MAINTAINER qintianjun  &quot;454536188@qq.com&quot;<br><br>ADD filebeat-7.12.1-x86_64.rpm /tmp  # 拷贝统计目录下filebeat<br>RUN yum install -y /tmp/filebeat-7.12.1-x86_64.rpm vim wget tree  lrzsz gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop &amp;&amp;  rm -rf /etc/localtime /tmp/filebeat-7.12.1-x86_64.rpm &amp;&amp; ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  # 安装基础组建，filebeat，设置时区<br></code></pre></td></tr></table></figure><p>执行<code>sh build-command.sh </code>, 看到如下输出</p><p><img src="https://s2.loli.net/2023/02/24/CbhTOLnMr7mKDNR.png" alt="image-20220731163953352"></p><p><img src="https://s2.loli.net/2023/02/24/4kPRYBQUriDdvTp.png" alt="image-20220731163927478"></p><p>说明镜像构建并上传完成，查看harbor可以看到已上传镜像：</p><p><img src="https://s2.loli.net/2023/02/24/vLrYADyNhXuBt87.png" alt="image-20220731164107851"></p><h3 id="2-2-通过基础镜像构建jdk镜像"><a href="#2-2-通过基础镜像构建jdk镜像" class="headerlink" title="2.2 通过基础镜像构建jdk镜像"></a>2.2 通过基础镜像构建jdk镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager jdk-1.8.212]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>docker build -t harbor.qintianjun.local/k8s/jdk-base:v8.212  .<br>sleep 1<br>docker push  harbor.qintianjun.local/k8s/jdk-base:v8.212<br>[root@manager jdk-1.8.212]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">JDK Base Image</span><br>FROM harbor.qintianjun.local/k8s/centos-base:7.9.2009<br><br>MAINTAINER qintianjun &quot;454536188@qq.com&quot;<br><br><br>ADD jdk-8u212-linux-x64.tar.gz /usr/local/src/<br>RUN ln -sv /usr/local/src/jdk1.8.0_212 /usr/local/jdk<br>ADD profile /etc/profile<br><br><br>ENV JAVA_HOME /usr/local/jdk<br>ENV JRE_HOME $JAVA_HOME/jre<br>ENV CLASSPATH $JAVA_HOME/lib/:$JRE_HOME/lib/<br>ENV PATH $PATH:$JAVA_HOME/bin<br></code></pre></td></tr></table></figure><p>构建镜像：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager jdk-1.8.212]# sh build-command.sh<br>Sending build context to Docker daemon    195MB<br>Step 1/9 : FROM harbor.qintianjun.local/k8s/centos-base:7.9.2009<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">72b13222d098</span><br>Step 2/9 : MAINTAINER qintianjun &quot;454536188@qq.com&quot;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> e6d098a60b47</span><br>Removing intermediate container e6d098a60b47<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">a2ae6dace6d2</span><br>Step 3/9 : ADD jdk-8u212-linux-x64.tar.gz /usr/local/src/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">82bda0383e23</span><br>Step 4/9 : RUN ln -sv /usr/local/src/jdk1.8.0_212 /usr/local/jdk<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 026500d482c9</span><br>&#x27;/usr/local/jdk&#x27; -&gt; &#x27;/usr/local/src/jdk1.8.0_212&#x27;<br>Removing intermediate container 026500d482c9<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">ff0d3d834344</span><br>Step 5/9 : ADD profile /etc/profile<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">673880b7c07f</span><br>Step 6/9 : ENV JAVA_HOME /usr/local/jdk<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> dc89db687bcb</span><br>Removing intermediate container dc89db687bcb<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">44cbb3fb9715</span><br>Step 7/9 : ENV JRE_HOME $JAVA_HOME/jre<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> f14546ac8229</span><br>Removing intermediate container f14546ac8229<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">72d797a0fcaf</span><br>Step 8/9 : ENV CLASSPATH $JAVA_HOME/lib/:$JRE_HOME/lib/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 05c9258eb922</span><br>Removing intermediate container 05c9258eb922<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">2a2f8f6bb43a</span><br>Step 9/9 : ENV PATH $PATH:$JAVA_HOME/bin<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> c5fe236e089b</span><br>Removing intermediate container c5fe236e089b<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">5f53217d7526</span><br>Successfully built 5f53217d7526<br>Successfully tagged harbor.qintianjun.local/k8s/jdk-base:v8.212<br>The push refers to repository [harbor.qintianjun.local/k8s/jdk-base]<br>c5b980123fc0: Pushed<br>707c797f8ec8: Pushed<br>80c1c8f91f96: Pushed<br>12e7ca64edac: Mounted from k8s/centos-base  # Mounted 表示从centos-base挂载，避免重复上传造成浪费<br>1e3f5eb5dee1: Mounted from k8s/centos-base<br>174f56854903: Mounted from k8s/centos-base<br>v8.212: digest: sha256:2ca63a7b441f06388764be5af76ff9dd3b25bbfe59f4b7d96434b49a5fe8cace size: 1582<br></code></pre></td></tr></table></figure><p>harbor中查看：</p><p><img src="https://s2.loli.net/2023/02/24/an65DGASjWNLQTB.png" alt="image-20220731164928772"></p><h3 id="2-3-通过基础镜像构建nginx镜像"><a href="#2-3-通过基础镜像构建nginx镜像" class="headerlink" title="2.3 通过基础镜像构建nginx镜像"></a>2.3 通过基础镜像构建nginx镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager nginx-base]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>docker build -t harbor.qintianjun.local/k8s/nginx-base:v1.20.2  .<br>sleep 1<br>docker push  harbor.qintianjun.local/k8s/nginx-base:v1.20.2<br>[root@manager nginx-base]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Nginx Base Image</span><br>FROM harbor.qintianjun.local/k8s/centos-base:7.9.2009<br><br>MAINTAINER  qintianjun &quot;454536188@qq.com&quot;<br><br>RUN yum install -y vim wget tree  lrzsz gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop<br>ADD nginx-1.20.2.tar.gz /usr/local/src/<br>RUN cd /usr/local/src/nginx-1.20.2 &amp;&amp; ./configure  &amp;&amp; make &amp;&amp; make install &amp;&amp; ln -sv  /usr/local/nginx/sbin/nginx /usr/sbin/nginx  &amp;&amp;rm -rf /usr/local/src/nginx-1.20.2.tar.gz<br></code></pre></td></tr></table></figure><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager nginx-base]# sh build-command.sh<br>Sending build context to Docker daemon  1.066MB<br>Step 1/5 : FROM harbor.qintianjun.local/k8s/centos-base:7.9.2009<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">72b13222d098</span><br>Step 2/5 : MAINTAINER  qintianjun &quot;454536188@qq.com&quot;<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Using cache</span><br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">a2ae6dace6d2</span><br>Step 3/5 : RUN yum install -y vim wget tree  lrzsz gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> f655d2b5c708</span><br>Loaded plugins: fastestmirror, ovl<br>Loading mirror speeds from cached hostfile<br> * base: my.mirrors.thegigabit.com<br> * extras: my.mirrors.thegigabit.com<br> * updates: my.mirrors.thegigabit.com<br>Package 2:vim-enhanced-7.4.629-8.el7_9.x86_64 already installed and latest version<br>Package wget-1.14-18.el7_6.1.x86_64 already installed and latest version<br>Package tree-1.6.0-10.el7.x86_64 already installed and latest version<br>Package lrzsz-0.12.20-36.el7.x86_64 already installed and latest version<br>Package gcc-4.8.5-44.el7.x86_64 already installed and latest version<br>Package gcc-c++-4.8.5-44.el7.x86_64 already installed and latest version<br>Package automake-1.13.4-3.el7.noarch already installed and latest version<br>Package pcre-8.32-17.el7.x86_64 already installed and latest version<br>Package pcre-devel-8.32-17.el7.x86_64 already installed and latest version<br>Package zlib-1.2.7-20.el7_9.x86_64 already installed and latest version<br>Package zlib-devel-1.2.7-20.el7_9.x86_64 already installed and latest version<br>Package 1:openssl-1.0.2k-25.el7_9.x86_64 already installed and latest version<br>Package 1:openssl-devel-1.0.2k-25.el7_9.x86_64 already installed and latest version<br>Package iproute-4.11.0-30.el7.x86_64 already installed and latest version<br>Package net-tools-2.0-0.25.20131004git.el7.x86_64 already installed and latest version<br>Package iotop-0.6-4.el7.noarch already installed and latest version<br>Nothing to do<br>Removing intermediate container f655d2b5c708<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">ffc80b4becf4</span><br>Step 4/5 : ADD nginx-1.20.2.tar.gz /usr/local/src/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">c19e1687d011</span><br>Step 5/5 : RUN cd /usr/local/src/nginx-1.20.2 &amp;&amp; ./configure  &amp;&amp; make &amp;&amp; make install &amp;&amp; ln -sv  /usr/local/nginx/sbin/nginx /usr/sbin/nginx  &amp;&amp;rm -rf /usr/local/src/nginx-1.20.2.tar.gz<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> c9627a4fd</span><br>......<br><span class="hljs-meta prompt_">---&gt; </span><span class="language-bash">5b1c620f0538</span><br>Successfully built 5b1c620f0538<br>Successfully tagged harbor.qintianjun.local/k8s/nginx-base:v1.20.2<br>The push refers to repository [harbor.qintianjun.local/k8s/nginx-base]<br>23b057fed7cd: Pushed<br>6f43c91a70b0: Pushed<br>49f4662da975: Pushed<br>12e7ca64edac: Mounted from k8s/jdk-base<br>1e3f5eb5dee1: Mounted from k8s/jdk-base<br>174f56854903: Mounted from k8s/jdk-base<br>v1.20.2: digest: sha256:994c8c49e41ad3cf2bcdf681d58dde4391a9128062372ec1d325c6a43fe4ca55 size: 1588<br></code></pre></td></tr></table></figure><p>在harbor中查看</p><p><img src="/k8s%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B.assets/image-20220731171546181.png" alt="image-20220731171546181"></p><h3 id="2-4-通过JDK镜像构建tomcat镜像"><a href="#2-4-通过JDK镜像构建tomcat镜像" class="headerlink" title="2.4 通过JDK镜像构建tomcat镜像"></a>2.4 通过JDK镜像构建tomcat镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager tomcat-base-8.5.43]# ls<br>apache-tomcat-8.5.43.tar.gz  build-command.sh  Dockerfile<br>[root@manager tomcat-base-8.5.43]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>docker build -t harbor.qintianjun.local/k8s/tomcat-base:v8.5.43  .<br>sleep 3<br>docker push  harbor.qintianjun.local/k8s/tomcat-base:v8.5.43<br>[root@manager tomcat-base-8.5.43]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Tomcat 8.5.43基础镜像</span><br>FROM harbor.qintianjun.local/k8s/jdk-base:v8.212<br><br>MAINTAINER qintianjun &quot;454536188@qq.com&quot;<br><br>RUN mkdir /apps /data/tomcat/webapps /data/tomcat/logs -pv<br>ADD apache-tomcat-8.5.43.tar.gz  /apps<br>RUN useradd tomcat -u 2050 &amp;&amp; ln -sv /apps/apache-tomcat-8.5.43 /apps/tomcat &amp;&amp; chown -R tomcat.tomcat /apps /data<br></code></pre></td></tr></table></figure><h3 id="2-5-通过tomcat镜像构建app镜像"><a href="#2-5-通过tomcat镜像构建app镜像" class="headerlink" title="2.5 通过tomcat镜像构建app镜像"></a>2.5 通过tomcat镜像构建app镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager tomcat-app1]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">tomcat web1</span><br>FROM harbor.qintianjun.local/k8s/tomcat-base:v8.5.43<br><span class="hljs-meta prompt_"># </span><span class="language-bash">自行准备对应配置文件</span><br>ADD catalina.sh /apps/tomcat/bin/catalina.sh<br>ADD server.xml /apps/tomcat/conf/server.xml<br>ADD app1.tar.gz /data/tomcat/webapps/myapp/<br>ADD run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh<br>RUN chown  -R tomcat.tomcat /data/ /apps/<br><br>EXPOSE 8080 8443<br><br>CMD [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]<br>[root@manager tomcat-app1]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>TAG=$1<br>docker build -t  harbor.qintianjun.local/k8s/tomcat-app1:$&#123;TAG&#125; .<br>sleep 3<br>docker push  harbor.qintianjun.local/k8s/tomcat-app1:$&#123;TAG&#125;<br><br></code></pre></td></tr></table></figure><p>构建</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager tomcat-app1]# ./build-command.sh tomcat-app1-20220731<br>Sending build context to Docker daemon  24.13MB<br>Step 1/8 : FROM harbor.qintianjun.local/k8s/tomcat-base:v8.5.43<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">b92d19e3edb3</span><br>Step 2/8 : ADD catalina.sh /apps/tomcat/bin/catalina.sh<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">67e7db5c915f</span><br>Step 3/8 : ADD server.xml /apps/tomcat/conf/server.xml<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">37e3d4ea6059</span><br>Step 4/8 : ADD app1.tar.gz /data/tomcat/webapps/myapp/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">94226df8dad7</span><br>Step 5/8 : ADD run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">583b3b1830c3</span><br>Step 6/8 : RUN chown  -R tomcat.tomcat /data/ /apps/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 6c707556ca45</span><br>Removing intermediate container 6c707556ca45<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">cf73cc40f72d</span><br>Step 7/8 : EXPOSE 8080 8443<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> d69b80d89ec1</span><br>Removing intermediate container d69b80d89ec1<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">0f4df0fda324</span><br>Step 8/8 : CMD [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 7d8d9fa07eea</span><br>Removing intermediate container 7d8d9fa07eea<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">3ea8b69863be</span><br>Successfully built 3ea8b69863be<br>Successfully tagged harbor.qintianjun.local/k8s/tomcat-app1:tomcat-app1-20220731<br>The push refers to repository [harbor.qintianjun.local/k8s/tomcat-app1]<br>d1e27926a945: Pushed<br>b2d8029dc6d4: Pushed<br>f7163ed94019: Pushed<br>e3a0faa1d4f9: Pushed<br>7431aff42bd3: Pushed<br>3e60ee44c08b: Mounted from k8s/tomcat-base<br>ef54031810c7: Mounted from k8s/tomcat-base<br>a0bd3f2ec818: Mounted from k8s/tomcat-base<br>c5b980123fc0: Mounted from k8s/tomcat-base<br>707c797f8ec8: Mounted from k8s/tomcat-base<br>80c1c8f91f96: Mounted from k8s/tomcat-base<br>12e7ca64edac: Mounted from k8s/tomcat-base<br>1e3f5eb5dee1: Mounted from k8s/tomcat-base<br>174f56854903: Mounted from k8s/tomcat-base<br>tomcat-app1-20220731: digest: sha256:4eaa85a5af9e23dce2478473cc8580e2627119e9f6ce2cfec5ee3326c94b84dd size: 3252<br></code></pre></td></tr></table></figure><p>下面使用刚才制作好的镜像实现nginx + tomcat + nfs 动静分离</p><h2 id="实战案例一：-自定义镜像运行nginx及tomcat服务并基于NAS实现动静分离"><a href="#实战案例一：-自定义镜像运行nginx及tomcat服务并基于NAS实现动静分离" class="headerlink" title="实战案例一： 自定义镜像运行nginx及tomcat服务并基于NAS实现动静分离"></a>实战案例一： 自定义镜像运行nginx及tomcat服务并基于NAS实现动静分离</h2><p><img src="https://s2.loli.net/2023/02/24/7nDkVpHuX1UfMlA.png" alt="image-20220801181040162"></p><h3 id="基于tomcat-base配置tomcat业务镜像"><a href="#基于tomcat-base配置tomcat业务镜像" class="headerlink" title="基于tomcat-base配置tomcat业务镜像"></a>基于tomcat-base配置tomcat业务镜像</h3><p>构建镜像</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager tomcat-app1]# cat Dockerfile <br><span class="hljs-meta prompt_">#</span><span class="language-bash">tomcat web1</span><br>FROM 192.168.88.138/base/tomcat-base:v8.5.43<br>ADD catalina.sh /apps/tomcat/bin/catalina.sh<br>ADD server.xml /apps/tomcat/conf/server.xml<br>ADD app1.tar.gz /data/tomcat/webapps/myapp/<br>ADD run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh<br>RUN chown  -R tomcat.tomcat /data/ /apps/<br>EXPOSE 8080 8443<br>CMD [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]<br><br><br>[root@manager tomcat-app1]# cat build-command.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>TAG=$1<br>docker build -t 192.168.88.138/k8s/tomcat-app1:$&#123;TAG&#125; .<br>sleep 3<br>docker push  192.168.88.138/k8s/tomcat-app1:$&#123;TAG&#125;<br><br><br>[root@manager tomcat-app1]# sh build-command.sh 2022080701<br>Sending build context to Docker daemon  24.13MB<br>Step 1/8 : FROM 192.168.88.138/base/tomcat-base:v8.5.43<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">ee5755a0eeee</span><br>Step 2/8 : ADD catalina.sh /apps/tomcat/bin/catalina.sh<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">088261a93ba2</span><br>Step 3/8 : ADD server.xml /apps/tomcat/conf/server.xml<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">65e5a76a394c</span><br>Step 4/8 : ADD app1.tar.gz /data/tomcat/webapps/myapp/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">89ad99b8f780</span><br>Step 5/8 : ADD run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">f7e79a435dd4</span><br>Step 6/8 : RUN chown  -R tomcat.tomcat /data/ /apps/<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 76a6a9bc8698</span><br>Removing intermediate container 76a6a9bc8698<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">bff60f96c4f9</span><br>Step 7/8 : EXPOSE 8080 8443<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 0796e1bd118a</span><br>Removing intermediate container 0796e1bd118a<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">36a9fad9a841</span><br>Step 8/8 : CMD [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">Running <span class="hljs-keyword">in</span> 9dd900d7bf37</span><br>Removing intermediate container 9dd900d7bf37<br><span class="hljs-meta prompt_"> ---&gt; </span><span class="language-bash">4b20463708f4</span><br>Successfully built 4b20463708f4<br>Successfully tagged 192.168.88.138/k8s/tomcat-app1:2022080701<br>The push refers to repository [192.168.88.138/k8s/tomcat-app1]<br>c595e46af53b: Pushed <br>d6d00542d507: Pushed <br>9350b1765bbb: Pushed <br>f7c55cf260ee: Pushed <br>563e59e4236c: Pushed <br>2f5077e05c3c: Mounted from base/tomcat-base <br>8708aaa5d61a: Mounted from base/tomcat-base <br>9725149d9d5b: Mounted from base/tomcat-base <br>138273c46704: Mounted from base/tomcat-base <br>f5058d269019: Mounted from base/tomcat-base <br>4aa713869ceb: Mounted from base/tomcat-base <br>80cb57ba4a28: Mounted from base/tomcat-base <br>cc31b2a0ae3e: Mounted from base/tomcat-base <br>174f56854903: Mounted from base/tomcat-base <br>2022080701: digest: sha256:f499c15308c6b66760bf650b868aa9331b4ab27895cdb158e36d18829a61c64c size: 3252<br></code></pre></td></tr></table></figure><p>编写yaml文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-tomcat-app1-deployment-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-tomcat-app1-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-tomcat-app1-selector</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-tomcat-app1-selector</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-tomcat-app1-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harbor.qintianjun.local/k8s/tomcat-app1:tomcat-app1-20220731</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;18&quot;</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-tomcat-app1-service-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-tomcat-app1-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30092</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-tomcat-app1-selector</span><br></code></pre></td></tr></table></figure><p>使用<code>kubectl apply -f tomcat-app1.yaml</code> 命令使之生效，查看状态：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master lab]# kubectl get pod,svc,ep -n myserver -o wide<br>NAME                                                 READY   STATUS    RESTARTS   AGE   IP             NODE             NOMINATED NODE   READINESS GATES<br>pod/magedu-tomcat-app1-deployment-67b5fdcfff-d4tmn   1/1     Running   1          21h   172.20.1.153   192.168.68.150   &lt;none&gt;           &lt;none&gt;<br>pod/magedu-tomcat-app1-deployment-67b5fdcfff-f5497   1/1     Running   1          21h   172.20.2.171   192.168.68.149   &lt;none&gt;           &lt;none&gt;<br><br>NAME                                 TYPE       CLUSTER-IP      EXTERNAL-IP   PORT(S)        AGE   SELECTOR<br>service/magedu-tomcat-app1-service   NodePort   10.68.107.218   &lt;none&gt;        80:30092/TCP   21h   app=magedu-tomcat-app1-selector<br><br>NAME                                   ENDPOINTS                             AGE<br>endpoints/magedu-tomcat-app1-service   172.20.1.153:8080,172.20.2.171:8080   21h<br></code></pre></td></tr></table></figure><p>此时访问宿主机30092端口可以看到之前在tomcat镜像中打好的测试页：</p><p><img src="https://s2.loli.net/2023/02/24/KUfEkxyNlHXC59b.png" alt="image-20220801180910483"></p><p>说明tomcat正常工作。</p><h3 id="基于nginx-base配置nginx的业务镜像"><a href="#基于nginx-base配置nginx的业务镜像" class="headerlink" title="基于nginx-base配置nginx的业务镜像"></a>基于nginx-base配置nginx的业务镜像</h3><p>编写nginx.conf</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">user</span>  tomcat tomcat;  <span class="hljs-comment"># 统一使用tomcat</span><br><span class="hljs-attribute">worker_processes</span>  auto;<br><span class="hljs-attribute">daemon</span> <span class="hljs-literal">off</span>;<br><span class="hljs-section">events</span> &#123;<br>    <span class="hljs-attribute">worker_connections</span>  <span class="hljs-number">1024</span>;<br>&#125;<br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><span class="hljs-section">upstream</span>  tomcat_webserver &#123;  <span class="hljs-comment"># upstream为刚刚配置的后端tomcat对应的svc</span><br>        <span class="hljs-attribute">server</span>  magedu-tomcat-app1-service.myserver.svc.magedu.local:<span class="hljs-number">80</span>;<br>&#125;<br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-section">location</span> / &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>        <span class="hljs-section">location</span> /webapp &#123;  <span class="hljs-comment"># 访问/webapp的uri返回静态资源</span><br>            <span class="hljs-attribute">root</span>   html;<br>            <span class="hljs-attribute">index</span>  index.html index.htm;<br>        &#125;<br>        <span class="hljs-section">location</span> /myapp &#123;  <span class="hljs-comment"># 访问/myapp转给后端tomcat服务</span><br>             <span class="hljs-attribute">proxy_pass</span>  http://tomcat_webserver;<br>             <span class="hljs-attribute">proxy_set_header</span>   Host    <span class="hljs-variable">$host</span>;<br>             <span class="hljs-attribute">proxy_set_header</span>   X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>             <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        &#125;<br>        <span class="hljs-attribute">error_page</span>   <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span>  /50x.html;<br>        <span class="hljs-section">location</span> = /50x.html &#123;<br>            <span class="hljs-attribute">root</span>   html;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编写nginx-web1对应的Dockerfile:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager nginx]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">Nginx 1.20.2</span><br>FROM harbor.qintianjun.local/k8s/nginx-base:v1.20.2<br>RUN useradd tomcat -u 2050<br>ADD nginx.conf /usr/local/nginx/conf/nginx.conf<br>ADD app1.tar.gz  /usr/local/nginx/html/webapp/  #ADD会在拷贝的同时自动解压tar文件<br>ADD index.html  /usr/local/nginx/html/index.html<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">静态资源挂载路径</span><br>RUN mkdir -p /usr/local/nginx/html/webapp/static /usr/local/nginx/html/webapp/images &amp;&amp; chown tomcat.tomcat -R /usr/local/nginx/html/webapp/static /usr/local/nginx/html/webapp/images<br><br>EXPOSE 80 443<br><br>CMD [&quot;nginx&quot;]<br>[root@manager nginx]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>TAG=$1<br>docker build -t harbor.qintianjun.local/k8s/nginx-web1:$&#123;TAG&#125; .<br>echo &quot;镜像构建完成，即将上传到harbor&quot;<br>sleep 1<br>docker push harbor.qintianjun.local/k8s/nginx-web1:$&#123;TAG&#125;<br>echo &quot;镜像上传到harbor完成&quot;<br></code></pre></td></tr></table></figure><p>编辑nginx的yaml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">lab</span>]<span class="hljs-comment"># cat nginx-app1.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-deployment-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harbor.qintianjun.local/k8s/nginx-web1:20220801-test1</span><br>        <span class="hljs-comment">#command: [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-comment">#imagePullPolicy: Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;20&quot;</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-service-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30090</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br><br></code></pre></td></tr></table></figure><p>使用<code>kubectl apply</code>命令生效，访问宿主机30090端口：</p><p><img src="https://s2.loli.net/2023/02/24/L3tzPsq4rfARyak.png" alt="image-20220801185408087"></p><p>访问&#x2F;webapp,返回静态资源页：</p><p><img src="https://s2.loli.net/2023/02/24/d7oBaTYwkMImivc.png" alt="image-20220801185422583"></p><p>访问&#x2F;myapp，转发给后端tomcat：</p><p><img src="/k8s%E9%A1%B9%E7%9B%AE%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B.assets/image-20220801185537471.png" alt="image-20220801185537471"></p><p>此时nginx转发后端生效。</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>分别进入两个tomcat容器，修改<code>/data/tomcat/webapps/myapp/index.html</code>为v1,v2:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master lab]# kubectl exec -it pod/magedu-tomcat-app1-deployment-67b5fdcfff-f5497 -n myserver -- bash<br>[root@magedu-tomcat-app1-deployment-67b5fdcfff-f5497 /]# cat /data/tomcat/webapps/myapp/index.html<br>&lt;h1&gt;tomcat app1 for linux n66 v1&lt;/h1&gt;<br><br>[root@master lab]# kubectl exec -it pod/magedu-tomcat-app1-deployment-67b5fdcfff-d4tmn  -n myserver -- bash<br>[root@magedu-tomcat-app1-deployment-67b5fdcfff-d4tmn /]# cat /data/tomcat/webapps/myapp/index.html<br>&lt;h1&gt;tomcat app1 for linux n66 v2&lt;/h1&gt;<br></code></pre></td></tr></table></figure><p>此时反复刷新页面，可以看到页面交替显示v1,v2</p><p><img src="https://s2.loli.net/2023/02/24/avIzSKVREBgxCiJ.png" alt="image-20220801190445371"></p><p><img src="https://s2.loli.net/2023/02/24/RExAc5BaVJMqINi.png" alt="image-20220801190352880"></p><p>说明后端tomcat服务是交替轮询的</p><p>也可以使用NAS(NFS)存放静态资源文件，参考：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master</span> <span class="hljs-string">lab</span>]<span class="hljs-comment"># cat nginx-app1.yaml</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-deployment-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harbor.qintianjun.local/k8s/nginx-web1:20220801-test1</span><br>        <span class="hljs-comment">#command: [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-comment">#imagePullPolicy: Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;20&quot;</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">500Mi</span><br><span class="hljs-comment"># 挂载nfs存储</span><br>      <span class="hljs-attr">volumeMounts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-images</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/nginx/html/webapp/images</span><br>        <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-static</span><br>        <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/usr/local/nginx/html/webapp/static</span><br>        <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-images</span><br>      <span class="hljs-attr">nfs:</span><br>        <span class="hljs-attr">server:</span> <span class="hljs-number">172.31</span><span class="hljs-number">.7</span><span class="hljs-number">.109</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/images</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-static</span><br>      <span class="hljs-attr">nfs:</span><br>        <span class="hljs-attr">server:</span> <span class="hljs-number">172.31</span><span class="hljs-number">.7</span><span class="hljs-number">.109</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/static</span><br>    <span class="hljs-comment">#nodeSelector:</span><br>    <span class="hljs-comment">#  group: magedu</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-service-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">magedu-nginx-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30090</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30091</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">magedu-nginx-selector</span><br></code></pre></td></tr></table></figure><p>至此tomcat+nginx动静分离环境构建完成</p><h2 id="实战案例二：pv-x2F-pvc-zookeeper"><a href="#实战案例二：pv-x2F-pvc-zookeeper" class="headerlink" title="实战案例二：pv&#x2F;pvc + zookeeper"></a>实战案例二：pv&#x2F;pvc + zookeeper</h2><h3 id="通过jdk-镜像构建zookeeper镜像"><a href="#通过jdk-镜像构建zookeeper镜像" class="headerlink" title="通过jdk 镜像构建zookeeper镜像"></a>通过jdk 镜像构建zookeeper镜像</h3><p><img src="https://s2.loli.net/2023/02/24/i46tOrbBj72ecEg.png" alt="image-20220805144125634"></p><p>准备Dockerfile和build脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager zookeeper]# cat Dockerfile<br><span class="hljs-meta prompt_">#</span><span class="language-bash">FROM harbor-linux38.local.com/linux38/slim_java:8</span><br>FROM harbor.qintianjun.local/k8s/slim_java:8<br>ENV ZK_VERSION 3.4.14<br>ADD repositories /etc/apk/repositories<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Download Zookeeper</span><br>COPY zookeeper-3.4.14.tar.gz /tmp/zk.tgz<br>COPY zookeeper-3.4.14.tar.gz.asc /tmp/zk.tgz.asc<br>COPY KEYS /tmp/KEYS<br>RUN apk add --no-cache --virtual .build-deps \<br>      ca-certificates   \<br>      gnupg             \<br>      tar               \<br>      wget &amp;&amp;           \<br>    #<br>    # Install dependencies<br>    apk add --no-cache  \<br>      bash &amp;&amp;           \<br>    #<br>    # Verify the signature<br>    #<br>    export GNUPGHOME=&quot;$(mktemp -d)&quot; &amp;&amp; \<br>    gpg -q --batch --import /tmp/KEYS &amp;&amp; \<br>    gpg -q --batch --no-auto-key-retrieve --verify /tmp/zk.tgz.asc /tmp/zk.tgz &amp;&amp; \<br>    #<br>    # Set up directories<br>    #<br>    mkdir -p /zookeeper/data /zookeeper/wal /zookeeper/log &amp;&amp; \<br>    #<br>    # Install<br>    tar -x -C /zookeeper --strip-components=1 --no-same-owner -f /tmp/zk.tgz &amp;&amp; \<br>    #<br>    # Slim down<br>    cd /zookeeper &amp;&amp; \<br>    cp dist-maven/zookeeper-$&#123;ZK_VERSION&#125;.jar . &amp;&amp; \<br>    rm -rf \<br>      *.txt \<br>      *.xml \<br>      bin/README.txt \<br>      bin/*.cmd \<br>      conf/* \<br>      contrib \<br>      dist-maven \<br>      docs \<br>      lib/*.txt \<br>      lib/cobertura \<br>      lib/jdiff \<br>      recipes \<br>      src \<br>      zookeeper-*.asc \<br>      zookeeper-*.md5 \<br>      zookeeper-*.sha1 &amp;&amp; \<br>    #<br>    # Clean up<br>    apk del .build-deps &amp;&amp; \<br>    rm -rf /tmp/* &quot;$GNUPGHOME&quot;<br><br>COPY conf /zookeeper/conf/<br>COPY bin/zkReady.sh /zookeeper/bin/<br>COPY entrypoint.sh /<br><br>ENV PATH=/zookeeper/bin:$&#123;PATH&#125; \<br>    ZOO_LOG_DIR=/zookeeper/log \<br>    ZOO_LOG4J_PROP=&quot;INFO, CONSOLE, ROLLINGFILE&quot; \<br>    JMXPORT=9010<br><br>ENTRYPOINT [ &quot;/entrypoint.sh&quot; ]<br><br>CMD [ &quot;zkServer.sh&quot;, &quot;start-foreground&quot; ]<br><br>EXPOSE 2181 2888 3888 9010<br><br>[root@manager zookeeper]# cat build-command.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>TAG=$1<br>docker build -t harbor.qintianjun.local/k8s/zookeeper:$&#123;TAG&#125; .<br>sleep 1<br>docker push  harbor.qintianjun.local/k8s/zookeeper:$&#123;TAG&#125;<br></code></pre></td></tr></table></figure><p>准备zookeeper对应配置文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager zookeeper]# cat conf/log4j.properties<br>zookeeper.root.logger=INFO, CONSOLE, ROLLINGFILE<br>zookeeper.console.threshold=INFO<br>zookeeper.log.dir=/zookeeper/log<br>zookeeper.log.file=zookeeper.log<br>zookeeper.log.threshold=INFO<br>zookeeper.tracelog.dir=/zookeeper/log<br>zookeeper.tracelog.file=zookeeper_trace.log<br>log4j.rootLogger=$&#123;zookeeper.root.logger&#125;<br>log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender<br>log4j.appender.CONSOLE.Threshold=$&#123;zookeeper.console.threshold&#125;<br>log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout<br>log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n<br>log4j.appender.ROLLINGFILE=org.apache.log4j.RollingFileAppender<br>log4j.appender.ROLLINGFILE.Threshold=$&#123;zookeeper.log.threshold&#125;<br>log4j.appender.ROLLINGFILE.File=$&#123;zookeeper.log.dir&#125;/$&#123;zookeeper.log.file&#125;<br>log4j.appender.ROLLINGFILE.MaxFileSize=10MB<br>log4j.appender.ROLLINGFILE.MaxBackupIndex=5<br>log4j.appender.ROLLINGFILE.layout=org.apache.log4j.PatternLayout<br>log4j.appender.ROLLINGFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n<br>log4j.appender.TRACEFILE=org.apache.log4j.FileAppender<br>log4j.appender.TRACEFILE.Threshold=TRACE<br>log4j.appender.TRACEFILE.File=$&#123;zookeeper.tracelog.dir&#125;/$&#123;zookeeper.tracelog.file&#125;<br>log4j.appender.TRACEFILE.layout=org.apache.log4j.PatternLayout<br>log4j.appender.TRACEFILE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L][%x] - %m%n<br><br>[root@manager zookeeper]# cat conf/zoo.cfg<br>tickTime=2000<br>initLimit=10<br>syncLimit=5<br>dataDir=/zookeeper/data<br>dataLogDir=/zookeeper/wal<br><span class="hljs-meta prompt_">#</span><span class="language-bash">snapCount=100000</span><br>autopurge.purgeInterval=1<br>clientPort=2181<br></code></pre></td></tr></table></figure><p>准备启动脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager zookeeper]# cat bin/zkReady.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>/zookeeper/bin/zkServer.sh status | egrep &#x27;Mode: (standalone|leading|following|observing)&#x27;<br>[root@manager zookeeper]# cat repositories<br>http://mirrors.aliyun.com/alpine/v3.6/main<br>http://mirrors.aliyun.com/alpine/v3.6/community<br></code></pre></td></tr></table></figure><p>集群服务的配置文件提供方式：</p><ul><li>提前在镜像中定义</li><li>在部署集群的时候在yaml中传递变量</li><li>在entrypoint脚本中定义</li></ul><p>准备pv及pvc对应yaml：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master1</span> <span class="hljs-string">pv</span>]<span class="hljs-comment"># cat zookeeper-persistentvolume.yaml </span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pv-1</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">20Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span> <br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.139</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/zookeeper-datadir-1</span> <br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pv-2</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">20Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.139</span> <br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/zookeeper-datadir-2</span> <br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pv-3</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">20Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.139</span>  <br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/zookeeper-datadir-3</span> <br><br><br>[<span class="hljs-string">root@master1</span> <span class="hljs-string">pv</span>]<span class="hljs-comment"># cat zookeeper-persistentvolumeclaim.yaml </span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeName:</span> <span class="hljs-string">zookeeper-datadir-pv-1</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeName:</span> <span class="hljs-string">zookeeper-datadir-pv-2</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-3</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">myserver</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">volumeName:</span> <span class="hljs-string">zookeeper-datadir-pv-3</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><p>确认pv状态为Available：</p><p><img src="https://s2.loli.net/2023/02/24/gnWakMvmZlXhCVs.png" alt="image-20220805152725634"></p><p>确认pvc状态：</p><p><img src="https://s2.loli.net/2023/02/24/nvoWQqjlHxf8ziD.png" alt="image-20220807144332621"></p><p>编写zookeeper.yaml并应用:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master1</span> <span class="hljs-string">zookeeper</span>]<span class="hljs-comment"># cat zookeeper.yaml </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2181</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>        <br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2181</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32181</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">followers</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2888</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">election</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">3888</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;1&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>        <br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2181</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32182</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">followers</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2888</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">election</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">3888</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper3</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span>        <br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">client</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2181</span><br>      <span class="hljs-attr">nodePort:</span> <span class="hljs-number">32183</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">followers</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">2888</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">election</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">3888</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>    <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>        <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wal</span><br>          <span class="hljs-attr">emptyDir:</span><br>            <span class="hljs-attr">medium:</span> <span class="hljs-string">Memory</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.138</span><span class="hljs-string">/k8s/zookeeper:2022080701</span> <br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYID</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;1&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVERS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;zookeeper1,zookeeper2,zookeeper3&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JVMFLAGS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xmx1G&quot;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2181</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2888</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3888</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/zookeeper/data&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-1</span> <br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-1</span> <br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>            <span class="hljs-attr">claimName:</span> <span class="hljs-string">zookeeper-datadir-pvc-1</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper2</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>        <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;2&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wal</span><br>          <span class="hljs-attr">emptyDir:</span><br>            <span class="hljs-attr">medium:</span> <span class="hljs-string">Memory</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.138</span><span class="hljs-string">/k8s/zookeeper:2022080701</span> <br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYID</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;2&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVERS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;zookeeper1,zookeeper2,zookeeper3&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JVMFLAGS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xmx1G&quot;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2181</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2888</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3888</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/zookeeper/data&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-2</span> <br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-2</span><br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>            <span class="hljs-attr">claimName:</span> <span class="hljs-string">zookeeper-datadir-pvc-2</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper3</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">zookeeper</span><br>        <span class="hljs-attr">server-id:</span> <span class="hljs-string">&quot;3&quot;</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">data</span><br>          <span class="hljs-attr">emptyDir:</span> &#123;&#125;<br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">wal</span><br>          <span class="hljs-attr">emptyDir:</span><br>            <span class="hljs-attr">medium:</span> <span class="hljs-string">Memory</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">server</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.138</span><span class="hljs-string">/k8s/zookeeper:2022080701</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">env:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">MYID</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;3&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">SERVERS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;zookeeper1,zookeeper2,zookeeper3&quot;</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">JVMFLAGS</span><br>              <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;-Xmx1G&quot;</span><br>          <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2181</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">2888</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">3888</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/zookeeper/data&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-3</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">zookeeper-datadir-pvc-3</span><br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>           <span class="hljs-attr">claimName:</span> <span class="hljs-string">zookeeper-datadir-pvc-3</span><br></code></pre></td></tr></table></figure><p>查看pod状态：</p><p><img src="https://s2.loli.net/2023/02/24/9iMQNVsBueGvdta.png" alt="image-20220807125245227"></p><p>后面测试过程暂时省略，主要思路就是修改yaml中镜像地址为错误地址，导致其中某个pod创建失败，观察其他pod的follower及leader角色变化。</p><h2 id="实战案例三：-PV-x2F-PVC及Redis单机"><a href="#实战案例三：-PV-x2F-PVC及Redis单机" class="headerlink" title="实战案例三： PV&#x2F;PVC及Redis单机"></a>实战案例三： PV&#x2F;PVC及Redis单机</h2><h3 id="构建redis镜像"><a href="#构建redis镜像" class="headerlink" title="构建redis镜像"></a>构建redis镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager redis]# cat Dockerfile <br><span class="hljs-meta prompt_">#</span><span class="language-bash">Redis Image</span><br>FROM 192.168.88.138/base/centos-base:7.9.2009  <br><br>MAINTAINER qintianjun &quot;freedom1215@foxmail.com&quot;<br><br>ADD redis-4.0.14.tar.gz /usr/local/src<br>RUN ln -sv /usr/local/src/redis-4.0.14 /usr/local/redis &amp;&amp; cd /usr/local/redis &amp;&amp; make &amp;&amp; cp src/redis-cli /usr/sbin/ &amp;&amp; cp src/redis-server  /usr/sbin/ &amp;&amp; mkdir -pv /data/redis-data <br>ADD redis.conf /usr/local/redis/redis.conf <br>ADD run_redis.sh /usr/local/redis/run_redis.sh<br><br>EXPOSE 6379<br><br>CMD [&quot;/usr/local/redis/run_redis.sh&quot;]<br>[root@manager redis]# cat build-command.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>TAG=$1<br>docker build -t 192.168.88.138/k8s/redis:$&#123;TAG&#125; .<br>sleep 3<br>docker push  192.168.88.138/k8s/redis:$&#123;TAG&#125;<br></code></pre></td></tr></table></figure><h3 id="创建pv与pvc"><a href="#创建pv与pvc" class="headerlink" title="创建pv与pvc"></a>创建pv与pvc</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master1</span> <span class="hljs-string">pv</span>]<span class="hljs-comment"># cat redis-persistentvolume.yaml </span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolume</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis-datadir-pv-1</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">capacity:</span><br>    <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">nfs:</span><br>    <span class="hljs-attr">path:</span> <span class="hljs-string">/data/k8sdata/magedu/redis-datadir-1</span> <br>    <span class="hljs-attr">server:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.139</span><br>[<span class="hljs-string">root@master1</span> <span class="hljs-string">pv</span>]<span class="hljs-comment"># cat redis-persistentvolumeclaim.yaml </span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">PersistentVolumeClaim</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">redis-datadir-pvc-1</span> <br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">volumeName:</span> <span class="hljs-string">redis-datadir-pv-1</span> <br>  <span class="hljs-attr">accessModes:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">ReadWriteOnce</span><br>  <span class="hljs-attr">resources:</span><br>    <span class="hljs-attr">requests:</span><br>      <span class="hljs-attr">storage:</span> <span class="hljs-string">10Gi</span><br></code></pre></td></tr></table></figure><h3 id="运行redis服务"><a href="#运行redis服务" class="headerlink" title="运行redis服务"></a>运行redis服务</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@master1</span> <span class="hljs-string">redis</span>]<span class="hljs-comment"># cat redis.yaml </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">devops-redis</span> <br>  <span class="hljs-attr">name:</span> <span class="hljs-string">deploy-devops-redis</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span> <br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">devops-redis</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">devops-redis</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.88</span><span class="hljs-number">.138</span><span class="hljs-string">/k8s/redis:2022080701</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>          <span class="hljs-attr">volumeMounts:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">&quot;/data/redis-data/&quot;</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">redis-datadir</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis-datadir</span><br>          <span class="hljs-attr">persistentVolumeClaim:</span><br>            <span class="hljs-attr">claimName:</span> <span class="hljs-string">redis-datadir-pvc-1</span> <br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">devops-redis</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">srv-devops-redis</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">magedu</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span> <br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">6379</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30379</span> <br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">devops-redis</span><br>  <span class="hljs-attr">sessionAffinity:</span> <span class="hljs-string">ClientIP</span><br>  <span class="hljs-attr">sessionAffinityConfig:</span><br>    <span class="hljs-attr">clientIP:</span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">10800</span><br></code></pre></td></tr></table></figure><h3 id="验证redis数据读写"><a href="#验证redis数据读写" class="headerlink" title="验证redis数据读写"></a>验证redis数据读写</h3><p>访问对应node节点30379端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@node2 ~]# telnet 192.168.88.136  30379<br>Trying 192.168.88.136...<br>Connected to 192.168.88.136.<br>Escape character is &#x27;^]&#x27;.<br>auth 123456<br>+OK<br>set key1 value1<br>+OK<br>get key1<br><span class="hljs-meta prompt_">$</span><span class="language-bash">6</span><br>value1<br>quit<br>+OK<br></code></pre></td></tr></table></figure><p>此时进入nfs服务挂载点所在目录</p><p><img src="https://s2.loli.net/2023/02/24/GNK7yOEvgz9mpYt.png" alt="image-20220807173006223"></p><p>可以看到文件被写入对应pvc, 查看aof文件可以看到刚才执行的命令：</p><p><img src="https://s2.loli.net/2023/02/24/fr1WQS7TyhupO9F.png" alt="image-20220807173106104"></p>]]></content>
    
    
    <summary type="html">k8s业务容器化实战案例</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>yaml文件详解及示例</title>
    <link href="http://www.qintianjun.top/2022/05/16/yaml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A%E7%A4%BA%E4%BE%8B/"/>
    <id>http://www.qintianjun.top/2022/05/16/yaml%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3%E5%8F%8A%E7%A4%BA%E4%BE%8B/</id>
    <published>2022-05-16T11:44:08.000Z</published>
    <updated>2023-02-24T08:08:25.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="yaml-文件详解及示例"><a href="#yaml-文件详解及示例" class="headerlink" title="yaml 文件详解及示例"></a>yaml 文件详解及示例</h1><h2 id="Kubernetes-的几个重要概念："><a href="#Kubernetes-的几个重要概念：" class="headerlink" title="Kubernetes 的几个重要概念："></a>Kubernetes 的几个重要概念：</h2><ul><li>资源对象： kubernetes基于声明式API，和资源对象进行交互。</li><li>yaml文件:为了方便后期管理，通过使用yaml文件通过API管理资源对象。 </li><li>yaml必需字段:<ol><li>apiVersion - 创建该对象所使用的 Kubernetes API 的版本</li><li>kind - 想要创建的对象的类型</li><li>metadata - 定义识别对象唯一性的数据，包括一个 name 名称 、可选的 namespace</li><li>spec:定义资源对象的详细规范信息(统一的label标签、容器名称、镜像、端口映射等) </li><li>status(Pod创建完成后k8s自动生成status状态)</li></ol></li><li>Pod：<ol><li>pod是k8s中的最小单元。</li><li>一个pod中可以运行一个容器，也可 以运行多个容器。</li><li>运行多个容器的话，这些容器是一起 被调度的。</li><li>Pod的生命周期是短暂的，不会自愈， 是用完就销毁的实体。</li><li>一般我们是通过Controller来创建和管理pod的</li></ol></li></ul><h2 id="yaml-文件详解"><a href="#yaml-文件详解" class="headerlink" title="yaml 文件详解"></a>yaml 文件详解</h2><h3 id="yaml-文件必需字段"><a href="#yaml-文件必需字段" class="headerlink" title="yaml 文件必需字段"></a>yaml 文件必需字段</h3><ul><li>每个API对象都有3大类属性： 元数据metadata、规范spec和状态status</li><li>spec和status的区别：<ul><li>spec 是期望状态</li><li>status 是实际状态</li></ul></li></ul><p>基于yaml 文件，在k8s 中实现pod的创建与删除等功能</p><h3 id="yaml-与json"><a href="#yaml-与json" class="headerlink" title="yaml 与json"></a>yaml 与json</h3><ul><li><p>yaml和json对比，<br>在线yaml与json编辑器：<a href="http://www.bejson.com/validators/yaml_editor/">http://www.bejson.com/validators/yaml_editor/</a></p></li><li><p>json格式</p></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> &#x27;人员名单&#x27;<span class="hljs-punctuation">:</span> <br><span class="hljs-punctuation">&#123;</span> &#x27;张三&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &#x27;年龄&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span> &#x27;职业&#x27;<span class="hljs-punctuation">:</span> &#x27;Linux运维工程师&#x27;<span class="hljs-punctuation">,</span> &#x27;爱好&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> &#x27;看书&#x27;<span class="hljs-punctuation">,</span> &#x27;学习&#x27;<span class="hljs-punctuation">,</span> &#x27;加班&#x27; <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  &#x27;李四&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> &#x27;年龄&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><span class="hljs-punctuation">,</span> &#x27;职业&#x27;<span class="hljs-punctuation">:</span> &#x27;Java开发工程师&#x27;<span class="hljs-punctuation">,</span> &#x27;爱好&#x27;<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span> &#x27;开源技术&#x27;<span class="hljs-punctuation">,</span> &#x27;微服务&#x27;<span class="hljs-punctuation">,</span> &#x27;分布式存 储&#x27; <span class="hljs-punctuation">]</span> <span class="hljs-punctuation">&#125;</span> <span class="hljs-punctuation">&#125;</span> <br><span class="hljs-punctuation">&#125;</span> <br></code></pre></td></tr></table></figure><ul><li><p>json特点：</p><ul><li><p>json 不能注释</p></li><li><p>json 可读性较差</p></li><li><p>json 语法很严格</p></li><li><p>比较适用于API 返回值，也可用于配置文件</p></li></ul></li><li><p>yaml格式</p></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">人员名单:</span> <span class="hljs-string">张三:</span><br><span class="hljs-string">年龄:</span> <span class="hljs-number">18</span> <span class="hljs-comment">#</span><br><span class="hljs-string">职业:</span> <span class="hljs-string">Linux运维工程师</span> <span class="hljs-string">爱好:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">看书</span> <span class="hljs-bullet">-</span> <span class="hljs-string">学习</span> <span class="hljs-bullet">-</span> <span class="hljs-string">加班</span><br><span class="hljs-string">李四:</span><br><span class="hljs-string">年龄:</span> <span class="hljs-number">20</span><br><span class="hljs-string">职业:</span> <span class="hljs-string">Java开发工程师</span> <span class="hljs-comment"># 这是职业 爱好:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">开源技术</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">微服务</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">分布式存储</span><br></code></pre></td></tr></table></figure><ul><li>大小写敏感<br>使用缩进表示层级关系<br>缩进时不允许使用Tal键，只允许使用空格 缩进的空格数目不重要，只要相同层级的元素左侧对齐即可 使用”#” 表示注释，从这个字符一直到行尾，都会被解析器忽略 比json更适用于配置文件</li></ul><p>k8s中的yaml文件以及其他场景的yaml文件，大部分都是以下类型:</p><ul><li><p>上下级关系</p></li><li><p>列表</p></li><li><p>键值对(也称为maps，即key:value 格式的键值对数据)</p></li><li><h3 id="pod-资源清单详细解读"><a href="#pod-资源清单详细解读" class="headerlink" title="pod 资源清单详细解读"></a>pod 资源清单详细解读</h3></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span> <span class="hljs-comment">#版本号，例如 v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span> <span class="hljs-comment">#资源类型，如 Pod</span><br><span class="hljs-attr">metadata:</span> <span class="hljs-comment">#元数据</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment"># Pod 名字</span><br> <span class="hljs-attr">namespace:</span> <span class="hljs-string">string</span> <span class="hljs-comment"># Pod 所属的命名空间</span><br> <span class="hljs-attr">labels:</span> <span class="hljs-comment">#自定义标签</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#自定义标签名字</span><br> <span class="hljs-attr">annotations:</span> <span class="hljs-comment">#自定义注释列表</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br><span class="hljs-attr">spec:</span> <span class="hljs-comment"># Pod 中容器的详细定义</span><br> <span class="hljs-attr">containers:</span> <span class="hljs-comment"># Pod 中容器列表</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#容器名称</span><br> <span class="hljs-attr">image:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#容器的镜像名称</span><br> <span class="hljs-attr">imagePullPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">IfNotPresent</span>] <span class="hljs-comment">#获取镜像的策略 Alawys 表示下载镜像 IfnotPresent 表示优先使用本地镜像，否则下载镜像，Nerver 表示仅使用本地镜像</span><br> <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>] <span class="hljs-comment">#容器的启动命令列表，如不指定，使用打包时使用的启动命令</span><br> <span class="hljs-attr">args:</span> [<span class="hljs-string">string</span>] <span class="hljs-comment">#容器的启动命令参数列表</span><br> <span class="hljs-attr">workingDir:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#容器的工作目录</span><br> <span class="hljs-attr">volumeMounts:</span> <span class="hljs-comment">#挂载到容器内部的存储卷配置</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#引用 pod 定义的共享存储卷的名称，需用 volumes[]部分定义的的卷名</span><br> <span class="hljs-attr">mountPath:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#存储卷在容器内 mount 的绝对路径，应少于 512 字符</span><br> <span class="hljs-attr">readOnly:</span> <span class="hljs-string">boolean</span> <span class="hljs-comment">#是否为只读模式</span><br> <span class="hljs-attr">ports:</span> <span class="hljs-comment">#需要暴露的端口库号</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#端口号名称</span><br> <span class="hljs-attr">containerPort:</span> <span class="hljs-string">int</span> <span class="hljs-comment">#容器需要监听的端口号</span><br> <span class="hljs-attr">hostPort:</span> <span class="hljs-string">int</span> <span class="hljs-comment">#容器所在主机需要监听的端口号，默认与 Container 相同</span><br> <span class="hljs-attr">protocol:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#端口协议，支持 TCP 和 UDP，默认 TCP</span><br> <span class="hljs-attr">env:</span> <span class="hljs-comment">#容器运行前需设置的环境变量列表</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#环境变量名称</span><br> <span class="hljs-attr">value:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#环境变量的值</span><br> <span class="hljs-attr">resources:</span> <span class="hljs-comment">#资源限制和请求的设置</span><br> <span class="hljs-attr">limits:</span> <span class="hljs-comment">#资源限制的设置</span><br> <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#cpu 的限制，单位为 core 数</span><br> <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#内存限制，单位可以为 Mib/Gib</span><br> <span class="hljs-attr">requests:</span> <span class="hljs-comment">#资源请求的设置</span><br> <span class="hljs-attr">cpu:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#cpu 请求，容器启动的初始可用数量</span><br> <span class="hljs-attr">memory:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#内存请求，容器启动的初始可用内存</span><br> <span class="hljs-attr">livenessProbe:</span> <span class="hljs-comment">#对 Pod 内个容器健康检查的设置，当探测无响应几次后将自动重启该容器，检查方法有 exec、httpGet 和 tcpSocket，对一个容器只需设置其中一种方法即可</span><br> <span class="hljs-attr">exec:</span> <span class="hljs-comment">#对 Pod 容器内检查方式设置为 exec 方式</span><br> <span class="hljs-attr">command:</span> [<span class="hljs-string">string</span>] <span class="hljs-comment">#exec 方式需要制定的命令或脚本</span><br> <span class="hljs-attr">httpGet:</span> <span class="hljs-comment">#对 Pod 内个容器健康检查方法设置为 HttpGet，需要制定 Path、port</span><br> <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br> <span class="hljs-attr">host:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">scheme:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">HttpHeaders:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">value:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">tcpSocket:</span> <span class="hljs-comment">#对 Pod 内个容器健康检查方式设置为 tcpSocket 方式</span><br> <span class="hljs-attr">port:</span> <span class="hljs-string">number</span><br> <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#容器启动完成后首次探测的时间，单位为秒</span><br> <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#对容器健康检查探测等待响应的超时时间，单位秒，默认 1 秒</span><br> <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">0</span> <span class="hljs-comment">#对容器监控检查的定期探测时间设置，单位秒，默认 10 秒一次</span><br> <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">0</span><br> <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">0</span><br> <span class="hljs-attr">securityContext:</span><br> <span class="hljs-string">privileged:false</span><br> <span class="hljs-attr">restartPolicy:</span> [<span class="hljs-string">Always</span> <span class="hljs-string">|</span> <span class="hljs-string">Never</span> <span class="hljs-string">|</span> <span class="hljs-string">OnFailure</span>]<span class="hljs-comment">#Pod 的重启策略，Always 表示一旦不管以何种方式终止运行，kubelet 都将重启，OnFailure 表示只有 Pod 以非 0 退出码退出才重启，Nerver 表示不再重启该 Pod</span><br> <span class="hljs-attr">nodeSelector:</span> <span class="hljs-string">obeject</span> <span class="hljs-comment">#设置 NodeSelector 表示将该 Pod 调度到包含这个 label 的 node上，以 key：value 的格式指定</span><br> <span class="hljs-attr">imagePullSecrets:</span> <span class="hljs-comment">#Pull 镜像时使用的 secret 名称，以 key：secretkey 格式指定</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br> <span class="hljs-string">hostNetwork:false</span> <span class="hljs-comment">#是否使用主机网络模式，默认为 false，如果设置为 true，表示使用宿主机网络</span><br> <span class="hljs-attr">volumes:</span> <span class="hljs-comment">#在该 pod 上定义共享存储卷列表</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#共享存储卷名称 （volumes 类型有很多种）</span><br> <span class="hljs-attr">emptyDir:</span> &#123;&#125; <span class="hljs-comment">#类型为 emtyDir 的存储卷，与 Pod 同生命周期的一个临时目录。为空值</span><br> <span class="hljs-attr">hostPath:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#类型为 hostPath 的存储卷，表示挂载 Pod 所在宿主机的目录</span><br> <span class="hljs-attr">path:</span> <span class="hljs-string">string</span> <span class="hljs-comment">#Pod 所在宿主机的目录，将被用于同期中 mount 的目录</span><br> <span class="hljs-attr">secret:</span> <span class="hljs-comment">#类型为 secret 的存储卷，挂载集群与定义的 secre 对象到容器内部</span><br> <span class="hljs-attr">scretname:</span> <span class="hljs-string">string</span> <br> <span class="hljs-attr">items:</span> <br> <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">configMap:</span> <span class="hljs-comment">#类型为 configMap 的存储卷，挂载预定义的 configMap 对象到容器内部</span><br> <span class="hljs-attr">name:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">items:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">string</span><br> <span class="hljs-attr">path:</span> <span class="hljs-string">string</span><br></code></pre></td></tr></table></figure><p>例子：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#test-pod </span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span> <span class="hljs-comment">#指定api版本，此值必须在kubectl apiversion中   </span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span> <span class="hljs-comment">#指定创建资源的角色/类型   </span><br><span class="hljs-attr">metadata:</span> <span class="hljs-comment">#资源的元数据/属性   </span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span> <span class="hljs-comment">#资源的名字，在同一个namespace中必须唯一   </span><br>  <span class="hljs-attr">labels:</span> <span class="hljs-comment">#设定资源的标签 </span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">apache</span>   <br>    <span class="hljs-attr">version:</span> <span class="hljs-string">v1</span>   <br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span>   <br>  <span class="hljs-attr">annotations:</span>            <span class="hljs-comment">#自定义注解列表   </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">String</span>        <span class="hljs-comment">#自定义注解名字   </span><br><span class="hljs-attr">spec:</span> <span class="hljs-comment">#specification of the resource content 指定该资源的内容   </span><br>  <span class="hljs-attr">restartPolicy:</span> <span class="hljs-string">Always</span> <span class="hljs-comment">#表明该容器一直运行，默认k8s的策略，在此容器退出后，会立即创建一个相同的容器   </span><br>  <span class="hljs-attr">nodeSelector:</span>     <span class="hljs-comment">#节点选择，先给主机打标签kubectl label nodes kube-node1 zone=node1   </span><br>    <span class="hljs-attr">zone:</span> <span class="hljs-string">node1</span>   <br>  <span class="hljs-attr">containers:</span>   <br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test-pod</span> <span class="hljs-comment">#容器的名字   </span><br>    <span class="hljs-attr">image:</span> <span class="hljs-number">10.192</span><span class="hljs-number">.21</span><span class="hljs-number">.18</span><span class="hljs-string">:5000/test/chat:latest</span> <span class="hljs-comment">#容器使用的镜像地址   </span><br>    <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Never</span> <span class="hljs-comment">#三个选择Always、Never、IfNotPresent，每次启动时检查和更新（从registery）images的策略， </span><br>                           <span class="hljs-comment"># Always，每次都检查 </span><br>                           <span class="hljs-comment"># Never，每次都不检查（不管本地是否有） </span><br>                           <span class="hljs-comment"># IfNotPresent，如果本地有就不检查，如果没有就拉取 </span><br>    <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;sh&#x27;</span>] <span class="hljs-comment">#启动容器的运行命令，将覆盖容器中的Entrypoint,对应Dockefile中的ENTRYPOINT   </span><br>    <span class="hljs-attr">args:</span> [<span class="hljs-string">&quot;$(str)&quot;</span>] <span class="hljs-comment">#启动容器的命令参数，对应Dockerfile中CMD参数   </span><br>    <span class="hljs-attr">env:</span> <span class="hljs-comment">#指定容器中的环境变量   </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">str</span> <span class="hljs-comment">#变量的名字   </span><br>      <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;/etc/run.sh&quot;</span> <span class="hljs-comment">#变量的值   </span><br>    <span class="hljs-attr">resources:</span> <span class="hljs-comment">#资源管理 </span><br>      <span class="hljs-attr">requests:</span> <span class="hljs-comment">#容器运行时，最低资源需求，也就是说最少需要多少资源容器才能正常运行   </span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.1</span> <span class="hljs-comment">#CPU资源（核数），两种方式，浮点数或者是整数+m，0.1=100m，最少值为0.001核（1m）, 1核心=1000m; 1/2表示是整数的核心cpu</span><br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">32Mi</span> <span class="hljs-comment">#内存使用量   </span><br>      <span class="hljs-attr">limits:</span> <span class="hljs-comment">#资源限制   </span><br>        <span class="hljs-attr">cpu:</span> <span class="hljs-number">0.5</span>   <br>        <span class="hljs-attr">memory:</span> <span class="hljs-string">1000Mi</span>   <br>    <span class="hljs-attr">ports:</span>   <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#容器开发对外的端口 </span><br>      <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span>  <span class="hljs-comment">#名称 </span><br>      <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span>   <br>    <span class="hljs-attr">livenessProbe:</span> <span class="hljs-comment">#pod内容器健康检查的设置 </span><br>      <span class="hljs-attr">httpGet:</span> <span class="hljs-comment">#通过httpget检查健康，返回200-399之间，则认为容器正常   </span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">/</span> <span class="hljs-comment">#URI地址   </span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">80</span>   <br>        <span class="hljs-comment">#host: 127.0.0.1 #主机地址   </span><br>        <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span>   <br>      <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">180</span> <span class="hljs-comment">#表明第一次检测在容器启动后多长时间后开始   </span><br>      <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span> <span class="hljs-comment">#检测的超时时间   </span><br>      <span class="hljs-attr">periodSeconds:</span> <span class="hljs-number">15</span>  <span class="hljs-comment">#检查间隔时间   </span><br>      <span class="hljs-comment">#也可以用这种方法   </span><br>      <span class="hljs-comment">#exec: 执行命令的方法进行监测，如果其退出码不为0，则认为容器正常   </span><br>      <span class="hljs-comment">#  command:   </span><br>      <span class="hljs-comment">#    - cat   </span><br>      <span class="hljs-comment">#    - /tmp/health   </span><br>      <span class="hljs-comment">#也可以用这种方法   </span><br>      <span class="hljs-comment">#tcpSocket: //通过tcpSocket检查健康    </span><br>      <span class="hljs-comment">#  port: number    </span><br>    <span class="hljs-attr">lifecycle:</span> <span class="hljs-comment">#生命周期管理   </span><br>      <span class="hljs-attr">postStart:</span> <span class="hljs-comment">#容器运行之前运行的任务   </span><br>        <span class="hljs-attr">exec:</span>   <br>          <span class="hljs-attr">command:</span>   <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;sh&#x27;</span>   <br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;yum upgrade -y&#x27;</span>   <br>      <span class="hljs-string">preStop:#容器关闭之前运行的任务</span>   <br>        <span class="hljs-attr">exec:</span>   <br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&#x27;service httpd stop&#x27;</span>]   <br>    <span class="hljs-attr">volumeMounts:</span>  <span class="hljs-comment">#挂载持久存储卷 </span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volume</span> <span class="hljs-comment">#挂载设备的名字，与volumes[*].name 需要对应     </span><br>      <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/data</span> <span class="hljs-comment">#挂载到容器的某个路径下   </span><br>      <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">True</span>   <br>  <span class="hljs-attr">volumes:</span> <span class="hljs-comment">#定义一组挂载设备   </span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">volume</span> <span class="hljs-comment">#定义一个挂载设备的名字   </span><br>    <span class="hljs-comment">#meptyDir: &#123;&#125;   </span><br>    <span class="hljs-attr">hostPath:</span>   <br>      <span class="hljs-attr">path:</span> <span class="hljs-string">/opt</span> <span class="hljs-comment">#挂载设备类型为hostPath，路径为宿主机下的/opt,这里设备类型支持很多种 </span><br>    <span class="hljs-comment">#nfs</span><br></code></pre></td></tr></table></figure><h3 id="实践nginx-tomcat"><a href="#实践nginx-tomcat" class="headerlink" title="实践nginx+tomcat"></a>实践nginx+tomcat</h3><ol><li>使用yaml创建nginx pod</li></ol><p>Nginx.yaml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>  <span class="hljs-comment">#类型，是deployment控制器，kubectl explain  Deployment</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">extensions/v1beta1</span>  <span class="hljs-comment">#API版本，# kubectl explain  Deployment.apiVersion</span><br><span class="hljs-attr">metadata:</span> <span class="hljs-comment">#pod的元数据信息，kubectl explain  Deployment.metadata</span><br>  <span class="hljs-attr">labels:</span> <span class="hljs-comment">#自定义pod的标签，# kubectl explain  Deployment.metadata.labels</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-nginx-deployment-label</span> <span class="hljs-comment">#标签名称为app值为linux66-nginx-deployment-label，后面会用到此标签 </span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">linux66-nginx-deployment</span> <span class="hljs-comment">#pod的名称</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">linux66</span> <span class="hljs-comment">#pod的namespace，默认是defaule</span><br><span class="hljs-attr">spec:</span> <span class="hljs-comment">#定义deployment中容器的详细信息，kubectl explain  Deployment.spec</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span> <span class="hljs-comment">#创建出的pod的副本数，即多少个pod，默认值为1</span><br>  <span class="hljs-attr">selector:</span> <span class="hljs-comment">#定义标签选择器</span><br>    <span class="hljs-attr">matchLabels:</span> <span class="hljs-comment">#定义匹配的标签，必须要设置</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">linux36-nginx-selector</span> <span class="hljs-comment">#匹配的目标标签，</span><br>  <span class="hljs-attr">template:</span> <span class="hljs-comment">#定义模板，必须定义，模板是起到描述要创建的pod的作用</span><br>    <span class="hljs-attr">metadata:</span> <span class="hljs-comment">#定义模板元数据</span><br>      <span class="hljs-attr">labels:</span> <span class="hljs-comment">#定义模板label，Deployment.spec.template.metadata.labels</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">linux36-nginx-selector</span> <span class="hljs-comment">#定义标签，等于Deployment.spec.selector.matchLabels</span><br>    <span class="hljs-attr">spec:</span> <span class="hljs-comment">#定义pod信息</span><br>      <span class="hljs-string">containers:#定义pod中容器列表，可以多个至少一个，pod不能动态增减容器</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">linux36-nginx-container</span> <span class="hljs-comment">#容器名称</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">harbor.magedu.net/linux36/nginx-web1:v1</span> <span class="hljs-comment">#镜像地址</span><br>        <span class="hljs-comment">#command: [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;] #容器启动执行的命令或脚本</span><br>        <span class="hljs-comment">#imagePullPolicy: IfNotPresent</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span> <span class="hljs-comment">#拉取镜像策略</span><br>        <span class="hljs-attr">ports:</span> <span class="hljs-comment">#定义容器端口列表</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#定义一个端口</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-comment">#端口协议</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span> <span class="hljs-comment">#端口名称</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">443</span> <span class="hljs-comment">#定义一个端口</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-comment">#端口协议</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">https</span> <span class="hljs-comment">#端口名称</span><br>        <span class="hljs-attr">env:</span> <span class="hljs-comment">#配置环境变量</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span> <span class="hljs-comment">#变量名称。必须要用引号引起来</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span> <span class="hljs-comment">#当前变量的值</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span> <span class="hljs-comment">#另一个变量名称</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;18&quot;</span> <span class="hljs-comment">#另一个变量的值</span><br>        <span class="hljs-attr">resources:</span> <span class="hljs-comment">#对资源的请求设置和限制设置</span><br>          <span class="hljs-attr">limits:</span> <span class="hljs-comment">#资源限制设置，上限</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span>  <span class="hljs-comment">#cpu的限制，单位为core数，可以写0.5或者500m等CPU压缩值</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">2Gi</span> <span class="hljs-comment">#内存限制，单位可以为Mib/Gib，将用于docker run --memory参数</span><br>          <span class="hljs-attr">requests:</span> <span class="hljs-comment">#资源请求的设置</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">200m</span> <span class="hljs-comment">#cpu请求数，容器启动的初始可用数量,可以写0.5或者500m等CPU压缩值</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">512Mi</span> <span class="hljs-comment">#内存请求大小，容器启动的初始可用数量，用于调度pod时候使用</span><br>    <br>          <br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span> <span class="hljs-comment">#类型为service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span> <span class="hljs-comment">#service API版本， service.apiVersion</span><br><span class="hljs-attr">metadata:</span> <span class="hljs-comment">#定义service元数据，service.metadata</span><br>  <span class="hljs-attr">labels:</span> <span class="hljs-comment">#自定义标签，service.metadata.labels</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-nginx</span> <span class="hljs-comment">#定义service标签的内容</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">linux66-nginx-spec</span> <span class="hljs-comment">#定义service的名称，此名称会被DNS解析</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">linux66</span> <span class="hljs-comment">#该service隶属于的namespaces名称，即把service创建到哪个namespace里面</span><br><span class="hljs-attr">spec:</span> <span class="hljs-comment">#定义service的详细信息，service.spec</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span> <span class="hljs-comment">#service的类型，定义服务的访问方式，默认为ClusterIP， service.spec.type</span><br>  <span class="hljs-attr">ports:</span> <span class="hljs-comment">#定义访问端口， service.spec.ports</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span> <span class="hljs-comment">#定义一个端口名称</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#service 80端口</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-comment">#协议类型</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span> <span class="hljs-comment">#目标pod的端口</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30001</span> <span class="hljs-comment">#node节点暴露的端口</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">https</span> <span class="hljs-comment">#SSL 端口</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">443</span> <span class="hljs-comment">#service 443端口</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span> <span class="hljs-comment">#端口协议</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">443</span> <span class="hljs-comment">#目标pod端口</span><br>    <span class="hljs-attr">nodePort:</span> <span class="hljs-number">30043</span> <span class="hljs-comment">#node节点暴露的SSL端口</span><br>  <span class="hljs-attr">selector:</span> <span class="hljs-comment">#service的标签选择器，定义要访问的目标pod</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-nginx</span> <span class="hljs-comment">#将流量路到选择的pod上，须等于Deployment.spec.selector.matchLabels</span><br></code></pre></td></tr></table></figure><p>创建对应pod：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master yaml]<span class="hljs-comment"># kubectl apply -f nginx.yaml</span><br>Error from server (NotFound): error when creating <span class="hljs-string">&quot;nginx.yaml&quot;</span>: namespaces <span class="hljs-string">&quot;linux66&quot;</span> not found<br>Error from server (NotFound): error when creating <span class="hljs-string">&quot;nginx.yaml&quot;</span>: namespaces <span class="hljs-string">&quot;linux66&quot;</span> not found<br>[root@master yaml]<span class="hljs-comment"># kubectl create ns linux66</span><br>namespace/linux66 created<br>[root@master yaml]<span class="hljs-comment"># kubectl get ns -A</span><br>NAME                   STATUS   AGE<br>default                Active   19d<br>kube-node-lease        Active   19d<br>kube-public            Active   19d<br>kube-system            Active   19d<br>kubernetes-dashboard   Active   16d<br>linux66                Active   7s<br>[root@master yaml]<span class="hljs-comment"># kubectl apply -f nginx.yaml</span><br>deployment.apps/linux66-nginx-deployment created<br>service/linux66-nginx-service created<br></code></pre></td></tr></table></figure><p>查看pod状态可以看到对应pod创建：</p><p><img src="https://s2.loli.net/2022/05/16/6FKw9oVQxGHNlq8.png" alt="image-20220516170456091"></p><p>测试访问Nginx web界面：</p><p><img src="https://s2.loli.net/2022/05/16/xpFTkB1OYmru6ob.png" alt="image-20220516170419125"></p><ol start="2"><li>使用yaml创建tomcat pod</li></ol><p>Tomcat.yaml:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-comment">#apiVersion: extensions/v1beta1</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-tomcat-app1-deployment-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">linux66-tomcat-app1-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">linux66</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-tomcat-app1-selector</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-tomcat-app1-selector</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">linux66-tomcat-app1-container</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">tomcat:7.0.94-alpine</span> <br>        <span class="hljs-comment">#command: [&quot;/apps/tomcat/bin/run_tomcat.sh&quot;]</span><br>        <span class="hljs-comment">#imagePullPolicy: IfNotPresent</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">8080</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>        <span class="hljs-attr">env:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;password&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;123456&quot;</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;age&quot;</span><br>          <span class="hljs-attr">value:</span> <span class="hljs-string">&quot;18&quot;</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-number">1</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">500m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">&quot;512Mi&quot;</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-tomcat-app1-service-label</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">linux66-tomcat-app1-service</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">linux66</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment">#type: NodePort</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">http</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>    <span class="hljs-attr">targetPort:</span> <span class="hljs-number">8080</span><br>    <span class="hljs-comment">#nodePort: 40003</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">linux66-tomcat-app1-selector</span><br></code></pre></td></tr></table></figure><p>同样使用<code>kubectl apply -f tomcat.yaml</code>创建</p><p><img src="https://s2.loli.net/2022/05/16/WG9aJjXhfAD6NKm.png" alt="image-20220516193135612"></p><p>在nginx容器中添加location, 将login&#x2F;的请求转发给后端tomcat:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在tomcat 中新建一个测试页</span><br>[root@master yaml]<span class="hljs-comment"># kubectl get pod -n linux66 -o wide # 查询pod信息</span><br>NAME                                             READY   STATUS    RESTARTS   AGE     IP            NODE             NOMINATED NODE   READINESS GATES<br>linux66-nginx-deployment-5b456947b4-6scvj        1/1     Running   0          52m     172.20.2.22   192.168.68.149   &lt;none&gt;           &lt;none&gt;<br>linux66-tomcat-app1-deployment-78b9b46cc-7jh7f   1/1     Running   0          2m42s   172.20.1.24   192.168.68.150   &lt;none&gt;           &lt;none&gt;<br>[root@master yaml]<span class="hljs-comment"># kubectl exec -it linux66-tomcat-app1-deployment-78b9b46cc-7jh7f bash -n linux66</span><br>bash-4.4<span class="hljs-comment"># cd /usr/local/tomcat/webapps</span><br>bash-4.4<span class="hljs-comment"># mkdir  login/</span><br>bash-4.4<span class="hljs-comment"># echo &quot;&lt;h1&gt;tomcat login web page.&lt;/h1&gt;&quot; &gt;&gt; login/index.jsp</span><br>bash-4.4<span class="hljs-comment"># exit</span><br>----<br>[root@master yaml]<span class="hljs-comment"># kubectl get pod -n linux66 -o wide  # 查询pod信息</span><br>NAME                                             READY   STATUS    RESTARTS   AGE     IP            NODE             NOMINATED NODE   READINESS GATES<br>linux66-nginx-deployment-5b456947b4-6scvj        1/1     Running   0          55m     172.20.2.22   192.168.68.149   &lt;none&gt;           &lt;none&gt;<br>linux66-tomcat-app1-deployment-78b9b46cc-7jh7f   1/1     Running   0          5m26s   172.20.1.24   192.168.68.150   &lt;none&gt;           &lt;none&gt;<br>[root@master yaml]<span class="hljs-comment"># kubectl get svc -n linux66  # 查询service名称</span><br>NAME                          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                      AGE<br>linux66-nginx-service         NodePort    10.68.201.209   &lt;none&gt;        80:30006/TCP,443:30443/TCP   123m<br>linux66-tomcat-app1-service   ClusterIP   10.68.235.125   &lt;none&gt;        80/TCP                       73m<br>[root@master yaml]<span class="hljs-comment"># kubectl exec -it linux66-nginx-deployment-5b456947b4-6scvj bash -n linux66  # 进入nginx所在pod</span><br>root@linux66-nginx-deployment-5b456947b4-6scvj:/<span class="hljs-comment"># vim /etc/nginx/conf/default.conf</span><br>server &#123;<br>    listen       80;<br>    listen  [::]:80;<br>    server_name  localhost;<br><br>    <span class="hljs-comment">#access_log  /var/log/nginx/host.access.log  main;</span><br><br>    location / &#123;<br>        root   /usr/share/nginx/html;<br>        index  index.html index.htm;<br>    &#125;<br><br>    location /login &#123;  <span class="hljs-comment"># 添加location,转发流量到tomcat</span><br>        proxy_pass http://linux66-tomcat-app1-service; <span class="hljs-comment"># 流量转发给tomcat所在service（此处用svc名称而不用ip，因为容器ip是有可能变化的）</span><br>        <span class="hljs-comment"># 也可以写全： proxy_pass http://linux66-tomcat-app1-service.linux66.svc.magedu.local；</span><br>    &#125;<br><br>    <span class="hljs-comment">#error_page  404              /404.html;</span><br><br>    <span class="hljs-comment"># redirect server error pages to the static page /50x.html</span><br>    <span class="hljs-comment">#</span><br>    error_page   500 502 503 504  /50x.html;<br>    location = /50x.html &#123;<br>        root   /usr/share/nginx/html;<br>    &#125;<br>&#125;<br><span class="hljs-comment"># 校验无误并重启</span><br>root@linux66-nginx-deployment-5b456947b4-6scvj:/<span class="hljs-comment"># nginx -t</span><br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok<br>nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful<br>root@linux66-nginx-deployment-5b456947b4-6scvj:/<span class="hljs-comment"># nginx -s reload</span><br>2022/05/16 11:06:00 [notice] 468<span class="hljs-comment">#468: signal process started</span><br><br></code></pre></td></tr></table></figure><p>此时，访问 <a href="http://192.168.68.150:30006/login/index.jsp%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%8F%91%E7%8E%B0%E6%B5%81%E9%87%8F%E6%AD%A3%E7%A1%AE%E8%BD%AC%E5%8F%91%E7%BB%99%E4%BA%86tomcat">http://192.168.68.150:30006/login/index.jsp，可以发现流量正确转发给了tomcat</a></p><p>&#96;<img src="https://s2.loli.net/2022/05/16/i8GaxTlLoNMKn5J.png" alt="image-20220516190715383"></p>]]></content>
    
    
    <summary type="html">Kubernetes中yaml文件详解及使用yaml配置nginx+tomcat示例</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes组件etcd相关知识点总结</title>
    <link href="http://www.qintianjun.top/2022/05/13/Kubernetes%E7%BB%84%E4%BB%B6etcd%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://www.qintianjun.top/2022/05/13/Kubernetes%E7%BB%84%E4%BB%B6etcd%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2022-05-13T01:33:25.000Z</published>
    <updated>2023-02-24T08:07:16.636Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kubernetes组件etcd相关知识点总结"><a href="#Kubernetes组件etcd相关知识点总结" class="headerlink" title="Kubernetes组件etcd相关知识点总结"></a>Kubernetes组件etcd相关知识点总结</h1><p>本文总结补充自马哥教育相关视频</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>etcd是CoreOS团队于2013年6月发起的开源项目，其的目标是构建一个高可用的分布式键值（key-value）数据库。Etcd内部采用raft协议作为一致性算法等基于Go语言实现。</p><p>官方网站：<a href="https://etcd.io/">https://etcd.io/</a> </p><p>github 地址：<a href="https://github.com/etcd-io/etcd">https://github.com/etcd-io/etcd</a></p><p>官方硬件推荐：<a href="https://etcd.io/docs/v3.4/op-guide/hardware/">https://etcd.io/docs/v3.4/op-guide/hardware/</a></p><p>etcd具有下面这些属性: </p><ul><li>完全复制:集群中的每个节点都可以使用完整的存档</li><li>高可用性:Etcd可用于避免硬件的单点故障或网络问题</li><li>一致性:每次读取都会返回跨多主机的最新写入 </li><li>简单:包括一个定义良好、面向用户的API(gRPC) </li><li>安全:实现了带有可选的客户端证书身份验证的自动化TLS </li><li>快速:每秒10000次写入的基准速度 </li><li>可靠:使用Raft算法实现了存储的合理分布Etcd的工作原理</li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>etcd可以直接将启动参数写在service文件中</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/var/lib/etcd/  <span class="hljs-comment"># 数据保存目录</span><br>ExecStart=/opt/kube/bin/etcd \  <span class="hljs-comment"># 二进制文件路径</span><br>  --name=etcd-192.168.174.134 \<br>  --cert-file=/etc/kubernetes/ssl/etcd.pem \<br>  --key-file=/etc/kubernetes/ssl/etcd-key.pem \<br>  --peer-cert-file=/etc/kubernetes/ssl/etcd.pem \<br>  --peer-key-file=/etc/kubernetes/ssl/etcd-key.pem \<br>  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \<br>  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \<br>  --initial-advertise-peer-urls=https://192.168.174.134:2380 \  <span class="hljs-comment"># 通告自己的集群端口</span><br>  --listen-peer-urls=https://192.168.174.134:2380 \  <span class="hljs-comment"># 集群之间通讯端口</span><br>  --listen-client-urls=https://192.168.174.134:2379,http://127.0.0.1:2379 \  <span class="hljs-comment"># 客户端访问地址</span><br>  --advertise-client-urls=https://192.168.174.134:2379 \  <span class="hljs-comment"># 通告自己的客户端端口</span><br>  --initial-cluster-token=etcd-cluster-0 \  <span class="hljs-comment"># 创建集群使用的token，一个集群内的节点保持一致</span><br>  --initial-cluster=etcd-192.168.174.134=https://192.168.174.134:2380,etcd-192.168.174.128=https://192.168.174.128:2380,etcd-192.168.174.135=https://192.168.174.135:2380 \  <span class="hljs-comment"># 集群所有节点信息 </span><br>  --initial-cluster-state=new \  <span class="hljs-comment"># 新建集群的时候的值为new, 如果是已经存在的集群为existing</span><br>  --data-dir=/var/lib/etcd \  <span class="hljs-comment"># 数据目录路径</span><br>  --snapshot-count=50000 \<br>  --auto-compaction-retention=1 \<br>  --max-request-bytes=10485760 \<br>  --auto-compaction-mode=periodic \<br>  --quota-backend-bytes=8589934592<br>Restart=always<br>RestartSec=15<br>LimitNOFILE=65536<br>OOMScoreAdjust=-999<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><p>或者可以不将启动参数写在service文件中，使用config文件方式定义，例如：</p><p>创建etcd配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /etc/etcd/etcd.conf<br><br><span class="hljs-comment"># 节点名称</span><br>ETCD_NAME=<span class="hljs-string">&quot;etcd0&quot;</span><br><span class="hljs-comment"># 指定数据文件存放位置</span><br>ETCD_DATA_DIR=<span class="hljs-string">&quot;/var/lib/etcd/&quot;</span><br></code></pre></td></tr></table></figure><p>创建systemd配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">vim /etc/systemd/system/etcd.service<br><br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br> <br>[Service]<br>User=root<br>Type=notify<br>WorkingDirectory=/var/lib/etcd/<br><span class="hljs-comment">## 根据实际情况修改EnvironmentFile和ExecStart这两个参数值</span><br><span class="hljs-comment">## 1.EnvironmentFile即配置文件的位置，注意“-”不能少</span><br>EnvironmentFile=-/etc/etcd/etcd.conf<br><span class="hljs-comment">## 2.ExecStart即etcd启动程序位置</span><br>ExecStart=/usr/local/bin/etcd<br>Restart=on-failure<br>LimitNOFILE=65536<br> <br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure><h2 id="etcd-的基本使用"><a href="#etcd-的基本使用" class="headerlink" title="etcd 的基本使用"></a>etcd 的基本使用</h2><p>etcd有多个不同的API访问版本，v1版本已经废弃，etcd v2 和 v3本质上是共享同一套raft 协议代码的两个独立应用，接口不一样，存储不一样，数据互相隔离，也就是说如果从etcd v2 升级到 v3 原来v2 的数据还是只能用v2 的接口访问，v3 的接口创建的数据也只能通过v3 的接口访问</p><h3 id="增加和修改，如果存在则替换"><a href="#增加和修改，如果存在则替换" class="headerlink" title="增加和修改，如果存在则替换"></a>增加和修改，如果存在则替换</h3><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">查询<br>etcdctl put <span class="hljs-variable">&lt;键名&gt;</span> <span class="hljs-variable">&lt;键值&gt;</span> <br>删除<br>etcdctl get <span class="hljs-variable">&lt;键名&gt;</span> <br>查看集群状态<br>etcdctl del <span class="hljs-variable">&lt;键名&gt;</span><br>watch命令<br>etcdctl endpoint status --write-out=<span class="hljs-built_in">table</span> <span class="hljs-comment"># watch是监听键或前缀发生改变的事件流。</span><br></code></pre></td></tr></table></figure><h3 id="对某个key监听操作，当-x2F-key1发生改变时，会返回最新值"><a href="#对某个key监听操作，当-x2F-key1发生改变时，会返回最新值" class="headerlink" title="对某个key监听操作，当&#x2F;key1发生改变时，会返回最新值"></a>对某个key监听操作，当&#x2F;key1发生改变时，会返回最新值</h3><p><code>etcdctl watch /key1 </code></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 在node1中监听/data</span><br>[root@node1 ~]<span class="hljs-comment"># etcdctl watch /data</span><br><span class="hljs-comment"># 在node2中给/data节点赋值</span><br>[root@node2 ~]<span class="hljs-comment"># etcdctl put /data &quot;hello etcd&quot;</span><br>OK<br>此时node1监听到节点对应值<br>[root@node1 ~]<span class="hljs-comment"># etcdctl watch /data</span><br>PUT<br>/data<br>hello etcd<br></code></pre></td></tr></table></figure><h3 id="监听key前缀"><a href="#监听key前缀" class="headerlink" title="监听key前缀"></a>监听key前缀</h3><p><code>etcdctl watch /key --prefix </code></p><h3 id="监听到改变后执行相关操作"><a href="#监听到改变后执行相关操作" class="headerlink" title="监听到改变后执行相关操作"></a>监听到改变后执行相关操作</h3><p><code>etcdctl watch /key1 -- etcdctl member list</code></p><h3 id="etcd-集群成员的心跳信息"><a href="#etcd-集群成员的心跳信息" class="headerlink" title="etcd 集群成员的心跳信息"></a>etcd 集群成员的心跳信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">root@node1:~<span class="hljs-comment"># export NODE_IPS=&quot;192.168.174.134 192.168.174.128 192.168.174.135&quot;</span><br><br>root@node2:~<span class="hljs-comment"># for ip in $&#123;NODE_IPS&#125;; do ETCDCTL_API=3 /usr/local/bin/etcdctl --endpoints=https://$&#123;ip&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem endpoint health; done</span><br>https://192.168.174.134:2379 is healthy: successfully committed proposal: took = 14.611795ms<br>https://192.168.174.128:2379 is healthy: successfully committed proposal: took = 11.889947ms<br>https://192.168.174.135:2379 is healthy: successfully committed proposal: took = 12.589934ms<br></code></pre></td></tr></table></figure><h3 id="etcd-集群的成员信息"><a href="#etcd-集群的成员信息" class="headerlink" title="etcd 集群的成员信息"></a>etcd 集群的成员信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">------------------------------+------------+<br>[root@node1 ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl --write-out=table member list --endpoints=https://192.168.174.134:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem</span><br>+------------------+---------+----------------------+------------------------------+------------------------------+------------+<br>|        ID        | STATUS  |         NAME         |          PEER ADDRS          |         CLIENT ADDRS         | IS LEARNER |<br>+------------------+---------+----------------------+------------------------------+------------------------------+------------+<br>| 65f8d952bfce7d85 | started | etcd-192.168.174.128 | https://192.168.174.128:2380 | https://192.168.174.128:2379 |      <span class="hljs-literal">false</span> |<br>| 9d16670b8c95b723 | started | etcd-192.168.174.134 | https://192.168.174.134:2380 | https://192.168.174.134:2379 |      <span class="hljs-literal">false</span> |<br>| b36760bf3ef3fc98 | started | etcd-192.168.174.135 | https://192.168.174.135:2380 | https://192.168.174.135:2379 |      <span class="hljs-literal">false</span> |<br>+------------------+---------+----------------------+------------------------------+------------------------------+------------+<br></code></pre></td></tr></table></figure><h3 id="显示etcd群集的详细信息"><a href="#显示etcd群集的详细信息" class="headerlink" title="显示etcd群集的详细信息"></a>显示etcd群集的详细信息</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># export NODE_IPS=&quot;192.168.174.128 192.168.174.134 192.168.174.135&quot;</span><br>[root@node1 ~]<span class="hljs-comment"># for ip in $&#123;NODE_IPS&#125;; do ETCDCTL_API=3 etcdctl --write-out=table endpoint status --endpoints=https://$&#123;ip&#125;:2379 --cacert=/etc/kubernetes/ssl/ca.pem --cert=/etc/kubernetes/ssl/etcd.pem --key=/etc/kubernetes/ssl/etcd-key.pem; done</span><br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|           ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://192.168.174.128:2379 | 65f8d952bfce7d85 |  3.4.13 |   20 kB |     <span class="hljs-literal">false</span> |      <span class="hljs-literal">false</span> |       768 |         32 |                 32 |        |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|           ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://192.168.174.134:2379 | 9d16670b8c95b723 |  3.4.13 |   25 kB |     <span class="hljs-literal">false</span> |      <span class="hljs-literal">false</span> |       768 |         32 |                 32 |        |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>|           ENDPOINT           |        ID        | VERSION | DB SIZE | IS LEADER | IS LEARNER | RAFT TERM | RAFT INDEX | RAFT APPLIED INDEX | ERRORS |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br>| https://192.168.174.135:2379 | b36760bf3ef3fc98 |  3.4.13 |   20 kB |      <span class="hljs-literal">true</span> |      <span class="hljs-literal">false</span> |       768 |         32 |                 32 |        |<br>+------------------------------+------------------+---------+---------+-----------+------------+-----------+------------+--------------------+--------+<br><br></code></pre></td></tr></table></figure><h3 id="查看所有的key"><a href="#查看所有的key" class="headerlink" title="查看所有的key"></a>查看所有的key</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@node1 ~]<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get / --prefix --keys-only  #以路径的⽅式所有key信息</span><br>/data<br>/data/user<br>...<br></code></pre></td></tr></table></figure><h2 id="etcd-中查询k8s相关信息"><a href="#etcd-中查询k8s相关信息" class="headerlink" title="etcd 中查询k8s相关信息"></a>etcd 中查询k8s相关信息</h2><h3 id="查看所有的key-1"><a href="#查看所有的key-1" class="headerlink" title="查看所有的key"></a>查看所有的key</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@etcd01:~<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get / --prefix --keys-only  #以路径的⽅式所有key信息</span><br>......<br><span class="hljs-regexp">/registry/</span>services<span class="hljs-regexp">/endpoints/</span>kubernetes-dashboard/kubernetes-dashboard<br><br><span class="hljs-regexp">/registry/</span>services<span class="hljs-regexp">/specs/</span>default/kubernetes<br><br><span class="hljs-regexp">/registry/</span>services<span class="hljs-regexp">/specs/</span>kube-system/kube-dns<br><br><span class="hljs-regexp">/registry/</span>services<span class="hljs-regexp">/specs/</span>kubernetes-dashboard/dashboard-metrics-scraper<br><br><span class="hljs-regexp">/registry/</span>services<span class="hljs-regexp">/specs/</span>kubernetes-dashboard/kubernetes-dashboard<br></code></pre></td></tr></table></figure><h3 id="查看kubernetes中所有pod的信息"><a href="#查看kubernetes中所有pod的信息" class="headerlink" title="查看kubernetes中所有pod的信息"></a>查看kubernetes中所有pod的信息</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@etcd01:~<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get / --prefix --keys-only | grep pods</span><br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-kube-controllers-<span class="hljs-number">647</span>f956d86-srt9s<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-<span class="hljs-number">7</span>f2kc<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-ccv26<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-kw499<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-r4kvx<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-rqm8f<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>calico-node-vjm2k<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kube-system/</span>coredns-<span class="hljs-number">55</span>d54f7cfb-<span class="hljs-number">74</span>vh8<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kubernetes-dashboard/</span>dashboard-metrics-scraper-<span class="hljs-number">856586</span>f554-<span class="hljs-number">595</span>fb<br><span class="hljs-regexp">/registry/</span>pods<span class="hljs-regexp">/kubernetes-dashboard/</span>kubernetes-dashboard-<span class="hljs-number">79</span>b875f7f8-<span class="hljs-number">5</span>qzn4<br><span class="hljs-comment">#在kubernetes中查看pod信息</span><br>root@k8s-master01:~<span class="hljs-comment"># kubectl get pods -A</span><br>NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE<br>kube-system            calico-kube-controllers-<span class="hljs-number">647</span>f956d86-srt9s     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">42</span>h<br>kube-system            calico-node-<span class="hljs-number">7</span>f2kc                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">11</span>d<br>kube-system            calico-node-ccv26                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">11</span>d<br>kube-system            calico-node-kw499                            <span class="hljs-number">0</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">6</span>d<br>kube-system            calico-node-r4kvx                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">5</span>          <span class="hljs-number">11</span>d<br>kube-system            calico-node-rqm8f                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">11</span>d<br>kube-system            calico-node-vjm2k                            <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">11</span>d<br>kube-system            coredns-<span class="hljs-number">55</span>d54f7cfb-<span class="hljs-number">74</span>vh8                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">42</span>h<br>kubernetes-dashboard   dashboard-metrics-scraper-<span class="hljs-number">856586</span>f554-<span class="hljs-number">595</span>fb   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">42</span>h<br>kubernetes-dashboard   kubernetes-dashboard-<span class="hljs-number">79</span>b875f7f8-<span class="hljs-number">5</span>qzn4        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">42</span>h<br></code></pre></td></tr></table></figure><h3 id="查看kubernetes中所有namespace的信息"><a href="#查看kubernetes中所有namespace的信息" class="headerlink" title="查看kubernetes中所有namespace的信息"></a>查看kubernetes中所有namespace的信息</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">root@etcd01:~# ETCDCTL_API=<span class="hljs-number">3</span> etcdctl get / --prefix --keys-only | <span class="hljs-keyword">grep</span> namespaces<br><span class="hljs-regexp">/registry/</span>namespaces/<span class="hljs-keyword">default</span><br><span class="hljs-regexp">/registry/</span>namespaces/kube-node-lease<br><span class="hljs-regexp">/registry/</span>namespaces/kube-<span class="hljs-keyword">public</span><br><span class="hljs-regexp">/registry/</span>namespaces/kube-system<br><span class="hljs-regexp">/registry/</span>namespaces/kubernetes-dashboard<br><br>#在kubernetes中查看namespaces信息<br>root@k8s-master01:~# kubectl get namespaces <br>NAME                   STATUS   AGE<br><span class="hljs-keyword">default</span>                Active   <span class="hljs-number">11</span>d<br>kube-node-lease        Active   <span class="hljs-number">11</span>d<br>kube-<span class="hljs-keyword">public</span>            Active   <span class="hljs-number">11</span>d<br>kube-system            Active   <span class="hljs-number">11</span>d<br>kubernetes-dashboard   Active   <span class="hljs-number">10</span>d<br></code></pre></td></tr></table></figure><h3 id="查看kubernetes中所有deployments的信息"><a href="#查看kubernetes中所有deployments的信息" class="headerlink" title="查看kubernetes中所有deployments的信息"></a>查看kubernetes中所有deployments的信息</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@etcd01:~<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get / --prefix --keys-only | grep deployments</span><br><span class="hljs-regexp">/registry/</span>deployments<span class="hljs-regexp">/kube-system/</span>calico-kube-controllers<br><span class="hljs-regexp">/registry/</span>deployments<span class="hljs-regexp">/kube-system/</span>coredns<br><span class="hljs-regexp">/registry/</span>deployments<span class="hljs-regexp">/kubernetes-dashboard/</span>dashboard-metrics-scraper<br><span class="hljs-regexp">/registry/</span>deployments<span class="hljs-regexp">/kubernetes-dashboard/</span>kubernetes-dashboard<br><br><span class="hljs-comment">#在kubernetes中查看deployments</span><br>root@k8s-master01:~<span class="hljs-comment"># kubectl get deployments -A</span><br>NAMESPACE              NAME                        READY   UP-TO-DATE   AVAILABLE   AGE<br>kube-system            calico-kube-controllers     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">11</span>d<br>kube-system            coredns                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">11</span>d<br>kubernetes-dashboard   dashboard-metrics-scraper   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">10</span>d<br>kubernetes-dashboard   kubernetes-dashboard        <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     <span class="hljs-number">1</span>            <span class="hljs-number">1</span>           <span class="hljs-number">10</span>d<br></code></pre></td></tr></table></figure><h3 id="查看calico网络组件信息"><a href="#查看calico网络组件信息" class="headerlink" title="查看calico网络组件信息"></a>查看calico网络组件信息</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@etcd01:~<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get / --prefix --keys-only | grep calico</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">122.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">135.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">32.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">58.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">85.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-master01<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-master02<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node01<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node02<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node03<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/k8s-pod-network.<span class="hljs-number">44820</span>babdec34cd55e26d1f73bd1d62dbffc12cb48453380b9d37b8e27cacfbc<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/k8s-pod-network.<span class="hljs-number">5</span>bf9b2f255631210515d4b6722cc317f0f81fdacf60f47f3746fbcde8a239c0d<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/k8s-pod-network.b33e81d8d1d9de9cd404d9de66c1615c4bcfcbe9d93fc92972f0fd79f6f0d983<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>host<span class="hljs-regexp">/k8s-master01/i</span>pv4<span class="hljs-regexp">/block/</span><span class="hljs-number">172.20</span>.<span class="hljs-number">32.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>host<span class="hljs-regexp">/k8s-master02/i</span>pv4<span class="hljs-regexp">/block/</span><span class="hljs-number">172.20</span>.<span class="hljs-number">122.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>host<span class="hljs-regexp">/k8s-node01/i</span>pv4<span class="hljs-regexp">/block/</span><span class="hljs-number">172.20</span>.<span class="hljs-number">85.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>host<span class="hljs-regexp">/k8s-node02/i</span>pv4<span class="hljs-regexp">/block/</span><span class="hljs-number">172.20</span>.<span class="hljs-number">58.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>host<span class="hljs-regexp">/k8s-node03/i</span>pv4<span class="hljs-regexp">/block/</span><span class="hljs-number">172.20</span>.<span class="hljs-number">135.128</span>-<span class="hljs-number">26</span><br>......<br></code></pre></td></tr></table></figure><h3 id="查看指定的key"><a href="#查看指定的key" class="headerlink" title="查看指定的key"></a>查看指定的key</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#查看namespaces中default的key</span><br>root@etcd01:~#  <span class="hljs-attribute">ETCDCTL_API</span>=3 etcdctl <span class="hljs-built_in">get</span> /registry/namespaces<span class="hljs-built_in">/default</span><br><span class="hljs-built_in"></span>/registry/namespaces<span class="hljs-built_in">/default</span><br><span class="hljs-built_in"></span>k8s<br><br>v1    Namespace <br><br>default<span class="hljs-string">&quot;*<span class="hljs-variable">$014daf97</span>-460a-4bf1-8c45-7cd238da53532´Z&amp;</span><br><span class="hljs-string">ubernetes.io/metadata.namedefaultz&#123;</span><br><span class="hljs-string">kube-apiserverUpdatev´FieldsV1:I</span><br><span class="hljs-string">G&#123;&quot;</span>f:metadata<span class="hljs-string">&quot;:&#123;&quot;</span>f:labels<span class="hljs-string">&quot;:&#123;&quot;</span>.<span class="hljs-string">&quot;:&#123;&#125;,&quot;</span>f:kubernetes.io/metadata.name<span class="hljs-string">&quot;:&#123;&#125;&#125;&#125;&#125; </span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">kubernetes </span><br><span class="hljs-string">Active&quot;</span><br><br><span class="hljs-comment">#查看calico的key</span><br>root@etcd01:~# <span class="hljs-attribute">ETCDCTL_API</span>=3 etcdctl <span class="hljs-built_in">get</span> /calico/ipam/v2/assignment/ipv4/block/172.20.122.128-26<br>/calico/ipam/v2/assignment/ipv4/block/172.20.122.128-26<br>&#123;<span class="hljs-string">&quot;cidr&quot;</span>:<span class="hljs-string">&quot;172.20.122.128/26&quot;</span>,<span class="hljs-string">&quot;affinity&quot;</span>:<span class="hljs-string">&quot;host:k8s-master02&quot;</span>,<span class="hljs-string">&quot;allocations&quot;</span>:[0,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>],<span class="hljs-string">&quot;unallocated&quot;</span>:[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63],<span class="hljs-string">&quot;attributes&quot;</span>:[&#123;<span class="hljs-string">&quot;handle_id&quot;</span>:<span class="hljs-string">&quot;ipip-tunnel-addr-k8s-master02&quot;</span>,<span class="hljs-string">&quot;secondary&quot;</span>:&#123;<span class="hljs-string">&quot;node&quot;</span>:<span class="hljs-string">&quot;k8s-master02&quot;</span>,<span class="hljs-string">&quot;type&quot;</span>:<span class="hljs-string">&quot;ipipTunnelAddress&quot;</span>&#125;&#125;],<span class="hljs-string">&quot;deleted&quot;</span>:false&#125;<br></code></pre></td></tr></table></figure><h3 id="查看所有calico的数据"><a href="#查看所有calico的数据" class="headerlink" title="查看所有calico的数据"></a>查看所有calico的数据</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">root@etcd01:~<span class="hljs-comment"># ETCDCTL_API=3 etcdctl get --keys-only --prefix /calico</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">122.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">135.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">32.128</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">58.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>assignment<span class="hljs-regexp">/ipv4/</span>block/<span class="hljs-number">172.20</span>.<span class="hljs-number">85.192</span>-<span class="hljs-number">26</span><br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-master01<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-master02<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node01<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node02<br><span class="hljs-regexp">/calico/i</span>pam<span class="hljs-regexp">/v2/</span>handle/ipip-tunnel-addr-k8s-node03<br>......<br></code></pre></td></tr></table></figure><h2 id="etcd备份与恢复"><a href="#etcd备份与恢复" class="headerlink" title="etcd备份与恢复"></a>etcd备份与恢复</h2><h3 id="etcd数据备份流程"><a href="#etcd数据备份流程" class="headerlink" title="etcd数据备份流程"></a>etcd数据备份流程</h3><blockquote><p> ETCD 不同的版本的 etcdctl 命令不一样，但大致差不多，本文备份使用 <code>napshot save</code> , 每次备份<code>一个节点</code>就行。</p></blockquote><p><code>命令备份</code>（k8s-master1 机器上备份）：</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ ETCDCTL_API=3 etcdctl --cacert=/opt/kubernetes/ssl/ca.pem --cert=/opt/kubernetes/ssl/server.pem --key=/opt/kubernetes/ssl/server-key.pem --endpoints=https://192.168.1.36:2379 snapshot save /data/etcd_backup_dir/etcd-snapshot-`date +%Y%m%d`.db<br></code></pre></td></tr></table></figure><p><code>备份脚本</code>（k8s-master1 机器上备份）：</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">#!/usr/bin/env bash<br><br>date;<br><br>CACERT=&quot;/opt/kubernetes/ssl/ca.pem&quot;<br>CERT=&quot;/opt/kubernetes/ssl/server.pem&quot;<br>EKY=&quot;/opt/kubernetes/ssl/server-key.pem&quot;<br>ENDPOINTS=&quot;192.168.1.36:2379&quot;<br><br>ETCDCTL_API=3 etcdctl \<br>--cacert=&quot;$&#123;CACERT&#125;&quot; --cert=&quot;$&#123;CERT&#125;&quot; --key=&quot;$&#123;EKY&#125;&quot; \<br>--endpoints=$&#123;ENDPOINTS&#125; \<br>snapshot save /data/etcd_backup_dir/etcd-snapshot-`date +%Y%m%d`.db<br><br># 备份保留30天<br>find /data/etcd_backup_dir/ -name *.db -mtime +30 -exec rm -f &#123;&#125; \;<br></code></pre></td></tr></table></figure><h3 id="etcd-数据恢复流程"><a href="#etcd-数据恢复流程" class="headerlink" title="etcd 数据恢复流程"></a>etcd 数据恢复流程</h3><p>当etcd集群宕机数量超过集群总节点数一半以上的时候（如总数为3台，宕机2台），就会导致集群宕机，后期需要重新恢复数据，则数据恢复流程如下：</p><ol><li>恢复服务器系统</li><li>重新部署etcd集群</li><li>停止kube-apiserver&#x2F;controler-manager&#x2F;scheduler&#x2F;kubelet&#x2F;kube-proxy</li><li>停止ETCD集群</li><li>各ETCD节点恢复同一备份数据</li><li>启动各节点并验证ETCD集群</li><li>启动kube-apiserver&#x2F;controler-manager&#x2F;scheduler&#x2F;kubelet&#x2F;kube-proxy</li><li>验证k8s master 状态及pod 数据</li></ol><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li>停止所有 Master 上 <code>kube-apiserver</code> 服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ systemctl stop kube-apiserver  <br><br># 确认 kube-apiserver 服务是否停止 <br>$ ps -ef | grep kube-apiserver<br></code></pre></td></tr></table></figure><ul><li>停止集群中所有 ETCD 服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ systemctl stop etcd<br></code></pre></td></tr></table></figure><ul><li>移除所有 ETCD 存储目录下数据</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ mv /var/lib/etcd/default.etcd /var/lib/etcd/default.etcd.bak<br></code></pre></td></tr></table></figure><ul><li>拷贝 ETCD 备份快照</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text"># 从 k8s-master1 机器上拷贝备份 <br>$ scp /data/etcd_backup_dir/etcd-snapshot-20191222.db root@k8s-master2:/data/etcd_backup_dir/ <br>$ scp /data/etcd_backup_dir/etcd-snapshot-20191222.db root@k8s-master3:/data/etcd_backup_dir/<br></code></pre></td></tr></table></figure><h4 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text"># k8s-master1 机器上操作<br>$ ETCDCTL_API=3 etcdctl snapshot restore /data/etcd_backup_dir/etcd-snapshot-20191222.db \<br>  --name etcd-0 \<br>  --initial-cluster &quot;etcd-0=https://192.168.1.36:2380,etcd-1=https://192.168.1.37:2380,etcd-2=https://192.168.1.38:2380&quot; \<br>  --initial-cluster-token etcd-cluster \<br>  --initial-advertise-peer-urls https://192.168.1.36:2380 \<br>  --data-dir=/var/lib/etcd/default.etcd<br>  <br># k8s-master2 机器上操作<br>$ ETCDCTL_API=3 etcdctl snapshot restore /data/etcd_backup_dir/etcd-snapshot-20191222.db \<br>  --name etcd-1 \<br>  --initial-cluster &quot;etcd-0=https://192.168.1.36:2380,etcd-1=https://192.168.1.37:2380,etcd-2=https://192.168.1.38:2380&quot;  \<br>  --initial-cluster-token etcd-cluster \<br>  --initial-advertise-peer-urls https://192.168.1.37:2380 \<br>  --data-dir=/var/lib/etcd/default.etcd<br>  <br># k8s-master3 机器上操作<br>$ ETCDCTL_API=3 etcdctl snapshot restore /data/etcd_backup_dir/etcd-snapshot-20191222.db \<br>  --name etcd-2 \<br>  --initial-cluster &quot;etcd-0=https://192.168.1.36:2380,etcd-1=https://192.168.1.37:2380,etcd-2=https://192.168.1.38:2380&quot;  \<br>  --initial-cluster-token etcd-cluster \<br>  --initial-advertise-peer-urls https://192.168.1.38:2380 \<br>  --data-dir=/var/lib/etcd/default.etcd<br></code></pre></td></tr></table></figure><p>上面三台 ETCD 都恢复完成后，依次登陆三台机器启动 ETCD</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ systemctl start etcd<br></code></pre></td></tr></table></figure><p>三台 ETCD 启动完成，检查 ETCD 集群状态</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ ETCDCTL_API=3 etcdctl --cacert=/opt/kubernetes/ssl/ca.pem --cert=/opt/kubernetes/ssl/server.pem --key=/opt/kubernetes/ssl/server-key.pem --endpoints=https://192.168.1.36:2379,https://192.168.1.37:2379,https://192.168.1.38:2379 endpoint health<br></code></pre></td></tr></table></figure><p>三台 ETCD 全部健康，分别到每台 Master 启动 kube-apiserver</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ systemctl start kube-apiserver<br></code></pre></td></tr></table></figure><p>检查 Kubernetes 集群是否恢复正常</p><figure class="highlight text"><table><tr><td class="code"><pre><code class="hljs text">$ kubectl get cs<br></code></pre></td></tr></table></figure><h3 id="kubeasz备份恢复"><a href="#kubeasz备份恢复" class="headerlink" title="kubeasz备份恢复"></a>kubeasz备份恢复</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./ezctl backup k8s-01<br>kubectl delete pod net-test1 -n default  <span class="hljs-comment"># 删除pod模拟数据丢失</span><br>./ezctl restore k8s-01  <span class="hljs-comment"># 尝试从备份中恢复pod</span><br></code></pre></td></tr></table></figure><h2 id="Velero-结合mino-实现k8s-业务数据备份与恢复"><a href="#Velero-结合mino-实现k8s-业务数据备份与恢复" class="headerlink" title="Velero 结合mino 实现k8s 业务数据备份与恢复"></a>Velero 结合mino 实现k8s 业务数据备份与恢复</h2><p>Velero 是一个云原生的灾难恢复和迁移工具，它本身也是开源的,采用Go语言编写，可以安全的备份、恢复和迁移 Kubernetes集群资源数据。</p><p>Velero 是西班牙语意思是帆船，非常符合Kubernetes社区的命名风格，Velero的开发公司Heptio，已被VMware收购。</p><p>Velero 支持标准的K8S集群，既可以是私有云平台也可以是公有云，除了灾备之外它还能做资源移转，支持把容器应用 从一个集群迁移到另一个集群。</p><p><img src="https://s2.loli.net/2022/05/13/vN6nTPK83OJewMd.png" alt="image-20220512142839572"></p><h3 id="minio-安装"><a href="#minio-安装" class="headerlink" title="minio 安装"></a>minio 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取镜像</span><br>[root@manager ~]<span class="hljs-comment"># docker pull minio/minio:latest</span><br>latest: Pulling from minio/minio<br>d46336f50433: Pull complete<br>be961ec68663: Pull complete<br>44173c602141: Pull complete<br>a9809a6a679b: Pull complete<br>df29d4a76971: Pull complete<br>2b5a8853d302: Pull complete<br>84f01ee8dfc1: Pull complete<br>Digest: sha256:d786220feef7d8fe0239d41b5d74501dc824f6e7dd0e5a05749c502fff225bf3<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> minio/minio:latest<br>docker.io/minio/minio:latest<br><br><span class="hljs-comment"># 创建数据目录</span><br>[root@manager ~]<span class="hljs-comment"># mkdir -pv /data/minio</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/data&quot;</span><br><span class="hljs-built_in">mkdir</span>: 已创建目录 <span class="hljs-string">&quot;/data/minio&quot;</span><br><br><span class="hljs-comment"># 创建minio容器,如果不指定,则默认用户名与密码为 minioadmin/minioadmin,可以通过环境变量自定义,如下:</span><br>[root@etcd-1 ~]<span class="hljs-comment"># docker run --name minio -p 9000:9000 -p 9999:9999 \</span><br>&gt; -d --restart=always \<br>&gt; -e <span class="hljs-string">&quot;MINIO_ROOT_USER=admin&quot;</span> \<br>&gt; -e <span class="hljs-string">&quot;MINIO_ROOT_PASSWORD=ddrbdgzy&quot;</span> \<br>&gt; -v /data/minio/data:/data \<br>&gt; minio/minio:latest server /data \<br>&gt; --console-address <span class="hljs-string">&#x27;0.0.0.0:9999&#x27;</span><br></code></pre></td></tr></table></figure><p>浏览器访问9999端口：</p><p><img src="https://s2.loli.net/2022/05/13/YV4om15QUNu89Ag.png" alt="image-20220512164607646"></p><p>使用创建容器时指定的用户名密码登录，并创建一个名为velerodata的bucket：</p><p><img src="https://s2.loli.net/2022/05/13/1rXgGoMKVnOU5cC.png" alt="image-20220512185752491"></p><h3 id="velero-安装"><a href="#velero-安装" class="headerlink" title="velero 安装"></a>velero 安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">配置velero认证环境：<br><span class="hljs-comment"># 工作目录：</span><br>[root@etcd-1 /]<span class="hljs-comment">#:~# mkdir  /data/velero -p</span><br><br><span class="hljs-comment"># 认证文件：</span><br>[root@etcd-1 velero]<span class="hljs-comment">#:/data/velero# vim velero-auth.txt </span><br>[default]<br>aws_access_key_id = admin<br>aws_secret_access_key = ddrbdgzy<br><br><span class="hljs-comment"># 准备user-csr文件：</span><br>root@k8s-master1:/data/velero<span class="hljs-comment"># vim awsuser-csr.json</span><br>&#123;<br>  <span class="hljs-string">&quot;CN&quot;</span>: <span class="hljs-string">&quot;awsuser&quot;</span>,<br>  <span class="hljs-string">&quot;hosts&quot;</span>: [],<br>  <span class="hljs-string">&quot;key&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;algo&quot;</span>: <span class="hljs-string">&quot;rsa&quot;</span>,<br>    <span class="hljs-string">&quot;size&quot;</span>: 2048<br>  &#125;,<br>  <span class="hljs-string">&quot;names&quot;</span>: [<br>    &#123;<br>      <span class="hljs-string">&quot;C&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;ST&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;L&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;O&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;OU&quot;</span>: <span class="hljs-string">&quot;System&quot;</span><br>    &#125;<br>  ]<br>&#125;<br><br><span class="hljs-comment"># 准备证书签发环境：</span><br>[root@etcd-1 velero]:/data/velero<span class="hljs-comment"># apt install golang-cfssl</span><br>https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl_1.6.1_linux_amd64 <br>https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssljson_1.6.1_linux_amd64 <br>https://github.com/cloudflare/cfssl/releases/download/v1.6.1/cfssl-certinfo_1.6.1_linux_amd64<br><br><span class="hljs-comment"># 执行证书签发</span><br>[root@etcd-1 velero]<span class="hljs-comment"># ./cfssl gencert -ca=/etc/kubernetes/ssl/ca.pem -ca-key=./ca-key.pem -config=./ca-config.json -profile=kubernetes ./awsuser-csr.json | ./cfssljson -bare awsuser</span><br></code></pre></td></tr></table></figure><p>签发完成后在当前目录有如下文件：</p><p><img src="https://s2.loli.net/2022/05/13/zD6IdlZpwAmCPQg.png" alt="image-20220512195444916"></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#分发证书到api-server证书路径：</span><br>[root@master ~]<span class="hljs-comment"># ll /etc/kubernetes/ssl/</span><br>总用量 32<br>-rw-r--r--. 1 root root 1679 4月  26 20:18 aggregator-proxy-key.pem<br>-rw-r--r--. 1 root root 1383 4月  26 20:18 aggregator-proxy.pem<br>-rw-r--r--. 1 root root 1679 4月  26 20:18 ca-key.pem<br>-rw-r--r--. 1 root root 1350 4月  26 20:18 ca.pem<br>-rw-r--r--. 1 root root 1675 4月  26 20:18 kubelet-key.pem<br>-rw-r--r--. 1 root root 1452 4月  26 20:18 kubelet.pem<br>-rw-r--r--. 1 root root 1675 4月  26 20:18 kubernetes-key.pem<br>-rw-r--r--. 1 root root 1610 4月  26 20:18 kubernetes.pem<br><br><span class="hljs-comment">#生成集群认证config文件：</span><br><span class="hljs-comment"># export KUBE_APISERVER=&quot;https://192.168.68.152:6443&quot;</span><br><span class="hljs-comment"># kubectl config set-cluster kubernetes \</span><br>--certificate-authority=/etc/kubernetes/ssl/ca.pem \<br>--embed-certs=<span class="hljs-literal">true</span> \<br>--server=<span class="hljs-variable">$&#123;KUBE_APISERVER&#125;</span> \<br>--kubeconfig=./awsuser.kubeconfig<br><br><span class="hljs-comment"># 查看生成的 awsuser.kubeconfig</span><br>[root@master ~]<span class="hljs-comment"># cat awsuser.kubeconfig</span><br>apiVersion: v1<br>clusters:<br>- cluster:<br>    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUR1RENDQXFDZ0F3SUJBZ0lVVGlOV1o4REJEZGFkRTNkQkRGNVAwdVlJMVJvd0RRWUpLb1pJaHZjTkFRRUwKQlFBd1lURUxNQWtHQTFVRUJoTUNRMDR4RVRBUEJnTlZCQWdUQ0VoaGJtZGFhRzkxTVFzd0NRWURWUVFIRXdKWQpVekVNTUFvR0ExVUVDaE1EYXpoek1ROHdEUVlEVlFRTEV3WlRlWE4wWlcweEV6QVJCZ05WQkFNVENtdDFZbVZ5CmJtVjBaWE13SUJjTk1qSXdOREkyTVRFeE9UQXdXaGdQTWpFeU1qQTBNREl4TVRFNU1EQmFNR0V4Q3pBSkJnTlYKQkFZVEFrTk9NUkV3RHdZRFZRUUlFd2hJWVc1bldtaHZkVEVMTUFrR0ExVUVCeE1DV0ZNeEREQUtCZ05WQkFvVApBMnM0Y3pFUE1BMEdBMVVFQ3hNR1UzbHpkR1Z0TVJNd0VRWURWUVFERXdwcmRXSmxjbTVsZEdWek1JSUJJakFOCkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW5ueGY1Ly9yemg4V2FmeEI5NVljQ3VBaHY3VTIKSUl2cVJOT2g4UmlGTVFHcDVzdHFOaXREcEZ0Rk5BbzhsanJjNjBIQWttdXpwSkRJOXVxdG1vU1NXOFB2Si9VeQo4dzJBbDhxa0c3alhncjF3V2MrUU1qTzhRV1BiRXAzM3djUGE4ckVpZ1hOTzRDckxUM0NKQ2xydk1KbWNFWDkwCjhTUjlKb01hbGtnaEFnNkdsTlVFMTZHZi84dkwzQmdjOWI0ZzV0VWswNWRTV0R4SG5aenRGVHgrZTlxSThYemsKVXUzenF3Wll1MHdwQlpPb3F3bzBqQnQrdnhhbWxOTGFJdG5TaytPcFVXRk8xVGpmS016K3lmeFc2TUg0UThhVgphb2x0N3ZsTkhuZlRUakw3R3VHaCthbmZ6N2hkRUxFbkNJblJkMGY1ellVV1FBWnRhSlRnV0R4QTFRSURBUUFCCm8yWXdaREFPQmdOVkhROEJBZjhFQkFNQ0FRWXdFZ1lEVlIwVEFRSC9CQWd3QmdFQi93SUJBakFkQmdOVkhRNEUKRmdRVWFxVFhmL3VMK3VvcHBBYWFsaTIyY3UvdTlBNHdId1lEVlIwakJCZ3dGb0FVYXFUWGYvdUwrdW9wcEFhYQpsaTIyY3UvdTlBNHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBRGpldVBLTmFESEhKd3VaWDNiMmNocDliWW5KCkZlbXp4K3JPRzVpckpoeWt6cHprMTZPelJIZlJjMGd4SFdjOC9jZFBBd1hQK2dFdWkzZ1lOdGpSS3lTV2RjNmcKUVJ6bGZlWkovWUpjdFFjWG9QTU1YNlYxS2dWS3IwMlh0QjJNR1FQd0VHR2RrQUp3ekh0RmRaRnRmQmQ3dEQ4NQo3SUNrZ20xM0d0STVmLzBLRXh2VEJKdlhCUWthcjRITEtYTndRc3piUW5yeE14ajdISlo5ZFlidnZDZjgvUkpPCkFvdXBYVFppcURNaXJENnJUVzNUWTdEb05iY2FtcVpKZk5tc2NGdWZJcVBkZGw1L2lHS3VDckJEZXBmMjRVU3QKM1I4TzJSNjFZbHowYkk3TXVhWUk3aHFtWmg5QmFQUFU2T3kxZ2dlMjdpczRaT2h1anBoVkZ6MW9nVk09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K<br>    server: https://192.168.68.152:6443<br>  name: kubernetes<br><span class="hljs-comment"># 后续信息缺失，需要继续生成加入用户的认证信息</span><br>contexts: null<br>current-context: <span class="hljs-string">&quot;&quot;</span><br>kind: Config<br>preferences: &#123;&#125;<br><span class="hljs-built_in">users</span>: null<br><br><span class="hljs-comment"># 设置客户端证书认证</span><br>[root@master ~]<span class="hljs-comment"># kubectl config set-credentials awsuser --client-certificate=/etc/kubernetes/ssl/awsuser.pem --client-key=/etc/kubernetes/ssl/awsuser-key.pem --embed-certs=true --kubeconfig=./awsuser.kubeconfig</span><br>User <span class="hljs-string">&quot;awsuser&quot;</span> <span class="hljs-built_in">set</span>.<br></code></pre></td></tr></table></figure><p>再次查看</p><p><img src="https://s2.loli.net/2022/05/13/HBEKUIO9bxYSigL.png" alt="image-20220512202610837"></p><p>可以看到用户公钥私钥已经加入</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#设置上下文参数:</span><br><span class="hljs-comment"># kubectl config set-context kubernetes \</span><br>--cluster=kubernetes \<br>--user=awsuser \<br>--namespace=velero-system \<br>--kubeconfig=./awsuser.kubeconfig<br><br><span class="hljs-comment">#设置默认上下文:</span><br><span class="hljs-comment">#kubectl config use-context kubernetes --kubeconfig=awsuser.kubeconfig</span><br></code></pre></td></tr></table></figure><p>可以看到上下文信息已经写入</p><p><img src="https://s2.loli.net/2022/05/13/OxTXUh2bA5m6ZFw.png" alt="image-20220512203235386"></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 执行velero server端安装：</span><br>velero --kubeconfig  ./awsuser.kubeconfig \<br>install \<br>    --provider aws \<br>    --plugins velero/velero-plugin-for-aws:v1.3.1 \<br>    --bucket velerodata  \<br>    --secret-file ./velero-auth.txt \<br>    --use-volume-snapshots=<span class="hljs-literal">false</span> \<br>--namespace velero-system \<br>--backup-location-config region=minio,s3ForcePathStyle=<span class="hljs-string">&quot;true&quot;</span>,s3Url=http://192.168.68.148:9000/<br></code></pre></td></tr></table></figure><p>可以看到velero已经启动</p><p><img src="https://s2.loli.net/2022/05/13/ovRQdty6xKDL3Ia.png" alt="image-20220512203837164"></p><p><img src="https://s2.loli.net/2022/05/13/q2fUDtQF7oCM6gx.png" alt="image-20220512203908533"></p><p>此时velero安装完成</p><h3 id="使用velero-minio-备份"><a href="#使用velero-minio-备份" class="headerlink" title="使用velero + minio 备份"></a>使用velero + minio 备份</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-comment">#验证安装：</span><br>root@k8s-master1:<span class="hljs-string">/data/velero</span><span class="hljs-comment"># kubectl  describe pod velero-6755cb8697-phfsr -n velero-system  </span><br><br>velero backup create magedu-n66-20220417  <span class="hljs-params">--include-namespaces</span> myserver<br><br><br>DATE=`date +%Y%m%d%H%M%S`<br>velero backup create myserver-ns-backup-$&#123;DATE&#125; \<br><span class="hljs-params">--include-namespaces</span> myserver \<br><span class="hljs-params">--kubeconfig=</span><span class="hljs-string">./awsuser.kubeconfig</span> \<br><span class="hljs-params">--namespace</span> velero-system<br><br>root@k8s-master1:<span class="hljs-string">/data/velero</span><span class="hljs-comment"># kubectl  get pod -n velero-system </span><br>NAME                  READY   STATUS    RESTARTS   AGE<br>velero-6755cb8697-phfsr   1/1     Running     0          5m45s<br><br>velero backup create myserver-ns-backup-2022041621 \<br><span class="hljs-params">--include-namespaces</span> myserver \<br><span class="hljs-params">--kubeconfig=</span><span class="hljs-string">./awsuser.kubeconfig</span> \<br><span class="hljs-params">--namespace</span> velero-system<br><br><br>velero restore create <span class="hljs-params">--from-backup</span> default-backup-20220416205931 <span class="hljs-params">--wait</span> <span class="hljs-params">--kubeconfig=</span><span class="hljs-string">./awsuser.kubeconfig</span> <span class="hljs-params">--namespace</span> velero-system<br><br>velero restore create <span class="hljs-params">--from-backup</span> myserver-ns-backup-20220417155913 <span class="hljs-params">--wait</span> \<br><span class="hljs-params">--kubeconfig=</span><span class="hljs-string">./awsuser.kubeconfig</span> \<br><span class="hljs-params">--namespace</span> velero-system<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/13/ZW6TrV8tgJ4sk3d.png" alt="image-20220512210852408"></p>]]></content>
    
    
    <summary type="html">Kubernetes组件etcd相关知识点总结，使用minio+velero方式备份etcd数据</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeasz安装k8s集群</title>
    <link href="http://www.qintianjun.top/2022/04/29/%E4%BD%BF%E7%94%A8kubeasz%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/"/>
    <id>http://www.qintianjun.top/2022/04/29/%E4%BD%BF%E7%94%A8kubeasz%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4/</id>
    <published>2022-04-29T11:02:21.000Z</published>
    <updated>2023-06-27T08:44:55.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用kubeasz安装k8s集群"><a href="#使用kubeasz安装k8s集群" class="headerlink" title="使用kubeasz安装k8s集群"></a>使用kubeasz安装k8s集群</h1><h2 id="1-节点规划"><a href="#1-节点规划" class="headerlink" title="1 节点规划"></a>1 节点规划</h2><p>因机器配置比较低所以采用精简配置，所有节点均为2c2g</p><table><thead><tr><th>角色</th><th>数量</th><th>描述</th></tr></thead><tbody><tr><td>etcd节点</td><td>1</td><td>注意etcd集群需要1,3,5,…奇数个节点，一般复用master节点</td></tr><tr><td>master节点</td><td>1</td><td>高可用集群至少2个master节点</td></tr><tr><td>node节点</td><td>2</td><td>运行应用负载的节点，可根据需要提升机器配置&#x2F;增加节点数</td></tr></tbody></table><p><img src="https://s2.loli.net/2022/04/29/eyx3C51ujXQrWAo.png" alt="image-20220425162300417"></p><p>生产环境可以参考</p><table><thead><tr><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>ansible * 2</td><td>k8s集群部署服务器，可以和其他服务器混用</td></tr><tr><td>k8s master * 3</td><td>k8s控制端，通过一个vip做主备做高可用</td></tr><tr><td>harbor * 2</td><td>高可用镜像服务器</td></tr><tr><td>etcd * 3</td><td>保存k8s集群数据的服务器</td></tr><tr><td>haproxy * 2</td><td>高可用etcd代理服务器</td></tr><tr><td>node节点 * (2 - N)</td><td>真正运行容器的服务器端，高可用环境至少两台</td></tr></tbody></table><h2 id="2-Linux-Kenel升级"><a href="#2-Linux-Kenel升级" class="headerlink" title="2 Linux Kenel升级"></a>2 Linux Kenel升级</h2><p>k8s,docker,cilium等很多功能、特性需要较新的linux内核支持，所以有必要在集群部署前对内核进行升级；CentOS7 和 Ubuntu16.04可以很方便的完成内核升级。</p><p>CentOS7</p><p>红帽企业版 Linux 仓库网站 <a href="https://www.elrepo.org,主要提供各种硬件驱动(显卡、网卡、声卡等)和内核升级相关资源;兼容/">https://www.elrepo.org，主要提供各种硬件驱动（显卡、网卡、声卡等）和内核升级相关资源；兼容</a> CentOS7 内核升级。如下按照网站提示载入elrepo公钥及最新elrepo版本，然后按步骤升级内核（以安装长期支持版本 kernel-lt 为例）</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 载入公钥</span><br><span class="hljs-attribute">rpm</span> --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.org<br><span class="hljs-comment"># 安装ELRepo</span><br><span class="hljs-attribute">rpm</span> -Uvh http://www.elrepo.org/elrepo-release-<span class="hljs-number">7</span>.<span class="hljs-number">0</span>-<span class="hljs-number">3</span>.el7.elrepo.noarch.rpm<br><span class="hljs-comment"># 载入elrepo-kernel元数据</span><br><span class="hljs-attribute">yum</span> --disablerepo=\* --enablerepo=elrepo-kernel repolist<br><span class="hljs-comment"># 查看可用的rpm包</span><br><span class="hljs-attribute">yum</span> --disablerepo=\* --enablerepo=elrepo-kernel list kernel*<br><span class="hljs-comment"># 安装长期支持版本的kernel</span><br><span class="hljs-attribute">yum</span> --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt.x86_64<br><span class="hljs-comment"># 删除旧版本工具包</span><br><span class="hljs-attribute">yum</span> remove kernel-tools-libs.x86_64 kernel-tools.x86_64 -y<br><span class="hljs-comment"># 安装新版本工具包</span><br><span class="hljs-attribute">yum</span> --disablerepo=\* --enablerepo=elrepo-kernel install -y kernel-lt-tools.x86_64<br><br><span class="hljs-comment">#查看默认启动顺序</span><br><span class="hljs-attribute">awk</span> -F\&#x27; &#x27;$<span class="hljs-number">1</span>==<span class="hljs-string">&quot;menuentry &quot;</span> &#123;print $<span class="hljs-number">2</span>&#125;&#x27; /etc/grub2.cfg  <br><span class="hljs-attribute">CentOS</span> Linux (<span class="hljs-number">4</span>.<span class="hljs-number">4</span>.<span class="hljs-number">183</span>-<span class="hljs-number">1</span>.el7.elrepo.x86_64) <span class="hljs-number">7</span> (Core)  <br><span class="hljs-attribute">CentOS</span> Linux (<span class="hljs-number">3</span>.<span class="hljs-number">10</span>.<span class="hljs-number">0</span>-<span class="hljs-number">327</span>.<span class="hljs-number">10</span>.<span class="hljs-number">1</span>.el7.x86_64) <span class="hljs-number">7</span> (Core)  <br><span class="hljs-attribute">CentOS</span> Linux (<span class="hljs-number">0</span>-rescue-c52097a1078c403da03b8eddeac5080b) <span class="hljs-number">7</span> (Core)<br><span class="hljs-comment">#默认启动的顺序是从0开始，新内核是从头插入（目前位置在0，而4.4.4的是在1），所以需要选择0。</span><br><span class="hljs-attribute">grub2</span>-set-default <span class="hljs-number">0</span>  <br><span class="hljs-comment">#重启并检查</span><br></code></pre></td></tr></table></figure><blockquote><p>Centos 7.9 查询到的第一个内核是拯救模式内核，所以应该选1作为默认启动项，注意不要选错了</p><p>[root@node-1 ~]# awk -F&#39; ‘$1&#x3D;&#x3D;”menuentry “ {print $2}’ &#x2F;etc&#x2F;grub2.cfg<br>CentOS Linux 7 Rescue f59f5a8d46be4d74b70ef1356f76733e (5.4.190-1.el7.elrepo.x86_64)<br>CentOS Linux (5.4.190-1.el7.elrepo.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-1160.62.1.el7.x86_64) 7 (Core)<br>CentOS Linux (3.10.0-1160.el7.x86_64) 7 (Core)<br>CentOS Linux (0-rescue-a8d0483a1b314a91ad7252d9baf67dcc) 7 (Core)</p></blockquote><h2 id="3-基础环境准备"><a href="#3-基础环境准备" class="headerlink" title="3 基础环境准备"></a>3 基础环境准备</h2><p>安装python</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">yum <span class="hljs-keyword">update</span><br># 安装<span class="hljs-keyword">python</span><br>yum install <span class="hljs-keyword">python</span> -<span class="hljs-keyword">y</span><br></code></pre></td></tr></table></figure><p>部署节点安装ansible</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-comment"># 注意pip 21.0以后不再支持python2和python3.5，需要如下安装</span><br><span class="hljs-comment"># To install pip for Python 2.7 install it from https://bootstrap.pypa.io/2.7/ :</span><br><span class="hljs-string">curl</span> -<span class="hljs-string">O</span> <span class="hljs-string">https</span>://<span class="hljs-string">bootstrap</span>.<span class="hljs-string">pypa</span>.<span class="hljs-string">io</span>/<span class="hljs-string">pip</span>/<span class="hljs-string">2</span>.<span class="hljs-string">7</span>/<span class="hljs-built_in">get-pip.py</span><br><span class="hljs-string">python</span> <span class="hljs-built_in">get-pip.py</span><br><span class="hljs-string">python</span> -<span class="hljs-string">m</span> <span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-built_in">--upgrade</span> <span class="hljs-string">&quot;pip &lt; 21.0&quot;</span><br> <br><span class="hljs-comment"># pip安装ansible(国内如果安装太慢可以直接用pip阿里云加速)</span><br><span class="hljs-string">pip</span> <span class="hljs-string">install</span> <span class="hljs-string">ansible</span> -<span class="hljs-string">i</span> <span class="hljs-string">https</span>://<span class="hljs-string">mirrors</span>.<span class="hljs-string">aliyun</span>.<span class="hljs-string">com</span>/<span class="hljs-string">pypi</span>/<span class="hljs-string">simple</span>/<br></code></pre></td></tr></table></figure><p>在ansible控制端配置免密码登录</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 更安全 Ed25519 算法</span><br>ssh-keygen -t ed25519 -N <span class="hljs-string">&#x27;&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/i</span>d_ed25519<br><span class="hljs-comment"># 或者传统 RSA 算法</span><br>ssh-keygen -t rsa -b <span class="hljs-number">2048</span> -N <span class="hljs-string">&#x27;&#x27;</span> -f ~<span class="hljs-regexp">/.ssh/i</span>d_rsa<br><br>ssh-copy-id <span class="hljs-variable">$IPs</span> <span class="hljs-comment">#$IPs为所有节点地址包括自身，按照提示输入yes 和root密码</span><br><br><span class="hljs-comment"># 为每个节点设置python软链接</span><br>ssh <span class="hljs-variable">$IPs</span> ln -s <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/python3 /u</span>sr<span class="hljs-regexp">/bin/</span>python<br></code></pre></td></tr></table></figure><blockquote><p>附：</p><p>分发公钥脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">目标主机列表</span><br>IP=&quot;&quot;<br>for node in $&#123;IP&#125;;do<br> sshpass -p 123456 ssh-copy-id $&#123;node&#125; -o StrictHostKeyChecking=no<br> if [ $? -eq 0 ];then<br>     echo &quot;$&#123;node&#125; 密钥copy完成&quot;<br> else<br>     echo &quot;$&#123;node&#125; 密钥copy失败&quot;<br> fi<br>done<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>同步docker证书脚本</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"> 同步docker证书脚本<br> ```shell<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">目标主机列表</span><br>IP=&quot;&quot;<br>for node in $&#123;IP&#125;;do<br>sshpass -p 123456 ssh-copy-id $&#123;node&#125; -o StrictHostKeyChecking=no<br>for node in $IP;<br>do<br>    sshpass -p ddrbdgzy ssh-copy-id $node -o StrictHostKeyChecking=no<br>    if [ $? -eq 0 ];then<br>        echo &quot;$node key copy complete&quot;<br>        echo &quot;prepare init...&quot;<br>        ssh $node &quot;mkdir /etc/docker/certs.d/harbor.qintianjun.local -pv&quot;<br>        echo &quot;create harbor cert directory complete!&quot;<br>        scp /etc/docker/certs.d/harbor.qintianjun.local/harbor-ca.crt 192.168.88.$node:/etc/docker/certs.d/harbor.qintianjun.local/harbor-ca.crt<br>        echo &#x27;copy harbor cert success!&#x27;<br>        scp -r /root/.docker  $node:/root/<br>        echo &#x27;copy harbor authentication complete!&#x27;<br>    else<br>        echo &quot;copy $node key failed!&quot;<br>    fi<br>done<br></code></pre></td></tr></table></figure></blockquote><h2 id="4-部署节点编排k8s安装"><a href="#4-部署节点编排k8s安装" class="headerlink" title="4 部署节点编排k8s安装"></a>4 部署节点编排k8s安装</h2><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 下载工具脚本ezdown，举例使用kubeasz版本3.0.0</span><br>export release=<span class="hljs-number">3.0</span>.<span class="hljs-number">0</span><br>wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/easzlab/</span>kubeasz<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/$&#123;release&#125;/</span>ezdown<br>chmod +x ./ezdown<br><span class="hljs-comment"># 使用工具脚本下载</span><br>./ezdown -D<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master kubeasz]# ./ezdown -D<br>2022-04-25 16:56:55 INFO Action begin: download_all<br>2022-04-25 16:56:55 INFO downloading docker binaries, version 19.03.14<br><span class="hljs-meta prompt_">  % </span><span class="language-bash">Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br>                                 Dload  Upload   Total   Spent    Left  Speed<br>100 59.5M  100 59.5M    0     0   726k      0  0:01:23  0:01:23 --:--:--  691k<br>Unit docker.service could not be found.<br>2022-04-25 16:58:23 DEBUG generate docker service file<br>2022-04-25 16:58:23 DEBUG generate docker config: /etc/docker/daemon.json<br>2022-04-25 16:58:23 DEBUG prepare register mirror for CN<br>2022-04-25 16:58:23 DEBUG turn off selinux in CentOS/Redhat<br>2022-04-25 16:58:23 INFO clean iptable rules<br>2022-04-25 16:58:23 DEBUG enable and start docker<br>Created symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /etc/systemd/system/docker.service.<br>2022-04-25 16:58:28 INFO downloading kubeasz: 3.0.0<br>2022-04-25 16:58:28 DEBUG  run a temporary container<br>Unable to find image &#x27;easzlab/kubeasz:3.0.0&#x27; locally<br>3.0.0: Pulling from easzlab/kubeasz<br>31603596830f: Pull complete<br>9d61d7ab563b: Pull complete<br>Digest: sha256:360b34a44abf290b778f328d98ba4cc4ce1d2eecc3b159f41cb5662e2bb36ab3<br>Status: Downloaded newer image for easzlab/kubeasz:3.0.0<br>73c15a2aff051a1f2c70bdd05d3c7ab004a5a320ded9c189284f80771a6ccca5<br>2022-04-25 16:59:27 DEBUG cp kubeasz code from the temporary container<br>2022-04-25 16:59:28 DEBUG stop&amp;remove temporary container<br>temp_easz<br>2022-04-25 16:59:28 INFO downloading kubernetes: v1.20.2 binaries<br>v1.20.2: Pulling from easzlab/kubeasz-k8s-bin<br>31603596830f: Already exists<br>10f46e710c09: Pull complete<br>Digest: sha256:30facff185abd42773b976e1138bc8ff9565daab93f2949b7b2ad2d95f1f9fbd<br>Status: Downloaded newer image for easzlab/kubeasz-k8s-bin:v1.20.2<br>docker.io/easzlab/kubeasz-k8s-bin:v1.20.2<br>2022-04-25 17:00:36 DEBUG run a temporary container<br>0ef119992b244be79ef21ae634c05d95dc7b5a762b4e0ef4fc00ac2d26320736<br>2022-04-25 17:00:37 DEBUG cp k8s binaries<br>2022-04-25 17:00:40 DEBUG stop&amp;remove temporary container<br>temp_k8s_bin<br>2022-04-25 17:00:40 INFO downloading extral binaries kubeasz-ext-bin:0.8.1<br>0.8.1: Pulling from easzlab/kubeasz-ext-bin<br>31603596830f: Already exists<br>f7e9399587c7: Pull complete<br>Digest: sha256:9b811cddce5a74cd150cca3dee088c3e6879c5178e1c35ddbedbc2b4b7a50a21<br>Status: Downloaded newer image for easzlab/kubeasz-ext-bin:0.8.1<br>docker.io/easzlab/kubeasz-ext-bin:0.8.1<br>2022-04-25 17:02:02 DEBUG run a temporary container<br>745e9a48176cb87c7e88dbbd2093e2e2e633aeb55a5085097ea08fbdfa474898<br>2022-04-25 17:02:02 DEBUG cp extral binaries<br>2022-04-25 17:02:04 DEBUG stop&amp;remove temporary container<br>temp_ext_bin<br>2022-04-25 17:02:04 INFO downloading offline images<br>v3.15.3: Pulling from calico/cni<br>1ff8efc68ede: Pull complete<br>dbf74493f8ac: Pull complete<br>6a02335af7ae: Pull complete<br>a9d90ecd95cb: Pull complete<br>269efe44f16b: Pull complete<br>d94997f3700d: Pull complete<br>8c7602656f2e: Pull complete<br>34fcbf8be9e7: Pull complete<br>Digest: sha256:519e5c74c3c801ee337ca49b95b47153e01fd02b7d2797c601aeda48dc6367ff<br>Status: Downloaded newer image for calico/cni:v3.15.3<br>docker.io/calico/cni:v3.15.3<br>v3.15.3: Pulling from calico/pod2daemon-flexvol<br>3fb48f9dffa9: Pull complete<br>a820112abeeb: Pull complete<br>10d8d066ec17: Pull complete<br>217b4fd6d612: Pull complete<br>06c30d5e085d: Pull complete<br>ca0fd3d60e05: Pull complete<br>a1c12287b32b: Pull complete<br>Digest: sha256:cec7a31b08ab5f9b1ed14053b91fd08be83f58ddba0577e9dabd8b150a51233f<br>Status: Downloaded newer image for calico/pod2daemon-flexvol:v3.15.3<br>docker.io/calico/pod2daemon-flexvol:v3.15.3<br>v3.15.3: Pulling from calico/kube-controllers<br>22d9887128f5: Pull complete<br>8824e2076f71: Pull complete<br>8b26373ef5b7: Pull complete<br>Digest: sha256:b88f0923b02090efcd13a2750da781622b6936df72d6c19885fcb2939647247b<br>Status: Downloaded newer image for calico/kube-controllers:v3.15.3<br>docker.io/calico/kube-controllers:v3.15.3<br>v3.15.3: Pulling from calico/node<br>0a63a759fe25: Pull complete<br>9d6c79b335fa: Pull complete<br>0c7b599aaa59: Pull complete<br>641ec2b3d585: Pull complete<br>682bbf5a5743: Pull complete<br>b7275bfed8bc: Pull complete<br>f9c5a243b960: Pull complete<br>eafb01686242: Pull complete<br>3a8a3042bbc5: Pull complete<br>e4fa8d582cf2: Pull complete<br>6ff16d4df057: Pull complete<br>8b0afdee71db: Pull complete<br>aa370255d6dd: Pull complete<br>Digest: sha256:1d674438fd05bd63162d9c7b732d51ed201ee7f6331458074e3639f4437e34b1<br>Status: Downloaded newer image for calico/node:v3.15.3<br>docker.io/calico/node:v3.15.3<br>1.7.1: Pulling from coredns/coredns<br>c6568d217a00: Pull complete<br>f68152bf8486: Pull complete<br>Digest: sha256:4a6e0769130686518325b21b0c1d0688b54e7c79244d48e1b15634e98e40c6ef<br>Status: Downloaded newer image for coredns/coredns:1.7.1<br>docker.io/coredns/coredns:1.7.1<br>1.16.0: Pulling from easzlab/k8s-dns-node-cache<br>e5a8c1ed6cf1: Pull complete<br>f275df365c13: Pull complete<br>6a2802bb94f4: Pull complete<br>cb3853c52da4: Pull complete<br>db342cbe4b1c: Pull complete<br>9a72dd095a53: Pull complete<br>645d255d3285: Pull complete<br>932f414bd1e7: Pull complete<br>Digest: sha256:248c29f0f3106a6f55f7c686521ae6f85966f3c9eed10bf8b68cdc6049b46196<br>Status: Downloaded newer image for easzlab/k8s-dns-node-cache:1.16.0<br>docker.io/easzlab/k8s-dns-node-cache:1.16.0<br>v2.1.0: Pulling from kubernetesui/dashboard<br>a16055c5c364: Pull complete<br>035b5e7ced27: Pull complete<br>Digest: sha256:7f80b5ba141bead69c4fee8661464857af300d7d7ed0274cf7beecedc00322e6<br>Status: Downloaded newer image for kubernetesui/dashboard:v2.1.0<br>docker.io/kubernetesui/dashboard:v2.1.0<br>v0.13.0-amd64: Pulling from easzlab/flannel<br>df20fa9351a1: Pull complete<br>0fbfec51320e: Pull complete<br>734a6c0a0c59: Pull complete<br>41745b624d5f: Pull complete<br>feca50c5fe05: Pull complete<br>071b96dd834b: Pull complete<br>5154c0aa012a: Pull complete<br>Digest: sha256:34860ea294a018d392e61936f19a7862d5e92039d196cac9176da14b2bbd0fe3<br>Status: Downloaded newer image for easzlab/flannel:v0.13.0-amd64<br>docker.io/easzlab/flannel:v0.13.0-amd64<br>v1.0.6: Pulling from kubernetesui/metrics-scraper<br>47a33a630fb7: Pull complete<br>62498b3018cb: Pull complete<br>Digest: sha256:1f977343873ed0e2efd4916a6b2f3075f310ff6fe42ee098f54fc58aa7a28ab7<br>Status: Downloaded newer image for kubernetesui/metrics-scraper:v1.0.6<br>docker.io/kubernetesui/metrics-scraper:v1.0.6<br>v0.3.6: Pulling from mirrorgooglecontainers/metrics-server-amd64<br>e8d8785a314f: Pull complete<br>b2f4b24bed0d: Pull complete<br>Digest: sha256:c9c4e95068b51d6b33a9dccc61875df07dc650abbf4ac1a19d58b4628f89288b<br>Status: Downloaded newer image for mirrorgooglecontainers/metrics-server-amd64:v0.3.6<br>docker.io/mirrorgooglecontainers/metrics-server-amd64:v0.3.6<br>3.2: Pulling from easzlab/pause-amd64<br>c74f8866df09: Pull complete<br>Digest: sha256:4a1c4b21597c1b4415bdbecb28a3296c6b5e23ca4f9feeb599860a1dac6a0108<br>Status: Downloaded newer image for easzlab/pause-amd64:3.2<br>docker.io/easzlab/pause-amd64:3.2<br>3.0.0: Pulling from easzlab/kubeasz<br>Digest: sha256:360b34a44abf290b778f328d98ba4cc4ce1d2eecc3b159f41cb5662e2bb36ab3<br>Status: Image is up to date for easzlab/kubeasz:3.0.0<br>docker.io/easzlab/kubeasz:3.0.0<br>2022-04-25 17:08:59 INFO Action successed: download_all<br></code></pre></td></tr></table></figure><p>上述脚本运行成功后，所有文件（kubeasz代码、二进制、离线镜像）均已整理好放入目录<code>/etc/kubeasz</code></p><figure class="highlight tap"><table><tr><td class="code"><pre><code class="hljs tap">[root@master kubeasz]<span class="hljs-comment"># docker images</span><br>REPOSITORY                                    TAG                 IMAGE ID            CREATED             SIZE<br>easzlab/kubeasz                               3.0.0               38e4e73f8189       <span class="hljs-number"> 14 </span>months ago       350MB<br>easzlab/kubeasz-k8s-bin                       v1.20.2             753cf45d89f6       <span class="hljs-number"> 15 </span>months ago       473MB<br>easzlab/kubeasz-ext-bin                       0.8.1               e5471f766400       <span class="hljs-number"> 16 </span>months ago       373MB<br>kubernetesui/dashboard                        v2.1.0              9a07b5b4bfac       <span class="hljs-number"> 16 </span>months ago       226MB<br>easzlab/k8s-dns-node-cache                    1.16.0              90f9d984ec9a       <span class="hljs-number"> 17 </span>months ago       121MB<br>kubernetesui/metrics-scraper                  v1.0.6              48d79e554db6       <span class="hljs-number"> 18 </span>months ago       34.5MB<br>easzlab/flannel                               v0.13.0-amd64       e708f4bb69e3       <span class="hljs-number"> 18 </span>months ago       57.2MB<br>coredns/coredns                               1.7.1               0a6cfbf7b0b6       <span class="hljs-number"> 19 </span>months ago       42.4MB<br>calico/node                                   v3.15.3             d45bf977dfbf       <span class="hljs-number"> 19 </span>months ago       262MB<br>calico/pod2daemon-flexvol                     v3.15.3             963564fb95ed       <span class="hljs-number"> 19 </span>months ago       22.8MB<br>calico/cni                                    v3.15.3             ca5564c06ea0       <span class="hljs-number"> 19 </span>months ago       110MB<br>calico/kube-controllers                       v3.15.3             0cb2976cbb7d       <span class="hljs-number"> 19 </span>months ago       52.9MB<br>easzlab/pause-amd64                           3.2                 80d28bedfe5d       <span class="hljs-number"> 2 </span>years ago         683kB<br>mirrorgooglecontainers/metrics-server-amd64   v0.3.6              9dd718864ce6       <span class="hljs-number"> 2 </span>years ago         39.9MB<br>[root@master kubeasz]<span class="hljs-comment"># ll /etc/kubeasz/</span><br>总用量 80<br>-rw-rw-r--. <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 10284 </span>2月  <span class="hljs-number"> 1 </span>2021 ansible.cfg<br>drwxr-xr-x. <span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 4096 </span>4月 <span class="hljs-number"> 25 </span>17:02 bin<br>drwxrwxr-x. <span class="hljs-number"> 8 </span>root root   <span class="hljs-number"> 92 </span>2月  <span class="hljs-number"> 2 </span>2021 docs<br>drwxr-xr-x. <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>4月 <span class="hljs-number"> 25 </span>17:08 down<br>drwxrwxr-x. <span class="hljs-number"> 2 </span>root root   <span class="hljs-number"> 70 </span>2月  <span class="hljs-number"> 2 </span>2021 example<br>-rwxrwxr-x. <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 22436 </span>2月  <span class="hljs-number"> 1 </span>2021 ezctl<br>-rwxrwxr-x. <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 13660 </span>2月  <span class="hljs-number"> 1 </span>2021 ezdown<br>drwxrwxr-x.<span class="hljs-number"> 10 </span>root root  <span class="hljs-number"> 145 </span>2月  <span class="hljs-number"> 2 </span>2021 manifests<br>drwxrwxr-x. <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>2月  <span class="hljs-number"> 2 </span>2021 pics<br>drwxrwxr-x. <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>2月  <span class="hljs-number"> 2 </span>2021 playbooks<br>-rw-rw-r--. <span class="hljs-number"> 1 </span>root root <span class="hljs-number"> 5640 </span>2月  <span class="hljs-number"> 1 </span>2021 README.md<br>drwxrwxr-x.<span class="hljs-number"> 22 </span>root root <span class="hljs-number"> 4096 </span>2月  <span class="hljs-number"> 2 </span>2021 roles<br>drwxrwxr-x. <span class="hljs-number"> 2 </span>root root   <span class="hljs-number"> 48 </span>2月  <span class="hljs-number"> 2 </span>2021 tools<br></code></pre></td></tr></table></figure><p>创建集群配置实例</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ezctl new k8s-01<br>2021-01-19 10:48:23 DEBUG generate custom cluster files in /etc/kubeasz/clusters/k8s-01<br>2021-01-19 10:48:23 DEBUG set version of common plugins<br>2021-01-19 10:48:23 DEBUG cluster k8s-01: files successfully created.<br>2021-01-19 10:48:23 INFO next steps 1: to config &#x27;/etc/kubeasz/clusters/k8s-01/hosts&#x27;<br>2021-01-19 10:48:23 INFO next steps 2: to config &#x27;/etc/kubeasz/clusters/k8s-01/config.yml&#x27;<br></code></pre></td></tr></table></figure><p>然后根据提示配置’&#x2F;etc&#x2F;kubeasz&#x2F;clusters&#x2F;k8s-01&#x2F;hosts’ 和 ‘&#x2F;etc&#x2F;kubeasz&#x2F;clusters&#x2F;k8s-01&#x2F;config.yml’：根据前面节点规划修改hosts 文件和其他集群层面的主要配置选项；其他集群组件等配置项可以在config.yml 文件中修改。</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager kubeasz]# cat clusters/k8s-01/config.yml<br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">prepare</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选离线安装系统软件包 (offline|online)</span><br>INSTALL_SOURCE: &quot;online&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">可选进行系统安全加固 github.com/dev-sec/ansible-collection-hardening</span><br>OS_HARDEN: false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置时间源服务器【重要：集群内机器时间必须同步】</span><br>ntp_servers:<br>  - &quot;ntp1.aliyun.com&quot;<br>  - &quot;time1.cloud.tencent.com&quot;<br>  - &quot;0.cn.pool.ntp.org&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置允许内部时间同步的网络段，比如<span class="hljs-string">&quot;10.0.0.0/8&quot;</span>，默认全部允许</span><br>local_network: &quot;0.0.0.0/0&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:deploy</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">default: ca will expire <span class="hljs-keyword">in</span> 100 years</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">default: certs issued by the ca will expire <span class="hljs-keyword">in</span> 50 years</span><br>CA_EXPIRY: &quot;876000h&quot;<br>CERT_EXPIRY: &quot;438000h&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">kubeconfig 配置参数</span><br>CLUSTER_NAME: &quot;cluster1&quot;<br>CONTEXT_NAME: &quot;context-&#123;&#123; CLUSTER_NAME &#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:runtime [containerd,docker]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- containerd</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[.]启用容器仓库镜像</span><br>ENABLE_MIRROR_REGISTRY: true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[containerd]基础容器镜像</span><br>SANDBOX_IMAGE: &quot;easzlab/pause-amd64:3.2&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[containerd]容器持久化存储目录</span><br>CONTAINERD_STORAGE_DIR: &quot;/var/lib/containerd&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- docker</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[docker]容器存储目录</span><br>DOCKER_STORAGE_DIR: &quot;/var/lib/docker&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[docker]开启Restful API</span><br>ENABLE_REMOTE_API: false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[docker]信任的HTTP仓库</span><br>INSECURE_REG: &#x27;[&quot;127.0.0.1/8&quot;, &quot;harbor.magedu.local&quot;]&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:kube-master</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">k8s 集群 master 节点证书配置，可以添加多个ip和域名（比如增加公网ip和域名）</span><br>MASTER_CERT_HOSTS:<br>  - &quot;192.168.68.152&quot;<br><span class="hljs-meta prompt_">  #</span><span class="language-bash">- <span class="hljs-string">&quot;k8s.test.io&quot;</span></span><br><span class="hljs-meta prompt_">  #</span><span class="language-bash">- <span class="hljs-string">&quot;www.test.com&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node 节点上 pod 网段掩码长度（决定每个节点最多能分配的pod ip地址）</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果flannel 使用 --kube-subnet-mgr 参数，那么它将读取该设置为每个节点分配pod网段</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">https://github.com/coreos/flannel/issues/847</span><br>NODE_CIDR_LEN: 24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:kube-node</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Kubelet 根目录</span><br>KUBELET_ROOT_DIR: &quot;/var/lib/kubelet&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">node节点最大pod 数</span><br>MAX_PODS: 110<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置为kube组件（kubelet,kube-proxy,dockerd等）预留的资源量</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">数值设置详见templates/kubelet-config.yaml.j2</span><br>KUBE_RESERVED_ENABLED: &quot;yes&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">k8s 官方不建议草率开启 system-reserved, 除非你基于长期监控，了解系统的资源占用状况；</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">并且随着系统运行时间，需要适当增加资源预留，数值设置详见templates/kubelet-config.yaml.j2</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">系统预留设置基于 4c/8g 虚机，最小化安装系统服务，如果使用高性能物理机可以适当增加预留</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">另外，集群安装时候apiserver等资源占用会短时较大，建议至少预留1g内存</span><br>SYS_RESERVED_ENABLED: &quot;no&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">haproxy balance mode</span><br>BALANCE_ALG: &quot;roundrobin&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:network [flannel,calico,cilium,kube-ovn,kube-router]</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- flannel</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[flannel]设置flannel 后端<span class="hljs-string">&quot;host-gw&quot;</span>,<span class="hljs-string">&quot;vxlan&quot;</span>等</span><br>FLANNEL_BACKEND: &quot;vxlan&quot;<br>DIRECT_ROUTING: false<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[flannel] flanneld_image: <span class="hljs-string">&quot;quay.io/coreos/flannel:v0.10.0-amd64&quot;</span></span><br>flannelVer: &quot;v0.13.0-amd64&quot;<br>flanneld_image: &quot;easzlab/flannel:&#123;&#123; flannelVer &#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[flannel]离线镜像tar包</span><br>flannel_offline: &quot;flannel_&#123;&#123; flannelVer &#125;&#125;.tar&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- calico</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]设置 CALICO_IPV4POOL_IPIP=“off”,可以提高网络性能，条件限制详见 docs/setup/calico.md</span><br>CALICO_IPV4POOL_IPIP: &quot;Always&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]设置 calico-node使用的host IP，bgp邻居通过该地址建立，可手工指定也可以自动发现</span><br>IP_AUTODETECTION_METHOD: &quot;can-reach=&#123;&#123; groups[&#x27;kube_master&#x27;][0] &#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]设置calico 网络 backend: brid, vxlan, none</span><br>CALICO_NETWORKING_BACKEND: &quot;brid&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]更新支持calico 版本: [v3.3.x] [v3.4.x] [v3.8.x] [v3.15.x]</span><br>calico_ver: &quot;v3.15.3&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]calico 主版本</span><br>calico_ver_main: &quot;&#123;&#123; calico_ver.split(&#x27;.&#x27;)[0] &#125;&#125;.&#123;&#123; calico_ver.split(&#x27;.&#x27;)[1] &#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[calico]离线镜像tar包</span><br>calico_offline: &quot;calico_&#123;&#123; calico_ver &#125;&#125;.tar&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- cilium</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[cilium]CILIUM_ETCD_OPERATOR 创建的 etcd 集群节点数 1,3,5,7...</span><br>ETCD_CLUSTER_SIZE: 1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[cilium]镜像版本</span><br>cilium_ver: &quot;v1.4.1&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[cilium]离线镜像tar包</span><br>cilium_offline: &quot;cilium_&#123;&#123; cilium_ver &#125;&#125;.tar&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- kube-ovn</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-ovn]选择 OVN DB and OVN Control Plane 节点，默认为第一个master节点</span><br>OVN_DB_NODE: &quot;&#123;&#123; groups[&#x27;kube_master&#x27;][0] &#125;&#125;&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-ovn]离线镜像tar包</span><br>kube_ovn_ver: &quot;v1.5.3&quot;<br>kube_ovn_offline: &quot;kube_ovn_&#123;&#123; kube_ovn_ver &#125;&#125;.tar&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">------------------------------------------- kube-router</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-router]公有云上存在限制，一般需要始终开启 ipinip；自有环境可以设置为 <span class="hljs-string">&quot;subnet&quot;</span></span><br>OVERLAY_TYPE: &quot;full&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-router]NetworkPolicy 支持开关</span><br>FIREWALL_ENABLE: &quot;true&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-router]kube-router 镜像版本</span><br>kube_router_ver: &quot;v0.3.1&quot;<br>busybox_ver: &quot;1.28.4&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[kube-router]kube-router 离线镜像tar包</span><br>kuberouter_offline: &quot;kube-router_&#123;&#123; kube_router_ver &#125;&#125;.tar&quot;<br>busybox_offline: &quot;busybox_&#123;&#123; busybox_ver &#125;&#125;.tar&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:cluster-addon</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">coredns 自动安装</span><br>dns_install: &quot;no&quot;<br>corednsVer: &quot;1.7.1&quot;<br>ENABLE_LOCAL_DNS_CACHE: false<br>dnsNodeCacheVer: &quot;1.16.0&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置 <span class="hljs-built_in">local</span> dns cache 地址</span><br>LOCAL_DNS_CACHE: &quot;169.254.20.10&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">metric server 自动安装</span><br>metricsserver_install: &quot;no&quot;<br>metricsVer: &quot;v0.3.6&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">dashboard 自动安装</span><br>dashboard_install: &quot;yes&quot;<br>dashboardVer: &quot;v2.1.0&quot;<br>dashboardMetricsScraperVer: &quot;v1.0.6&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ingress 自动安装</span><br>ingress_install: &quot;no&quot;<br>ingress_backend: &quot;traefik&quot;<br>traefik_chart_ver: &quot;9.12.3&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">prometheus 自动安装</span><br>prom_install: &quot;no&quot;<br>prom_namespace: &quot;monitor&quot;<br>prom_chart_ver: &quot;12.10.6&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">role:harbor</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment">###########################</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">harbor version，完整版本号</span><br>HARBOR_VER: &quot;v1.9.4&quot;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@manager k8s-01]# cat hosts<br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&#x27;etcd&#x27;</span> cluster should have odd member(s) (1,3,5,...)</span><br>[etcd]<br>192.168.68.148<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">master node(s)</span><br>[kube_master]<br>192.168.68.152<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">work node(s)</span><br>[kube_node]<br>192.168.68.149<br>192.168.68.150<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[optional] harbor server, a private docker registry</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&#x27;NEW_INSTALL&#x27;</span>: <span class="hljs-string">&#x27;yes&#x27;</span> to install a harbor server; <span class="hljs-string">&#x27;no&#x27;</span> to integrate with existed one</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">&#x27;SELF_SIGNED_CERT&#x27;</span>: <span class="hljs-string">&#x27;no&#x27;</span> you need put files of certificates named harbor.pem and harbor-key.pem <span class="hljs-keyword">in</span> directory <span class="hljs-string">&#x27;down&#x27;</span></span><br>[harbor]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.68.8 HARBOR_DOMAIN=<span class="hljs-string">&quot;harbor.yourdomain.com&quot;</span> NEW_INSTALL=no SELF_SIGNED_CERT=<span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[optional] loadbalance <span class="hljs-keyword">for</span> accessing k8s from outside</span><br>[ex_lb]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.68.6 LB_ROLE=backup EX_APISERVER_VIP=192.168.68.250 EX_APISERVER_PORT=8443</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.68.7 LB_ROLE=master EX_APISERVER_VIP=192.168.68.250 EX_APISERVER_PORT=8443</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">[optional] ntp server <span class="hljs-keyword">for</span> the cluster</span><br>[chrony]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">192.168.68.1</span><br><br>[all:vars]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">--------- Main Variables ---------------</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Cluster container-runtime supported: docker, containerd</span><br>CONTAINER_RUNTIME=&quot;docker&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Network plugins supported: calico, flannel, kube-router, cilium, kube-ovn</span><br>CLUSTER_NETWORK=&quot;flannel&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Service proxy mode of kube-proxy: <span class="hljs-string">&#x27;iptables&#x27;</span> or <span class="hljs-string">&#x27;ipvs&#x27;</span></span><br>PROXY_MODE=&quot;ipvs&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">K8S Service CIDR, not overlap with node(host) networking</span><br>SERVICE_CIDR=&quot;10.68.0.0/16&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Cluster CIDR (Pod CIDR), not overlap with node(host) networking</span><br>CLUSTER_CIDR=&quot;172.20.0.0/16&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">NodePort Range</span><br>NODE_PORT_RANGE=&quot;30000-32767&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Cluster DNS Domain</span><br>CLUSTER_DNS_DOMAIN=&quot;cluster.local.&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-------- Additional Variables (don<span class="hljs-string">&#x27;t change the default value right now) ---</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Binaries Directory</span></span><br>bin_dir=&quot;/opt/kube/bin&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Deploy Directory (kubeasz workspace)</span></span><br>base_dir=&quot;/etc/kubeasz&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">Directory for a specific cluster</span></span><br>cluster_dir=&quot;&#123;&#123; base_dir &#125;&#125;/clusters/k8s-01&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-string">CA and other components cert/key Directory</span></span><br>ca_dir=&quot;/etc/kubernetes/ssl&quot;<br></code></pre></td></tr></table></figure><p>开始安装 如果你对集群安装流程不熟悉，请阅读项目首页 <strong>安装步骤</strong> 讲解后分步安装，并对 <strong>每步都进行验证</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">一键安装</span><br>ezctl setup k8s-01 all<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">或者分步安装，具体使用 ezctl <span class="hljs-built_in">help</span> setup 查看分步安装帮助信息</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 01  <span class="hljs-comment"># 安装准备</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 02  <span class="hljs-comment"># 安装etcd</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 03  <span class="hljs-comment"># 安装容器运行时</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 04  <span class="hljs-comment"># 安装master</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 05  <span class="hljs-comment"># 安装node节点</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 06  <span class="hljs-comment"># 安装集群网络</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">ezctl setup k8s-01 06  <span class="hljs-comment"># 安装集群插件</span></span><br></code></pre></td></tr></table></figure><p>验证安装：</p><p>master上运行</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl get node<br>NAME             STATUS                     ROLES    AGE     VERSION<br>192.168.68.149   Ready                      node     2m35s   v1.20.2<br>192.168.68.150   Ready                      node     2m35s   v1.20.2<br>192.168.68.152   Ready,SchedulingDisabled   master   4m17s   v1.20.2<br></code></pre></td></tr></table></figure><p>可以看到node-1，node-2, master 正在运行</p><p>创建pod用于测试：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">[root@master ~]# kubectl <span class="hljs-built_in">run</span> net-test1 <span class="hljs-attribute">--image</span>=centos:7.9.2009 sleep 36000<br>pod/net-test1 created<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/29/HKjXEBC3bcfrvwn.png" alt="image-20220427144607918"></p><p>可以看到pod状态从<code>ContainerCreating</code>变成了<code>Running</code>，依法同样创建net-test2：</p><p><img src="https://s2.loli.net/2022/04/29/wfAZIucatzGJlPK.png" alt="image-20220427144744408"></p><p>可以看到node1的ip：172.20.1.2,  node2：172.20.2.2, 根据node信息，可以看到两个pod分别运行在两个node上，进入<code>net-test1</code>容器内部ping<code>net-test2</code>，可以连通:</p><p><img src="https://s2.loli.net/2022/04/29/PntMg2foWIBj8uw.png" alt="image-20220427145334903"></p><p>ping外网ip地址，可以连通：</p><p><img src="https://s2.loli.net/2022/04/29/h4Su3oPlV9grYft.png" alt="image-20220427145424739"></p><p>此时ping外网域名是不通的，需要安装coreDNS用于解析域名</p><h2 id="5-安装coreDNS"><a href="#5-安装coreDNS" class="headerlink" title="5 安装coreDNS"></a>5 安装coreDNS</h2><p>目前k8s主要使用coreDNS组件用于解析k8s集群中service name 所对应得到ip地址</p><p>相关文档： <a href="https://coredns.io/">官网</a></p><p>github: <a href="https://github.com/coredns/coredns">地址</a></p><p>此处使用k8s的yaml文件方式安装，下载k8s软件包：<a href="https://dl.k8s.io/v1.23.5/kubernetes.tar.gz">https://dl.k8s.io/v1.23.5/kubernetes.tar.gz</a></p><p>下载完成后解压</p><p><img src="https://s2.loli.net/2022/04/29/enpKEgDRjTGNWtS.png" alt="image-20220427190117913"></p><p>进入<code>kubernetes-1.23.5/cluster/addons/dns/coredns</code>目录</p><p><img src="/%E4%BD%BF%E7%94%A8kubeasz%E5%AE%89%E8%A3%85k8s%E9%9B%86%E7%BE%A4.assets/image-20220427190217669.png" alt="image-20220427190217669"></p><p>可以看到coreDNS对应yaml文件，复制<code>coredns.yaml.base</code>为<code>coredns.yaml</code>打开</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@manager</span> <span class="hljs-string">coredns</span>]<span class="hljs-comment"># cat coredns.yaml</span><br><span class="hljs-comment"># __MACHINE_GENERATED_WARNING__</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpoints</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">services</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pods</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">namespaces</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">nodes</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">get</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">discovery.k8s.io</span><br>  <span class="hljs-attr">resources:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">endpointslices</span><br>  <span class="hljs-attr">verbs:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">watch</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">EnsureExists</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:coredns</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ConfigMap</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>      <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">EnsureExists</span><br><span class="hljs-attr">data:</span><br>  <span class="hljs-attr">Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-string">    .:53 &#123;</span><br><span class="hljs-string">        errors</span><br><span class="hljs-string">        health &#123;</span><br><span class="hljs-string">            lameduck 5s</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        ready</span><br><span class="hljs-string">        kubernetes magedu.local in-addr.arpa ip6.arpa &#123; # 此处修改为和kubeasz中hosts文件一致</span><br><span class="hljs-string">            pods insecure</span><br><span class="hljs-string">            fallthrough in-addr.arpa ip6.arpa</span><br><span class="hljs-string">            ttl 30</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        prometheus :9153</span><br><span class="hljs-string">        forward . /etc/resolv.conf &#123;</span><br><span class="hljs-string">            max_concurrent 1000</span><br><span class="hljs-string">        &#125;</span><br><span class="hljs-string">        cache 30</span><br><span class="hljs-string">        loop</span><br><span class="hljs-string">        reload</span><br><span class="hljs-string">        loadbalance</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string"></span><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-comment"># replicas: not specified here:</span><br>  <span class="hljs-comment"># 1. In order to make Addon Manager do not reconcile this replicas parameter.</span><br>  <span class="hljs-comment"># 2. Default is 1.</span><br>  <span class="hljs-comment"># 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">securityContext:</span><br>        <span class="hljs-attr">seccompProfile:</span><br>          <span class="hljs-attr">type:</span> <span class="hljs-string">RuntimeDefault</span><br>      <span class="hljs-attr">priorityClassName:</span> <span class="hljs-string">system-cluster-critical</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">coredns</span><br>      <span class="hljs-attr">affinity:</span><br>        <span class="hljs-attr">podAntiAffinity:</span><br>          <span class="hljs-attr">preferredDuringSchedulingIgnoredDuringExecution:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">weight:</span> <span class="hljs-number">100</span><br>            <span class="hljs-attr">podAffinityTerm:</span><br>              <span class="hljs-attr">labelSelector:</span><br>                <span class="hljs-attr">matchExpressions:</span><br>                  <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">k8s-app</span><br>                    <span class="hljs-attr">operator:</span> <span class="hljs-string">In</span><br>                    <span class="hljs-attr">values:</span> [<span class="hljs-string">&quot;kube-dns&quot;</span>]<br>              <span class="hljs-attr">topologyKey:</span> <span class="hljs-string">kubernetes.io/hostname</span><br>      <span class="hljs-attr">tolerations:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;CriticalAddonsOnly&quot;</span><br>          <span class="hljs-attr">operator:</span> <span class="hljs-string">&quot;Exists&quot;</span><br>      <span class="hljs-attr">nodeSelector:</span><br>        <span class="hljs-attr">kubernetes.io/os:</span> <span class="hljs-string">linux</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">k8s.gcr.io/coredns/coredns:v1.8.6</span><br>        <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">IfNotPresent</span><br>        <span class="hljs-attr">resources:</span><br>          <span class="hljs-attr">limits:</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">200Mi</span>  <span class="hljs-comment"># 修改limits为200毫核，具体参数视配置情况而定</span><br>          <span class="hljs-attr">requests:</span><br>            <span class="hljs-attr">cpu:</span> <span class="hljs-string">100m</span><br>            <span class="hljs-attr">memory:</span> <span class="hljs-string">70Mi</span><br>        <span class="hljs-attr">args:</span> [ <span class="hljs-string">&quot;-conf&quot;</span>, <span class="hljs-string">&quot;/etc/coredns/Corefile&quot;</span> ]<br>        <span class="hljs-attr">volumeMounts:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">mountPath:</span> <span class="hljs-string">/etc/coredns</span><br>          <span class="hljs-attr">readOnly:</span> <span class="hljs-literal">true</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">53</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">9153</span><br>          <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>          <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>        <span class="hljs-attr">livenessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/health</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>          <span class="hljs-attr">initialDelaySeconds:</span> <span class="hljs-number">60</span><br>          <span class="hljs-attr">timeoutSeconds:</span> <span class="hljs-number">5</span><br>          <span class="hljs-attr">successThreshold:</span> <span class="hljs-number">1</span><br>          <span class="hljs-attr">failureThreshold:</span> <span class="hljs-number">5</span><br>        <span class="hljs-attr">readinessProbe:</span><br>          <span class="hljs-attr">httpGet:</span><br>            <span class="hljs-attr">path:</span> <span class="hljs-string">/ready</span><br>            <span class="hljs-attr">port:</span> <span class="hljs-number">8181</span><br>            <span class="hljs-attr">scheme:</span> <span class="hljs-string">HTTP</span><br>        <span class="hljs-attr">securityContext:</span><br>          <span class="hljs-attr">allowPrivilegeEscalation:</span> <span class="hljs-literal">false</span><br>          <span class="hljs-attr">capabilities:</span><br>            <span class="hljs-attr">add:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">NET_BIND_SERVICE</span><br>            <span class="hljs-attr">drop:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">all</span><br>          <span class="hljs-attr">readOnlyRootFilesystem:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">dnsPolicy:</span> <span class="hljs-string">Default</span><br>      <span class="hljs-attr">volumes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config-volume</span><br>          <span class="hljs-attr">configMap:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">coredns</span><br>            <span class="hljs-attr">items:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">key:</span> <span class="hljs-string">Corefile</span><br>              <span class="hljs-attr">path:</span> <span class="hljs-string">Corefile</span><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kube-system</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">prometheus.io/port:</span> <span class="hljs-string">&quot;9153&quot;</span><br>    <span class="hljs-attr">prometheus.io/scrape:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>    <span class="hljs-attr">kubernetes.io/cluster-service:</span> <span class="hljs-string">&quot;true&quot;</span><br>    <span class="hljs-attr">addonmanager.kubernetes.io/mode:</span> <span class="hljs-string">Reconcile</span><br>    <span class="hljs-attr">kubernetes.io/name:</span> <span class="hljs-string">&quot;CoreDNS&quot;</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">k8s-app:</span> <span class="hljs-string">kube-dns</span><br>  <span class="hljs-attr">clusterIP:</span> <span class="hljs-number">10.68</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>  <span class="hljs-comment"># 修改为与pod中一致，不知道可以进容器查看/etc/resolv.conf中nameserver参数</span><br>  <span class="hljs-attr">ports:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">UDP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">dns-tcp</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">53</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">metrics</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9153</span><br>    <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br></code></pre></td></tr></table></figure><p>修改完成用使用<code>kube apply</code>命令创建对应容器</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl apply -f coredns.yaml<br>serviceaccount/coredns created<br>clusterrole.rbac.authorization.k8s.io/system:coredns created<br>clusterrolebinding.rbac.authorization.k8s.io/system:coredns created<br>configmap/coredns created<br>deployment.apps/coredns created<br>service/kube-dns created<br></code></pre></td></tr></table></figure><p>查看pod发现对应pod被创建：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@master ~]# kubectl get pod -A<br>NAMESPACE     NAME                          READY   STATUS    RESTARTS   AGE<br>default       net-test1                     1/1     Running   0          22h<br>default       net-test2                     1/1     Running   0          22h<br>kube-system   coredns-58b74b57c7-58plj      1/1     Running   0          57s  # coreDNS<br>kube-system   kube-flannel-ds-amd64-mncm2   1/1     Running   0          22h<br>kube-system   kube-flannel-ds-amd64-rchqv   1/1     Running   0          22h<br>kube-system   kube-flannel-ds-amd64-zgcm6   1/1     Running   0          22h<br></code></pre></td></tr></table></figure><p>再次在容器内部ping外网域名，此时外网域名可以正确解析</p><p><img src="https://s2.loli.net/2022/04/29/ywIFjoN5G8dUClP.png" alt="image-20220427192132613"></p><p><strong>coreDNS</strong> 属于关键服务，宕机后整个集群域名无法解析，所以一般情况下会启用多个副本保证高可用：</p><p><img src="https://s2.loli.net/2022/04/29/o3JD6KwPmfnb4Er.png" alt="image-20220427192805185"></p><p>多副本<strong>coreDNS</strong>最简单多部署方式就是修改对应yaml文件的<code>replicas</code>副本数定义，再重新<code>kubectl apply</code>使其生效,</p><p><code>kubectl edit deployment coredns -n kube-system</code>:</p><p><img src="https://s2.loli.net/2022/04/29/BaShZ8oOmyPtsVj.png" alt="image-20220427195338929"></p><p><img src="https://s2.loli.net/2022/04/29/lM7WECcgix6v9pU.png" alt="image-20220427195423142"></p><p>可以看到<code>coreDNS</code>副本数变为了2</p><p><img src="https://s2.loli.net/2022/04/29/xXuPn5avEskohQW.png" alt="image-20220427195612493"></p><h3 id="yaml-部分参数解释"><a href="#yaml-部分参数解释" class="headerlink" title="yaml 部分参数解释"></a>yaml 部分参数解释</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">69 data:</span><br><span class="hljs-attr">70   Corefile:</span> <span class="hljs-string">|</span><br><span class="hljs-number">71</span>     <span class="hljs-string">.:53</span> &#123;<br><span class="hljs-number">72</span>         <span class="hljs-string">errors</span><br><span class="hljs-number">73</span>         <span class="hljs-string">health</span> &#123;<br><span class="hljs-number">74</span>             <span class="hljs-string">lameduck</span> <span class="hljs-string">5s</span><br><span class="hljs-number">75</span>         &#125;<br><span class="hljs-number">76</span>         <span class="hljs-string">ready</span><br><span class="hljs-number">77</span>         <span class="hljs-string">kubernetes</span> <span class="hljs-string">magedu.local</span> <span class="hljs-string">in-addr.arpa</span> <span class="hljs-string">ip6.arpa</span> &#123;<br><span class="hljs-number">78</span>             <span class="hljs-string">pods</span> <span class="hljs-string">insecure</span><br><span class="hljs-number">79</span>             <span class="hljs-string">fallthrough</span> <span class="hljs-string">in-addr.arpa</span> <span class="hljs-string">ip6.arpa</span><br><span class="hljs-number">80</span>             <span class="hljs-string">ttl</span> <span class="hljs-number">30</span><br><span class="hljs-number">81</span>         &#125;<br><span class="hljs-number">82</span>         <span class="hljs-string">prometheus</span> <span class="hljs-string">:9153</span><br><span class="hljs-number">83</span>         <span class="hljs-string">forward</span> <span class="hljs-string">.</span> <span class="hljs-string">/etc/resolv.conf</span> &#123;<br><span class="hljs-number">84</span>             <span class="hljs-string">max_concurrent</span> <span class="hljs-number">1000</span><br><span class="hljs-number">85</span>         &#125;<br><span class="hljs-number">86</span>         <span class="hljs-string">cache</span> <span class="hljs-number">30</span><br><span class="hljs-number">87</span>         <span class="hljs-string">loop</span><br><span class="hljs-number">88</span>         <span class="hljs-string">reload</span><br><span class="hljs-number">89</span>         <span class="hljs-string">loadbalance</span><br><span class="hljs-number">90</span>     &#125;<br></code></pre></td></tr></table></figure><ul><li><p><a href="https://coredns.io/plugins/errors/">errors</a>：错误记录到标准输出。</p></li><li><p><a href="https://coredns.io/plugins/health/">health</a>：在 <a href="http://localhost:8080/health">http://localhost:8080/health</a> 处提供 CoreDNS 的健康报告。</p></li><li><p><a href="https://coredns.io/plugins/ready/">ready</a>：在端口 8181 上提供的一个 HTTP 末端，当所有能够 表达自身就绪的插件都已就绪时，在此末端返回 200 OK。</p></li><li><p><a href="https://coredns.io/plugins/kubernetes/">kubernetes</a>：CoreDNS 将基于 Kubernetes 的服务和 Pod 的 IP 答复 DNS 查询。你可以在 CoreDNS 网站阅读<a href="https://coredns.io/plugins/kubernetes/">更多细节</a>。 你可以使用 <code>ttl</code> 来定制响应的 TTL。默认值是 5 秒钟。TTL 的最小值可以是 0 秒钟， 最大值为 3600 秒。将 TTL 设置为 0 可以禁止对 DNS 记录进行缓存。</p><p><code>pods insecure</code> 选项是为了与 kube-dns 向后兼容。你可以使用 <code>pods verified</code> 选项，该选项使得 仅在相同名称空间中存在具有匹配 IP 的 Pod 时才返回 A 记录。如果你不使用 Pod 记录，则可以使用 <code>pods disabled</code> 选项。</p></li><li><p><a href="https://coredns.io/plugins/forward/">forward</a>: 不在 Kubernetes 集群域内的任何查询都将转发到 预定义的解析器 (&#x2F;etc&#x2F;resolv.conf).</p></li><li><p><a href="https://coredns.io/plugins/cache/">cache</a>：启用前端缓存。</p></li><li><p><a href="https://coredns.io/plugins/loop/">loop</a>：检测到简单的转发环，如果发现死循环，则中止 CoreDNS 进程。</p></li><li><p><a href="https://coredns.io/plugins/reload">reload</a>：允许自动重新加载已更改的 Corefile。 编辑 ConfigMap 配置后，请等待两分钟，以使更改生效。</p></li><li><p><a href="https://coredns.io/plugins/loadbalance">loadbalance</a>：这是一个轮转式 DNS 负载均衡器， 它在应答中随机分配 A、AAAA 和 MX 记录的顺序。</p></li></ul><p>你可以通过修改 ConfigMap 来更改默认的 CoreDNS 行为, <a href="https://kubernetes.io/zh/docs/tasks/administer-cluster/dns-custom-nameservers/">参考</a>。</p><p>你可以追加本地权威DNS服务器，当本地有类似内网环境的特殊域名coreDNS无法解析的时候，可以把请求转发到本地权威DNS, 在上述配置后追加：</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">myserver.<span class="hljs-title class_">online</span> <span class="hljs-punctuation">&#123;</span><br>    forward . <span class="hljs-number">172.16</span><span class="hljs-number">.16</span><span class="hljs-number">.16</span>:<span class="hljs-number">53</span>  <span class="hljs-meta"># 本地DNS的ip地址，例如bind9</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="6-安装Dashboard"><a href="#6-安装Dashboard" class="headerlink" title="6 安装Dashboard"></a>6 安装Dashboard</h2><p>使用官网提供的yaml文件安装，参考：<a href="https://github.com/kubernetes/dashboard/releases">https://github.com/kubernetes/dashboard/releases</a></p><p>Apply 方式安装后查看相关状态：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@master ~]# kubectl <span class="hljs-built_in">get</span> pod -A -<span class="hljs-keyword">o</span> wide<br>NAMESPACE              NAME                                         READY   STATUS    RESTARTS   AGE     IP               NODE             NOMINATED NODE   READINESS GATES<br>default                net-test1                                    <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">2</span>d20h   <span class="hljs-number">172.20</span>.<span class="hljs-number">1.8</span>       <span class="hljs-number">192.168</span>.<span class="hljs-number">68.150</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>default                net-test2                                    <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">2</span>d20h   <span class="hljs-number">172.20</span>.<span class="hljs-number">2.8</span>       <span class="hljs-number">192.168</span>.<span class="hljs-number">68.149</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kube-<span class="hljs-built_in">system</span>            coredns-<span class="hljs-number">58</span>b74b57c7-kv4lw                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">121</span><span class="hljs-keyword">m</span>    <span class="hljs-number">172.20</span>.<span class="hljs-number">1.9</span>       <span class="hljs-number">192.168</span>.<span class="hljs-number">68.150</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kube-<span class="hljs-built_in">system</span>            kube-flannel-<span class="hljs-keyword">ds</span>-amd64-mncm2                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">2</span>d20h   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.152</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.152</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kube-<span class="hljs-built_in">system</span>            kube-flannel-<span class="hljs-keyword">ds</span>-amd64-rchqv                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">2</span>d20h   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.150</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.150</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kube-<span class="hljs-built_in">system</span>            kube-flannel-<span class="hljs-keyword">ds</span>-amd64-zgcm6                  <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">2</span>          <span class="hljs-number">2</span>d20h   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.149</span>   <span class="hljs-number">192.168</span>.<span class="hljs-number">68.149</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kubernetes-dashboard   dashboard-metrics-scraper-<span class="hljs-number">5</span>b8896d7fc-<span class="hljs-number">2</span>frf2   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">107</span>s    <span class="hljs-number">172.20</span>.<span class="hljs-number">1.10</span>      <span class="hljs-number">192.168</span>.<span class="hljs-number">68.150</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>kubernetes-dashboard   kubernetes-dashboard-<span class="hljs-number">897</span>c7599f-tvscb         <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">107</span>s    <span class="hljs-number">172.20</span>.<span class="hljs-number">2.9</span>       <span class="hljs-number">192.168</span>.<span class="hljs-number">68.149</span>   <span class="hljs-symbol">&lt;none&gt;</span>           <span class="hljs-symbol">&lt;none&gt;</span><br>[root@master ~]# kubectl <span class="hljs-built_in">get</span> svc -A<br>NAMESPACE              NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE<br>default                kubernetes                  ClusterIP   <span class="hljs-number">10.68</span>.<span class="hljs-number">0.1</span>       <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">443</span>/TCP                  <span class="hljs-number">2</span>d21h<br>kube-<span class="hljs-built_in">system</span>            kube-dns                    ClusterIP   <span class="hljs-number">10.68</span>.<span class="hljs-number">0.2</span>       <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">53</span>/UDP,<span class="hljs-number">53</span>/TCP,<span class="hljs-number">9153</span>/TCP   <span class="hljs-number">46</span>h<br>kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   <span class="hljs-number">10.68</span>.<span class="hljs-number">203.30</span>    <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">8000</span>/TCP                 <span class="hljs-number">3</span>m56s<br>kubernetes-dashboard   kubernetes-dashboard        ClusterIP   <span class="hljs-number">10.68</span>.<span class="hljs-number">183.139</span>   <span class="hljs-symbol">&lt;none&gt;</span>        <span class="hljs-number">443</span>/TCP                  <span class="hljs-number">3</span>m57s<br></code></pre></td></tr></table></figure><p>可以看到dashboard容器监听443端口，但并未对外暴露端口，需要修改yaml文件将端口暴露出来以便用户访问，打开yaml文件定位到如下位置：</p><p><img src="https://s2.loli.net/2022/04/29/r2IRyQcJwGXsgOa.png" alt="image-20220429185550382"></p><p>增加<code>type: NodePort</code>, 增加<code>nodePort: 30004</code>，将端口暴露到物理机30004端口，此时查看svc</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get svc -A -o wide</span><br>NAMESPACE              NAME                        TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                  AGE     SELECTOR<br>default                kubernetes                  ClusterIP   10.68.0.1       &lt;none&gt;        443/TCP                  2d21h   &lt;none&gt;<br>kube-system            kube-dns                    ClusterIP   10.68.0.2       &lt;none&gt;        53/UDP,53/TCP,9153/TCP   46h     k8s-app=kube-dns<br>kubernetes-dashboard   dashboard-metrics-scraper   ClusterIP   10.68.203.30    &lt;none&gt;        8000/TCP                 8m8s    k8s-app=dashboard-metrics-scraper<br>kubernetes-dashboard   kubernetes-dashboard        NodePort    10.68.183.139   &lt;none&gt;        443:30004/TCP            8m9s    k8s-app=kubernetes-dashboard<br></code></pre></td></tr></table></figure><p>端口已经暴露，此时使用任意node ip:30004即可在浏览器打开dashboard:</p><p>![image-20220429174206542](data:image&#x2F;svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1466 577"></svg>)</p><p>需要创建用户及配置权限才能登录，创建使用yaml文件形式：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br><br><span class="hljs-meta">---</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">admin-user</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">kubernetes-dashboard</span><br></code></pre></td></tr></table></figure><p>将文件保存为<code>admin-user.yaml</code>,使用<code>kubectl apply -f </code>方式创建</p><p><img src="https://s2.loli.net/2022/04/29/1KAaXt3yGo27N6E.png" alt="image-20220429180913245"></p><p>查看对应<code>admin-user</code>对应token，k8s默认会针对刚才我们在yaml文件创建的用户生成一个token，使用<code>kubectl get secrets -n kubernetes-dashboard</code>命令查看token名称</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get secrets -n kubernetes-dashboard</span><br>[root@master ~]<span class="hljs-comment"># kubectl get secrets -n kubernetes-dashboard</span><br>NAME                               TYPE                                  DATA   AGE<br>admin-user-token-nfjt2  <span class="hljs-comment"># 刚创建的用户           kubernetes.io/service-account-token   3      113s</span><br>default-token-swd6q                kubernetes.io/service-account-token   3      38m<br>kubernetes-dashboard-certs         Opaque                                0      38m<br>kubernetes-dashboard-csrf          Opaque                                1      38m<br>kubernetes-dashboard-key-holder    Opaque                                2      38m<br>kubernetes-dashboard-token-crghv   kubernetes.io/service-account-token   3      38m<br></code></pre></td></tr></table></figure><p>可以看到对应token名称为<code>admin-user-token-nfjt2</code>, 使用<code>kubectl describe secrets TOKENNAME -n kubernetes-dashboard</code>查看具体值：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl describe secrets admin-user-token-nfjt2 -n kubernetes-dashboard</span><br>Name:         admin-user-token-nfjt2<br>Namespace:    kubernetes-dashboard<br>Labels:       &lt;none&gt;<br>Annotations:  kubernetes.io/service-account.name: admin-user<br>              kubernetes.io/service-account.uid: 9ae3bcc6-3aec-4314-b6ba-203e7400fa0a<br><br>Type:  kubernetes.io/service-account-token<br><br>Data<br>====<br>token:      eyJhbGciOiJSUzI1NiIsImtpZCI6IjdqUC10Ql90bTBTbzNSU0RmTmM1UGg3YUhmOUhsWG1sYWZhc2NzVGJiWEUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLW5manQyIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI5YWUzYmNjNi0zYWVjLTQzMTQtYjZiYS0yMDNlNzQwMGZhMGEiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.ZO6Frkr1kQPA0nZ13ucnQOBQ03rnkjPwD8Ziag7XxY0G6GNiueLnyJKvCfy0WU7oknFYbuBwbx-3GrJ0qaq_sepTgVAnNPch14gZjnByIxOgQ-pDOxJFnW3o4o2fyF5SzyKhcG-VT35S4CTklDfohWrvpSAdxO7pAhFlp5nTa9qR5p3ktjO00zJSQEj97MUvvJWbCyXfdLui6p2cHD5leOTSmSqvF8QT6Miifo8L39r2jKfa39ShJ0na1WP_EUML-ilf0H_JIVBO_EjQyx_fPRxSPYVKc3ldotjRh76git6Alb4zGkCCsyKPP6xSHfLUiANTRtnCoplMcOGVWzRh-g<br>ca.crt:     1350 bytes<br>namespace:  20 bytes<br></code></pre></td></tr></table></figure><p>使用返回token登录dashboard</p><p><img src="https://s2.loli.net/2022/04/29/se1UzLyHa4orQV8.png" alt="image-20220429182343970"></p><p>至此k8s关键组件安装完成。</p>]]></content>
    
    
    <summary type="html">K8s环境部署及安装</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>K8s环境部署及安装（kubeadm方式）</title>
    <link href="http://www.qintianjun.top/2022/04/16/K8s%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%AE%89%E8%A3%85/"/>
    <id>http://www.qintianjun.top/2022/04/16/K8s%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%E5%8F%8A%E5%AE%89%E8%A3%85/</id>
    <published>2022-04-16T14:57:11.000Z</published>
    <updated>2023-02-24T08:07:26.823Z</updated>
    
    <content type="html"><![CDATA[<h1 id="K8s环境部署及安装（kubeadm方式）"><a href="#K8s环境部署及安装（kubeadm方式）" class="headerlink" title="K8s环境部署及安装（kubeadm方式）"></a>K8s环境部署及安装（kubeadm方式）</h1><h2 id="1-CentOS-安装及初始化"><a href="#1-CentOS-安装及初始化" class="headerlink" title="1 CentOS 安装及初始化"></a>1 CentOS 安装及初始化</h2><h3 id="1-1-切换阿里源"><a href="#1-1-切换阿里源" class="headerlink" title="1.1 切换阿里源"></a>1.1 切换阿里源</h3><p>以CentOS-7.9-minimal为例：</p><ol><li>备份</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup<br></code></pre></td></tr></table></figure><ol start="2"><li>安装wget</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y wget<br></code></pre></td></tr></table></figure><ol start="3"><li>下载新的 CentOS-Base.repo 到 &#x2F;etc&#x2F;yum.repos.d&#x2F;</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br></code></pre></td></tr></table></figure><ol start="4"><li>运行 yum makecache 生成缓存</li><li>其他</li></ol><p>​非阿里云ECS用户会出现 Couldn’t resolve host ‘mirrors.cloud.aliyuncs.com’ 信息，不影响使用。用户也可自行修改相关配置: eg:</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sed -i -e &#x27;/mirrors.cloud.aliyuncs.com/d&#x27; -e &#x27;/mirrors.aliyuncs.com/d&#x27; /etc/yum.repos.d/CentOS-Base.repo<br></code></pre></td></tr></table></figure><h3 id="1-2-切换epel源"><a href="#1-2-切换epel源" class="headerlink" title="1.2 切换epel源"></a>1.2 切换epel源</h3><ol><li>备份(如有配置其他epel源)</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup<br>mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup<br></code></pre></td></tr></table></figure><ol start="2"><li>下载新repo 到&#x2F;etc&#x2F;yum.repos.d&#x2F;</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<br></code></pre></td></tr></table></figure><h3 id="1-3-安装常用命令"><a href="#1-3-安装常用命令" class="headerlink" title="1.3 安装常用命令"></a>1.3 安装常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y vim wget pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop gcc<br></code></pre></td></tr></table></figure><h3 id="1-4-安装docker-ce"><a href="#1-4-安装docker-ce" class="headerlink" title="1.4 安装docker-ce"></a>1.4 安装docker-ce</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # docker阿里源<br>yum install -y docker-ce docker-ce-cli containerd.io<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动并设为开机自启</span><br>systemctl start docker<br>systemctl enble docker<br></code></pre></td></tr></table></figure><h3 id="1-5-k8s高可用集群环境规划信息："><a href="#1-5-k8s高可用集群环境规划信息：" class="headerlink" title="1.5 k8s高可用集群环境规划信息："></a>1.5 k8s高可用集群环境规划信息：</h3><p>按照实际环境需求，进行规划与部署响应单master或者多master高可用k8s运行环境</p><h4 id="1-5-1-单master环境"><a href="#1-5-1-单master环境" class="headerlink" title="1.5.1 单master环境"></a>1.5.1 单master环境</h4><p><img src="https://s2.loli.net/2022/04/16/sx38BlWQHg9IAUF.png" alt="image-20220412142415985"></p><p> 个人电脑配置不高的，可以部署一个最小化的环境</p><ul><li>master节点一台：1CPU，2G内存，50G硬盘</li><li>etcd1台，1CPU，1G内存，50G硬盘</li><li>node节点两台：2CPU，2G内存，50G硬盘</li></ul><h4 id="1-5-2-多master环境"><a href="#1-5-2-多master环境" class="headerlink" title="1.5.2 多master环境"></a>1.5.2 多master环境</h4><p><img src="https://s2.loli.net/2022/04/16/JVuMpinschfTCbv.png" alt="image-20220412104337524"></p><table><thead><tr><th>类型</th><th>备注</th></tr></thead><tbody><tr><td>ansible * 2</td><td>k8s集群部署服务器，可以和其他服务器混用</td></tr><tr><td>k8s master * 3</td><td>k8s控制端，通过一个vip做主备做高可用</td></tr><tr><td>harbor * 2</td><td>高可用镜像服务器</td></tr><tr><td>etcd * 3</td><td>保存k8s集群数据的服务器</td></tr><tr><td>haproxy * 2</td><td>高可用etcd代理服务器</td></tr><tr><td>node节点 * (2 - N)</td><td>真正运行容器的服务器端，高可用环境至少两台</td></tr></tbody></table><h2 id="2-haproxy及-keepalived-高可用集群安装"><a href="#2-haproxy及-keepalived-高可用集群安装" class="headerlink" title="2 haproxy及 keepalived 高可用集群安装"></a>2 haproxy及 keepalived 高可用集群安装</h2><p>在生产环境中 haproxy 广泛用于四层和七层的反向负载，haproxy 则通过 VRRP 技术实现虚拟 IP 高可用从而实现 haproxy 的高可用，本文将侧重于介绍 keepalived 方面的知识及相关配置介绍，haproxy 只用于测试 web 代理，具体如下：</p><h3 id="2-1-安装haproxy"><a href="#2-1-安装haproxy" class="headerlink" title="2.1 安装haproxy"></a>2.1 安装haproxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 soft]<span class="hljs-comment"># wget https://www.haproxy.org/download/2.5/src/haproxy-2.5.5.tar.gz</span><br>[root@ha1 soft]<span class="hljs-comment"># less INSTALL # 安装相关说明信息</span><br>[root@ha1 soft]<span class="hljs-comment"># make TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1  PREFIX=/usr/local/haproxy</span><br>[root@ha1 soft]<span class="hljs-comment"># make install PREFIX=/usr/local/haproxy</span><br></code></pre></td></tr></table></figure><p>创建配置文件目录</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># mkdir -p /usr/local/haproxy/conf</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># mkdir -p /etc/haproxy/</span><br></code></pre></td></tr></table></figure><p>从配置文件模版复制配置文件并添加配置文件软连接</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># cp examples/option-http_proxy.cfg /usr/local/haproxy/conf/haproxy.cfg</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># ln -s /usr/local/haproxy/conf/haproxy.cfg /etc/haproxy/haproxy.cfg</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># ln -s /usr/local/haproxy/sbin/haproxy /usr/sbin/haproxy</span><br></code></pre></td></tr></table></figure><p>拷贝错误页面，并添加目录软连接（HTTP 模式选配）</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># cp -r examples/errorfiles /usr/local/haproxy/</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># ln -s /usr/local/haproxy/errorfiles /etc/haproxy/errorfiles</span><br></code></pre></td></tr></table></figure><p>拷贝开机启动文件，并赋予可执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># cp examples/haproxy.init /etc/init.d/haproxy</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># chmod +x /etc/init.d/haproxy</span><br></code></pre></td></tr></table></figure><p>添加 haproxy 用户组和用户, 创建 chroot 运行的路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@localhost haproxy]<span class="hljs-comment"># groupadd haproxy</span><br>[root@localhost haproxy]<span class="hljs-comment"># useradd -g haproxy haproxy</span><br>[root@localhost haproxy]<span class="hljs-comment"># mkdir /usr/share/haproxy</span><br></code></pre></td></tr></table></figure><p>设置 HAProxy 开机启动 (可选)</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># chkconfig --add haproxy</span><br>[root@ha1 haproxy-2.5.5]<span class="hljs-comment"># chkconfig haproxy on</span><br></code></pre></td></tr></table></figure><p>编辑haproxy.cfg内容：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 init.d]<span class="hljs-comment"># cat /etc/haproxy/haproxy.cfg</span><br>global<br><span class="hljs-built_in">chroot</span> /usr/local/haproxy<br><span class="hljs-comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span><br>user haproxy<br>group haproxy<br>daemon<br><span class="hljs-comment">#nbproc 1</span><br>pidfile /var/run/haproxy.pid<br><span class="hljs-built_in">log</span> 127.0.0.1 local3 info<br><br>defaults<br>option http-keep-alive<br>option  forwardfor<br>mode http<br><span class="hljs-built_in">timeout</span> connect 300000ms<br><span class="hljs-built_in">timeout</span> client  300000ms<br><span class="hljs-built_in">timeout</span> server  300000ms<br><br>listen stats<br> mode http<br> <span class="hljs-built_in">bind</span> 192.168.200.16:9999 <span class="hljs-comment"># 与keepalive的vip地址一致</span><br> stats <span class="hljs-built_in">enable</span><br> <span class="hljs-built_in">log</span> global<br> stats uri     /haproxy-status<br> stats auth    haadmin:123456<br><br>listen  web_port<br> <span class="hljs-built_in">bind</span> 0.0.0.0:80<br> mode http<br> <span class="hljs-built_in">log</span> global<br> balance roundrobin<br> server web1  192.168.68.152:8080  check inter 3000 fall 2 rise 5<br> server web2  192.168.68.153:8080  check inter 3000 fall 2 rise 5<br></code></pre></td></tr></table></figure><p>此时curl对应vip地址有返回（后端服务还没起，503正常）</p><p><img src="https://s2.loli.net/2022/04/16/ifZ1cGv9zerowU2.png" alt="image-20220412120532559"></p><blockquote><p>补充haproxy配置说明：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">##</span><br><span class="hljs-comment">## Haproxy 配置文件</span><br><span class="hljs-comment">##</span><br><span class="hljs-comment">###################################################################################################</span><br><br><span class="hljs-comment">## global配置中的参数为进程级别的参数，通常与其运行的操作系统有关</span><br>global<br> log 127.0.0.1    local0    info <span class="hljs-comment">## 定义全局的syslog服务器，最多可以定义2个</span><br> <span class="hljs-comment">### local0是日志设备，对应于/etc/rsyslog.conf中的配置，默认回收info的日志级别</span><br> <span class="hljs-comment">#log 127.0.0.1    local1 info</span><br> chroot /usr/share/haproxy    <span class="hljs-comment">## 修改HAProxy的工作目录至指定的目录并在放弃权限之前执行</span><br>                             <span class="hljs-comment">### chroot() 操作，可以提升 haproxy 的安全级别</span><br> group    haproxy    <span class="hljs-comment">## 同gid，不过这里为指定的用户组名</span><br> user    haproxy    <span class="hljs-comment">## 同uid，但这里使用的为用户名</span><br> daemon    <span class="hljs-comment">## 设置haproxy后台守护进程形式运行</span><br> nbproc    1    <span class="hljs-comment">## 指定启动的haproxy进程个数，</span><br>             <span class="hljs-comment">### 只能用于守护进程模式的haproxy；默认为止启动1个进程，</span><br>             <span class="hljs-comment">### 一般只在单进程仅能打开少数文件描述符的场中中才使用多进程模式</span><br> maxconn 4096    <span class="hljs-comment">## 设定每个haproxy进程所接受的最大并发连接数，</span><br>                 <span class="hljs-comment">### 其等同于命令行选项&quot;-n&quot;，&quot;ulimit-n&quot;自动计算的结果正式参照从参数设定的</span><br> <span class="hljs-comment"># pidfile    /var/run/haproxy.pid    ## 进程文件（默认路径 /var/run/haproxy.pid）</span><br> node    edu-haproxy-01    <span class="hljs-comment">## 定义当前节点的名称，用于HA场景中多haproxy进程共享同一个IP地址时</span><br> description    edu-haproxy-01    <span class="hljs-comment">## 当前实例的描述信息</span><br><br><span class="hljs-comment">## defaults：用于为所有其他配置段提供默认参数，这默认配置参数可由下一个&quot;defaults&quot;所重新设定</span><br>defaults<br> log    global    <span class="hljs-comment">## 继承global中log的定义</span><br> mode    http    <span class="hljs-comment">## mode:所处理的模式 (tcp:四层 , http:七层 , health:状态检查,只会返回OK) </span><br> <span class="hljs-comment">### tcp: 实例运行于纯tcp模式，在客户端和服务器端之间将建立一个全双工的连接，</span><br> <span class="hljs-comment">#### 且不会对7层报文做任何类型的检查，此为默认模式</span><br> <span class="hljs-comment">### http:实例运行于http模式，客户端请求在转发至后端服务器之前将被深度分析，</span><br> <span class="hljs-comment">#### 所有不与RFC模式兼容的请求都会被拒绝</span><br> <span class="hljs-comment">### health：实例运行于health模式，其对入站请求仅响应“OK”信息并关闭连接，</span><br> <span class="hljs-comment">#### 且不会记录任何日志信息 ，此模式将用于相应外部组件的监控状态检测请求</span><br> option    httplog<br> retries    3<br> option redispatch    <span class="hljs-comment">## serverId对应的服务器挂掉后,强制定向到其他健康的服务器</span><br> maxconn    2000    <span class="hljs-comment">## 前端的最大并发连接数（默认为2000）</span><br> <span class="hljs-comment">### 其不能用于backend区段，对于大型站点来说，可以尽可能提高此值以便让haproxy管理连接队列，</span><br> <span class="hljs-comment">### 从而避免无法应答用户请求。当然，此最大值不能超过“global”段中的定义。</span><br> <span class="hljs-comment">### 此外，需要留心的是，haproxy会为每个连接维持两个缓冲，每个缓存的大小为8KB，</span><br> <span class="hljs-comment">### 再加上其他的数据，每个连接将大约占用17KB的RAM空间，这意味着经过适当优化后 ，</span><br> <span class="hljs-comment">### 有着1GB的可用RAM空间时将维护40000-50000并发连接。</span><br> <span class="hljs-comment">### 如果指定了一个过大值，极端场景中，其最终所占据的空间可能会超过当前主机的可用内存，</span><br> <span class="hljs-comment">### 这可能会带来意想不到的结果，因此，将其设定一个可接受值放为明智绝对，其默认为2000</span><br> timeout connect    5000ms    <span class="hljs-comment">## 连接超时(默认是毫秒,单位可以设置us,ms,s,m,h,d)</span><br> timeout client    50000ms    <span class="hljs-comment">## 客户端超时</span><br> timeout server    50000ms    <span class="hljs-comment">## 服务器超时</span><br><br><span class="hljs-comment">## HAProxy的状态信息统计页面</span><br>listen admin_stats <br> bind    :48800  <span class="hljs-comment">## 绑定端口</span><br> stats    uri /admin-status    <span class="hljs-comment">## 统计页面URI</span><br> stats    auth admin:admin    <span class="hljs-comment">## 设置统计页面认证的用户和密码，如果要设置多个，另起一行写入即可</span><br> mode    http<br> option    httplog    <span class="hljs-comment">## 启用日志记录HTTP请求</span><br><br><span class="hljs-comment">## listen: 用于定义通过关联“前端”和“后端”一个完整的代理，通常只对TCP流量有用</span><br>listen    mycat_servers<br> bind    :3307  <span class="hljs-comment">## 绑定端口 ---------------------------------------------------------------------这里一定要注意，在测试连接的时候，端口指定3307</span><br> mode    tcp<br> option    tcplog    <span class="hljs-comment">## 记录TCP请求日志</span><br> option    tcpka    <span class="hljs-comment">## 是否允许向server和client发送keepalive</span><br> option    httpchk OPTIONS * HTTP/1.1\r\nHost:\ www    <span class="hljs-comment">## 后端服务状态检测</span><br> <span class="hljs-comment">### 向后端服务器的48700端口（端口值在后端服务器上通过xinetd配置）发送 OPTIONS 请求</span><br> <span class="hljs-comment">### (原理请参考HTTP协议) ，HAProxy会根据返回内容来判断后端服务是否可用.</span><br> <span class="hljs-comment">### 2xx 和 3xx 的响应码表示健康状态，其他响应码或无响应表示服务器故障。</span><br> balance    roundrobin    <span class="hljs-comment">## 定义负载均衡算法，可用于&quot;defaults&quot;、&quot;listen&quot;和&quot;backend&quot;中,默认为轮询方式</span><br> server    mycat_01 192.168.9.169:8066 check port 48700 inter 2000ms rise 2 fall 3 weight 10  ------------------------------------------------第一台mycat<br> server    mycat_02 192.168.9.170:8066 check port 48700 inter 2000ms rise 2 fall 3 weight 10  ------------------------------------------------第二台mycat<br> <span class="hljs-comment">## 格式：server &lt;name&gt; &lt;address&gt;[:[port]] [param*]</span><br> <span class="hljs-comment">### serser 在后端声明一个server，只能用于listen和backend区段。</span><br> <span class="hljs-comment">### &lt;name&gt;为此服务器指定的内部名称，其将会出现在日志及警告信息中</span><br> <span class="hljs-comment">### &lt;address&gt;此服务器的IPv4地址，也支持使用可解析的主机名，但要在启动时需要解析主机名至响应的IPV4地址</span><br> <span class="hljs-comment">### [:[port]]指定将客户端连接请求发往此服务器时的目标端口，此为可选项</span><br> <span class="hljs-comment">### [param*]为此server设定的一系列参数，均为可选项，参数比较多，下面仅说明几个常用的参数：</span><br> <span class="hljs-comment">#### weight:权重，默认为1，最大值为256，0表示不参与负载均衡</span><br> <span class="hljs-comment">#### backup:设定为备用服务器，仅在负载均衡场景中的其他server均不可以启用此server</span><br> <span class="hljs-comment">#### check:启动对此server执行监控状态检查，其可以借助于额外的其他参数完成更精细的设定</span><br> <span class="hljs-comment">#### inter:设定监控状态检查的时间间隔，单位为毫秒，默认为2000，</span><br> <span class="hljs-comment">##### 也可以使用fastinter和downinter来根据服务器端专题优化此事件延迟</span><br> <span class="hljs-comment">#### rise:设置server从离线状态转换至正常状态需要检查的次数（不设置的情况下，默认值为2）</span><br> <span class="hljs-comment">#### fall:设置server从正常状态转换至离线状态需要检查的次数（不设置的情况下，默认值为3）</span><br> <span class="hljs-comment">#### cookie:为指定server设定cookie值，此处指定的值将会在请求入站时被检查，</span><br> <span class="hljs-comment">##### 第一次为此值挑选的server将会被后续的请求所选中，其目的在于实现持久连接的功能</span><br> <span class="hljs-comment">#### maxconn:指定此服务器接受的最大并发连接数，如果发往此服务器的连接数目高于此处指定的值，</span><br> <span class="hljs-comment">#####其将被放置于请求队列，以等待其他连接被释放</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="2-2-安装keepalived"><a href="#2-2-安装keepalived" class="headerlink" title="2.2 安装keepalived"></a>2.2 安装keepalived</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 soft]<span class="hljs-comment"># wget https://www.keepalived.org/software/keepalived-2.2.7.tar.gz</span><br>[root@ha1 soft]<span class="hljs-comment"># tar -xf keepalived-2.2.7.tar.gz &amp;&amp; cd keepalived-2.2.7</span><br>[root@ha1 soft]<span class="hljs-comment"># /configure --prefix=/usr/local/keepalived --sysconf=/etc</span><br>[root@ha1 soft]<span class="hljs-comment"># make &amp;&amp; make install</span><br></code></pre></td></tr></table></figure><p>从源码包拷贝服务配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 soft]<span class="hljs-comment"># cp ./keepalived/etc/init.d/keepalived /etc/init.d/</span><br>[root@ha1 soft]<span class="hljs-comment"># systemctl daemon-reload</span><br>[root@ha1 soft]<span class="hljs-comment"># systemctl start keepalived.service # 起进程前先修改/etc/keepalive/keepalive.config</span><br></code></pre></td></tr></table></figure><p>修改ha1,ha2对应keepalived配置文件,实现keepalived双机主备高可用:</p><p><img src="https://s2.loli.net/2022/04/16/WlgFb3Lid1D4u6f.png" alt="keepalived双机主备"></p><p>此处将ha2设为master,ha1设为backup:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 keepalived]<span class="hljs-comment"># cat keepalived.conf</span><br>global_defs &#123;<br>   router_id keepalive_192.168.1.16<br>&#125;<br>vrrp_script check_nginx_alive&#123;<br>   script <span class="hljs-string">&quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot;</span><br>   interval 2<br>   weight 10<br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state BACKUP <span class="hljs-comment"># 注意!此处state的名称并不能决定对应主从身份，主从身份是由priority决定的!</span><br>    interface ens33<br>    virtual_router_id 51<br>    priority 50<br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.200.16<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha2 keepalived]<span class="hljs-comment"># cat keepalived.conf</span><br>global_defs &#123;<br>   router_id keepalive_192.168.68.149<br>&#125;<br>vrrp_script check_nginx_alive&#123;<br>   script <span class="hljs-string">&quot;/etc/keepalived/check_nginx_alive_or_not.sh&quot;</span><br>   interval 2<br>   weight 10<br>&#125;<br>vrrp_instance VI_1 &#123;<br>    state MASTER<br>    interface ens33<br>    virtual_router_id 51<br>    priority 100  <span class="hljs-comment"># ha2的priority值比ha1高，决定了它会被选为master</span><br>    advert_int 1<br>    authentication &#123;<br>        auth_type PASS<br>        auth_pass 1111<br>    &#125;<br>    virtual_ipaddress &#123;<br>        192.168.200.16<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>默认情况下，如果ha1&#x2F;2中启动一个以后，另外一个服务无法起动，可能是因为linux默认不允许IP地址绑定非本机的端口，需要修改对应内核参数, 修改<code>/etc/sysctl.conf</code>：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">net.ipv4.ip_forward</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">net.ipv4.ip_nonlocal_bind</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>输入<code>sysctl -p</code> 使新内核参数生效</p></blockquote><p>此时起进程查看对应网卡状态</p><p><img src="https://s2.loli.net/2022/04/16/y92eYDqJnOtC5MU.png" alt="image-20220411214148201"></p><p><img src="https://s2.loli.net/2022/04/16/FHrskaxJXRAKGzh.png" alt="image-20220411214225989"></p><p>此时，在不间断ping该地址时，将ha2主机挂起，keepalived会将vip飘到ha1上，ping不会中断：</p><p><img src="https://s2.loli.net/2022/04/16/3NGOCavI8rJXykd.png" alt="image-20220411214441361"></p><p>说明keepalive服务生效</p><h2 id="3-部署harbor仓库"><a href="#3-部署harbor仓库" class="headerlink" title="3 部署harbor仓库"></a>3 部署harbor仓库</h2><h3 id="3-1-安装docker-ce"><a href="#3-1-安装docker-ce" class="headerlink" title="3.1 安装docker-ce"></a>3.1 安装docker-ce</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">wget -O /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br>yum install -y docker-ce<br></code></pre></td></tr></table></figure><p>harbor软硬件要求：</p><h3 id="Hardware"><a href="#Hardware" class="headerlink" title="Hardware"></a>Hardware</h3><p>The following table lists the minimum and recommended hardware configurations for deploying Harbor.</p><table><thead><tr><th align="left">Resource</th><th align="left">Minimum</th><th align="left">Recommended</th></tr></thead><tbody><tr><td align="left">CPU</td><td align="left">2 CPU</td><td align="left">4 CPU</td></tr><tr><td align="left">Mem</td><td align="left">4 GB</td><td align="left">8 GB</td></tr><tr><td align="left">Disk</td><td align="left">40 GB</td><td align="left">160 GB</td></tr></tbody></table><h3 id="Software"><a href="#Software" class="headerlink" title="Software"></a>Software</h3><p>The following table lists the software versions that must be installed on the target host.</p><table><thead><tr><th align="left">Software</th><th align="left">Version</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">Docker engine</td><td align="left">Version 17.06.0-ce+ or higher</td><td align="left">For installation instructions, see <a href="https://docs.docker.com/engine/installation/">Docker Engine documentation</a></td></tr><tr><td align="left">Docker Compose</td><td align="left">Version 1.18.0 or higher</td><td align="left">For installation instructions, see <a href="https://docs.docker.com/compose/install/">Docker Compose documentation</a></td></tr><tr><td align="left">Openssl</td><td align="left">Latest is preferred</td><td align="left">Used to generate certificate and keys for Harbor</td></tr></tbody></table><h3 id="3-2-下载安装harbor"><a href="#3-2-下载安装harbor" class="headerlink" title="3.2 下载安装harbor"></a>3.2 下载安装harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 推荐使用离线包方式安装</span><br>wget https://github.com/goharbor/harbor/releases/download/v2.5.0/harbor-offline-installer-v2.5.0.tgz<br>tar -xf harbor-offline-installer-v2.5.0.tgz<br><span class="hljs-built_in">cd</span> harbor &amp;&amp; <span class="hljs-built_in">mkdir</span> certs &amp;&amp; <span class="hljs-built_in">cd</span> certs<br><span class="hljs-comment"># 创建自签名证书</span><br>openssl genrsa -out certs/harbor-ca.key  <span class="hljs-comment"># 生成私钥</span><br><span class="hljs-built_in">touch</span> /root/.rnd<br>openssl req -x509 -new -nodes -key certs/harbor-ca.key -subj <span class="hljs-string">&quot;/CN=harbor.magedu.net&quot;</span> -days 7120 -out certs/harbor-ca.crt  <span class="hljs-comment"># 生成自签证书</span><br><span class="hljs-built_in">cp</span> harbor.yml.tmpl harbor.yml<br></code></pre></td></tr></table></figure><p>编辑harbor.yml配置文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@ha1 harbor]</span><span class="hljs-comment"># grep -v &#x27;#&#x27; harbor.yml | tr -s &#x27;\n&#x27;</span><br>hostname: harbor.magedu.net<br>http:<br>  port: 80<br>https:<br>  port: 443<br>  certificate: /data/soft/harbor/certs/harbor-ca.crt  <span class="hljs-comment"># 私钥路径</span><br>  private_key: /data/soft/harbor/certs/harbor-ca.key  <span class="hljs-comment"># 证书路径</span><br>harbor_admin_password: 123456  <span class="hljs-comment"># 默认admin密码</span><br>database:<br>  password: root123<br>  max_idle_conns: 100<br>  max_open_conns: 900<br>data_volume: /data/harbor<br>trivy:<br>  ignore_unfixed: false<br>  skip_update: false<br>  insecure: false<br>jobservice:<br>  max_job_workers: 10<br>notification:<br>  webhook_job_max_retry: 10<br>chart:<br>  absolute_url: disabled<br>log:<br>  level: info<br>  local:<br>    rotate_count: 50<br>    rotate_size: 200M<br>    location: /var/log/harbor<br>_version: 2.3.0<br>proxy:<br>  http_proxy:<br>  https_proxy:<br>  no_proxy:<br>  components:<br>    - core<br>    - jobservice<br>    - trivy<br></code></pre></td></tr></table></figure><p><code>./prepare</code>，准备配置文件（更新配置）</p><p><img src="https://s2.loli.net/2022/04/16/KN8UadPh7ZE9LXM.png" alt="image-20220412182211896"></p><p><code>./install.sh --help</code>查看帮助，<code>./install.sh --with-trivy</code>执行安装:</p><p><img src="https://s2.loli.net/2022/04/16/hR8ZbmLFQXW6TxU.png" alt="image-20220412182440001"></p><p>出现如下提示安装成功，查看镜像</p><p><img src="https://s2.loli.net/2022/04/16/o82n3MCxIRJ1wGv.png" alt="image-20220412182515745"></p><p><img src="https://s2.loli.net/2022/04/16/Ju7hcDqXTnt8a5C.png" alt="image-20220412182537130"></p><p>打开浏览器，输入HARBORIP, 用户名admin, 密码填写harbor.xml中设置密码进入管理页面：</p><p><img src="https://s2.loli.net/2022/04/16/tgCSsnUjLXdKcHY.png" alt="image-20220412182653326"></p><h3 id="3-3-harbor安装使用踩的坑"><a href="#3-3-harbor安装使用踩的坑" class="headerlink" title="3.3 harbor安装使用踩的坑"></a>3.3 harbor安装使用踩的坑</h3><ol><li>在配置完Harbor 后发现push 功能不可用出现以下问题</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 harbor]<span class="hljs-comment"># docker push harbor.magedu.net/test/centos-base:7</span><br>The push refers to repository [harbor.magedu.net/test/centos-base]<br>076db42d2a09: Preparing<br>174f56854903: Preparing<br>unauthorized: unauthorized to access repository: <span class="hljs-built_in">test</span>/centos-base, action: push: unauthorized to access repository: <span class="hljs-built_in">test</span>/centos-base, action: push<br></code></pre></td></tr></table></figure><p>解决方式：</p><p>查看 ~&#x2F;.docker&#x2F;config.json：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span>root@ha1 harbor<span class="hljs-punctuation">]</span># cat ~/.docker/config.json<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;harbor.magedu.net:443&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;auth&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;YWRtaW46MTIzNDU2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>猜测登陆信息获取不对，修改登录地址再次登陆：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 harbor]<span class="hljs-comment"># docker login harbor.magedu.net/test/centos-base</span><br>Username: admin<br>Password:<br>WARNING! Your password will be stored unencrypted <span class="hljs-keyword">in</span> /root/.docker/config.json.<br>Configure a credential helper to remove this warning. See<br>https://docs.docker.com/engine/reference/commandline/login/<span class="hljs-comment">#credentials-store</span><br><br>Login Succeeded<br></code></pre></td></tr></table></figure><p>此时查看 ~&#x2F;.docker&#x2F;config.json：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 harbor]<span class="hljs-comment"># cat ~/.docker/config.json</span><br>&#123;<br><span class="hljs-string">&quot;auths&quot;</span>: &#123;<br><span class="hljs-string">&quot;harbor.magedu.net&quot;</span>: &#123;<br><span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;dGVzdDpEZHJiZGd6eUAwMDE=&quot;</span><br>&#125;,<br><span class="hljs-string">&quot;harbor.magedu.net:443&quot;</span>: &#123;<br><span class="hljs-string">&quot;auth&quot;</span>: <span class="hljs-string">&quot;YWRtaW46MTIzNDU2&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再次push到harbor成功：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 harbor]<span class="hljs-comment"># docker push harbor.magedu.net/test/centos-base:7</span><br>The push refers to repository [harbor.magedu.net/test/centos-base]<br>076db42d2a09: Pushed<br>174f56854903: Pushed<br>7: digest: sha256:f24bb6fa09e33d9737a7e9385106f1e40624de4be2a111c027b579d9a9e8054a size: 742<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/04/16/Zs2F6M7rUu8aDmz.png" alt="image-20220413174334373"></p><ol start="2"><li>push时提示证书错误</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 harbor]<span class="hljs-comment"># docker push harbor.magedu.net/test/centos-base:7</span><br>The push refers to repository [harbor.magedu.net/test/centos-base]<br>Get <span class="hljs-string">&quot;https://harbor.magedu.net/v2/&quot;</span>: x509: certificate signed by unknown authority<br></code></pre></td></tr></table></figure><p>解决方式：</p><p>修改&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service，增加 –insecure-registry 参数</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ExecStart=<span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/dockerd --insecure-registry harbor.magedu.net -H fd:/</span><span class="hljs-regexp">/ --containerd=/</span>run<span class="hljs-regexp">/containerd/</span>containerd.sock<br></code></pre></td></tr></table></figure><p>重新加载配置、重启docker:</p><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl daemon-reload<br><span class="hljs-params">system</span>ctl restart docker<br></code></pre></td></tr></table></figure><p>3.push时报legacy Common Name field, use SANs or temporarily enable Common Name matching with GODEBUG&#x3D;x509ignoreCN&#x3D;0</p><p>解决方法：</p><p>因为 go 1.15 版本开始<a href="https://golang.org/doc/go1.15#commonname">废弃 CommonName</a>，因此推荐使用 SAN 证书。 如果想兼容之前的方式，需要设置环境变量 GODEBUG 为 <code>x509ignoreCN=0</code>，参考：</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">openssl genrsa -<span class="hljs-keyword">out</span> <span class="hljs-keyword">ca</span>.key 2048<br>openssl req -new -x509 -days 365 -key <span class="hljs-keyword">ca</span>.key -subj <span class="hljs-string">&quot;/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=Acme Root CA&quot;</span> -<span class="hljs-keyword">out</span> <span class="hljs-keyword">ca</span>.crt<br><br>openssl req -newkey rsa:2048 -nodes -keyout server.key -subj <span class="hljs-string">&quot;/C=CN/ST=GD/L=SZ/O=Acme, Inc./CN=*.example.com&quot;</span> -<span class="hljs-keyword">out</span> server.csr<br>openssl x509 -req -extfile &lt;(printf <span class="hljs-string">&quot;subjectAltName=DNS:example.com,DNS:www.example.com&quot;</span>) -days 365 -<span class="hljs-keyword">in</span> server.csr -<span class="hljs-keyword">CA</span> <span class="hljs-keyword">ca</span>.crt -CAkey <span class="hljs-keyword">ca</span>.key -CAcreateserial -<span class="hljs-keyword">out</span> server.crt<br></code></pre></td></tr></table></figure><p>接下来在&#x2F;etc&#x2F;docker&#x2F;certs.d&#x2F;创建对应目录并拷贝生成的证书：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">[root@ha1 harbor]# mkdir -pv <span class="hljs-regexp">/etc/</span>docker<span class="hljs-regexp">/certs.d/</span>harbor.magedu.net:<span class="hljs-number">443</span><br>mkdir: 已创建目录 <span class="hljs-string">&quot;/etc/docker/certs.d/harbor.magedu.net:443&quot;</span><br>[root@ha1 harbor]# cp certs<span class="hljs-regexp">/harbor-ca.crt /</span>etc<span class="hljs-regexp">/docker/</span>certs.d<span class="hljs-regexp">/harbor.magedu.net:443/</span><br></code></pre></td></tr></table></figure><h2 id="4-etcd-安装"><a href="#4-etcd-安装" class="headerlink" title="4 etcd 安装"></a>4 etcd 安装</h2><p><img src="https://s2.loli.net/2022/04/16/X92arLoTweYKJPN.png" alt="image-20210421170705957"></p><p>etcd是Kubernetes集群的大脑。使用etcd的“Watch”功能监控更改序列。通过这个功能，Kubernetes可以订阅集群内的更改并执行来自API服务器的任何状态请求。etcd与分布式集群中的不同组件协作。etcd对组件状态的更改作出反应，其他组件可能会对更改作出反应。</p><p>可能存在这样一种情况：在维护集群中一组etcd组件的所有状态的相同副本时，需要将相同的数据存储在两个etcd实例中。但是，etcd不应该在不同的实例中更新相同的记录。</p><p>在这种情况下，etcd不会处理每个集群节点上的写操作。相反，只有一个实例负责在内部处理写操作。那个节点叫做leader。集群内其他节点采用RAFT算法选择一个leader。一旦leader选定，其他节点就成为follower节点。</p><p>现在，当写请求到达leader节点时，leader处理写入。leader etcd节点向其他节点广播数据的副本。如果一个follower节点在那一刻处于不活动或脱机状态，那么基于大多数可用节点，写请求将得到一个完整的标志。通常，如果leader得到集群中其他成员的同意，写操作将获得完整标志。</p><p>这是它们选择leader，以及如何确保在所有实例中传播写操作的方式。利用raft协议在etcd中实现了这种分布式共识。</p><p>最好采用奇数搭建etcd集群, 本次采用三节点搭建高可用集群</p><h3 id="4-1-创建TLS证书和密钥"><a href="#4-1-创建TLS证书和密钥" class="headerlink" title="4.1 创建TLS证书和密钥"></a>4.1 创建TLS证书和密钥</h3><p>前往下载cloudfare的 PKI 工具集 <a href="https://github.com/cloudflare/cfssl">cfssl</a> 来生成 Certificate Authority (CA) 和其它证书</p><p><strong>生成的 CA 证书和秘钥文件如下：</strong></p><ul><li>ca-key.pem</li><li>ca.pem</li><li>kubernetes-key.pem</li><li>kubernetes.pem</li><li>kube-proxy.pem</li><li>kube-proxy-key.pem</li><li>admin.pem</li><li>admin-key.pem</li></ul><p><strong>使用证书的组件如下：</strong></p><ul><li>etcd：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；</li><li>kube-apiserver：使用 ca.pem、kubernetes-key.pem、kubernetes.pem；</li><li>kubelet：使用 ca.pem；</li><li>kube-proxy：使用 ca.pem、kube-proxy-key.pem、kube-proxy.pem；</li><li>kubectl：使用 ca.pem、admin-key.pem、admin.pem；</li><li>kube-controller-manager：使用 ca-key.pem、ca.pem</li></ul><h4 id="创建-CA-Certificate-Authority"><a href="#创建-CA-Certificate-Authority" class="headerlink" title="创建 CA (Certificate Authority)"></a>创建 CA (Certificate Authority)</h4><p><strong>创建 CA 配置文件</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /root/ssl<br><span class="hljs-built_in">cd</span> /root/ssl<br>cfssl print-defaults config &gt; config.json<br>cfssl print-defaults csr &gt; csr.json<br><span class="hljs-comment"># 根据config.json文件的格式创建如下的ca-config.json文件</span><br><span class="hljs-comment"># 过期时间设置成了 87600h</span><br><span class="hljs-built_in">cat</span> &gt; ca-config.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;signing&quot;: &#123;</span><br><span class="hljs-string">    &quot;default&quot;: &#123;</span><br><span class="hljs-string">      &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    &quot;profiles&quot;: &#123;</span><br><span class="hljs-string">      &quot;kubernetes&quot;: &#123;</span><br><span class="hljs-string">        &quot;usages&quot;: [</span><br><span class="hljs-string">            &quot;signing&quot;,</span><br><span class="hljs-string">            &quot;key encipherment&quot;,</span><br><span class="hljs-string">            &quot;server auth&quot;,</span><br><span class="hljs-string">            &quot;client auth&quot;</span><br><span class="hljs-string">        ],</span><br><span class="hljs-string">        &quot;expiry&quot;: &quot;87600h&quot;</span><br><span class="hljs-string">      &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>字段说明</p><ul><li><code>ca-config.json</code>：可以定义多个 profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个 profile；</li><li><code>signing</code>：表示该证书可用于签名其它证书；生成的 ca.pem 证书中 <code>CA=TRUE</code>；</li><li><code>server auth</code>：表示client可以用该 CA 对server提供的证书进行验证；</li><li><code>client auth</code>：表示server可以用该CA对client提供的证书进行验证；</li></ul><h4 id="创建-CA-证书签名请求"><a href="#创建-CA-证书签名请求" class="headerlink" title="创建 CA 证书签名请求"></a>创建 CA 证书签名请求</h4><p>创建 <code>ca-csr.json</code> 文件，内容如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ca&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;expiry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;87600h&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>“CN”：<code>Common Name</code>，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；</li><li>“O”：<code>Organization</code>，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)；</li></ul><h4 id="生成-CA-证书和私钥"><a href="#生成-CA-证书和私钥" class="headerlink" title="生成 CA 证书和私钥"></a>生成 CA 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfssl gencert -initca ca-csr.json | cfssljson -bare ca<br>$ <span class="hljs-built_in">ls</span> ca*<br>ca-config.json  ca.csr  ca-csr.json  ca-key.pem  ca.pem<br></code></pre></td></tr></table></figure><p>（后面的证书不是给etcd而是k8s的其他组件使用的）</p><h4 id="创建-kubernetes-证书"><a href="#创建-kubernetes-证书" class="headerlink" title="创建 kubernetes 证书"></a>创建 kubernetes 证书</h4><p>创建 kubernetes 证书签名请求文件 <code>kubernetes-csr.json</code>：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>      <span class="hljs-string">&quot;127.0.0.1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;172.20.0.112&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;172.20.0.113&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;172.20.0.114&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;172.20.0.115&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;10.254.0.1&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;kubernetes&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;kubernetes.default&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>如果 hosts 字段不为空则需要指定授权使用该证书的 <strong>IP 或域名列表</strong>，由于该证书后续被 <code>etcd</code> 集群和 <code>kubernetes master</code> 集群使用，所以上面分别指定了 <code>etcd</code> 集群、<code>kubernetes master</code> 集群的主机 IP 和 <strong><code>kubernetes</code> 服务的服务 IP</strong>（一般是 <code>kube-apiserver</code> 指定的 <code>service-cluster-ip-range</code> 网段的第一个IP，如 10.254.0.1）。</li><li>这是最小化安装的kubernetes集群，包括一个私有镜像仓库，三个节点的kubernetes集群，以上物理节点的IP也可以更换为主机名。</li></ul><h4 id="生成-kubernetes-证书和私钥"><a href="#生成-kubernetes-证书和私钥" class="headerlink" title="生成 kubernetes 证书和私钥"></a>生成 kubernetes 证书和私钥</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare kubernetes<br>$ <span class="hljs-built_in">ls</span> kubernetes*<br>kubernetes.csr  kubernetes-csr.json  kubernetes-key.pem  kubernetes.pem<br></code></pre></td></tr></table></figure><p>或者直接在命令行上指定相关参数：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&#123;&quot;CN&quot;:&quot;kubernetes&quot;,&quot;hosts&quot;:[&quot;&quot;],&quot;key&quot;:&#123;&quot;algo&quot;:&quot;rsa&quot;,&quot;size&quot;:2048&#125;&#125;&#x27;</span> | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes -hostname=<span class="hljs-string">&quot;127.0.0.1,172.20.0.112,172.20.0.113,172.20.0.114,172.20.0.115,kubernetes,kubernetes.default&quot;</span> - | cfssljson -bare kubernetes<br></code></pre></td></tr></table></figure><h4 id="创建-admin-证书"><a href="#创建-admin-证书" class="headerlink" title="创建 admin 证书"></a>创建 admin 证书</h4><p>创建 admin 证书签名请求文件 <code>admin-csr.json</code>：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:masters&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>后续 <code>kube-apiserver</code> 使用 <code>RBAC</code> 对客户端(如 <code>kubelet</code>、<code>kube-proxy</code>、<code>Pod</code>)请求进行授权；</li><li><code>kube-apiserver</code> 预定义了一些 <code>RBAC</code> 使用的 <code>RoleBindings</code>，如 <code>cluster-admin</code> 将 Group <code>system:masters</code> 与 Role <code>cluster-admin</code> 绑定，该 Role 授予了调用<code>kube-apiserver</code> 的<strong>所有 API</strong>的权限；</li><li>O 指定该证书的 Group 为 <code>system:masters</code>，<code>kubelet</code> 使用该证书访问 <code>kube-apiserver</code> 时 ，由于证书被 CA 签名，所以认证通过，同时由于证书用户组为经过预授权的 <code>system:masters</code>，所以被授予访问所有 API 的权限；</li></ul><p><strong>注意</strong>：这个admin 证书，是将来生成管理员用的kube config 配置文件用的，现在我们一般建议使用RBAC 来对kubernetes 进行角色权限控制， kubernetes 将证书中的CN 字段 作为User， O 字段作为 Group（具体参考<a href="https://jimmysong.io/kubernetes-handbook/guide/authentication.html"> Kubernetes中的用户与身份认证授权</a>中 X509 Client Certs 一段）。</p><p>在搭建完 kubernetes 集群后，我们可以通过命令: <code>kubectl get clusterrolebinding cluster-admin -o yaml</code> ,查看到 <code>clusterrolebinding cluster-admin</code> 的 subjects 的 kind 是 Group，name 是 <code>system:masters</code>。 <code>roleRef</code> 对象是 <code>ClusterRole cluster-admin</code>。 意思是凡是 <code>system:masters Group</code> 的 user 或者 <code>serviceAccount</code> 都拥有 <code>cluster-admin</code> 的角色。 因此我们在使用 kubectl 命令时候，才拥有整个集群的管理权限。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">$</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">get</span> <span class="hljs-string">clusterrolebinding</span> <span class="hljs-string">cluster-admin</span> <span class="hljs-string">-o</span> <span class="hljs-string">yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">annotations:</span><br>    <span class="hljs-attr">rbac.authorization.kubernetes.io/autoupdate:</span> <span class="hljs-string">&quot;true&quot;</span><br>  <span class="hljs-attr">creationTimestamp:</span> <span class="hljs-number">2017-04-11T11:20:42Z</span><br>  <span class="hljs-attr">labels:</span><br>    <span class="hljs-attr">kubernetes.io/bootstrapping:</span> <span class="hljs-string">rbac-defaults</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br>  <span class="hljs-attr">resourceVersion:</span> <span class="hljs-string">&quot;52&quot;</span><br>  <span class="hljs-attr">selfLink:</span> <span class="hljs-string">/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/cluster-admin</span><br>  <span class="hljs-attr">uid:</span> <span class="hljs-string">e61b97b2-1ea8-11e7-8cd7-f4e9d49f8ed0</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">ClusterRole</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">cluster-admin</span><br><span class="hljs-attr">subjects:</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Group</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">system:masters</span><br></code></pre></td></tr></table></figure><p>生成 admin 证书和私钥：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes admin-csr.json | cfssljson -bare admin<br>$ <span class="hljs-built_in">ls</span> admin*<br>admin.csr  admin-csr.json  admin-key.pem  admin.pem<br></code></pre></td></tr></table></figure><h4 id="创建-kube-proxy-证书"><a href="#创建-kube-proxy-证书" class="headerlink" title="创建 kube-proxy 证书"></a>创建 kube-proxy 证书</h4><p>创建 kube-proxy 证书签名请求文件 <code>kube-proxy-csr.json</code>：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;CN&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;system:kube-proxy&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hosts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;algo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rsa&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2048</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;names&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;C&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;ST&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;L&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;BeiJing&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;O&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;k8s&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;OU&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;System&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>CN 指定该证书的 User 为 <code>system:kube-proxy</code>；</li><li><code>kube-apiserver</code> 预定义的 RoleBinding <code>system:node-proxier</code> 将User <code>system:kube-proxy</code> 与 Role <code>system:node-proxier</code> 绑定，该 Role 授予了调用 <code>kube-apiserver</code> Proxy 相关 API 的权限；</li></ul><p>生成 kube-proxy 客户端证书和私钥</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes  kube-proxy-csr.json | cfssljson -bare kube-proxy<br>$ <span class="hljs-built_in">ls</span> kube-proxy*<br>kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem<br></code></pre></td></tr></table></figure><h4 id="校验证书"><a href="#校验证书" class="headerlink" title="校验证书"></a>校验证书</h4><p>以 Kubernetes 证书为例。</p><p>使用 <code>openssl</code> 命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ openssl x509  -noout -text -<span class="hljs-keyword">in</span>  kubernetes.pem<br>...<br>    Signature Algorithm: sha256WithRSAEncryption<br>        Issuer: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=Kubernetes<br>        Validity<br>            Not Before: Apr  5 05:36:00 2017 GMT<br>            Not After : Apr  5 05:36:00 2018 GMT<br>        Subject: C=CN, ST=BeiJing, L=BeiJing, O=k8s, OU=System, CN=kubernetes<br>...<br>        X509v3 extensions:<br>            X509v3 Key Usage: critical<br>                Digital Signature, Key Encipherment<br>            X509v3 Extended Key Usage:<br>                TLS Web Server Authentication, TLS Web Client Authentication<br>            X509v3 Basic Constraints: critical<br>                CA:FALSE<br>            X509v3 Subject Key Identifier:<br>                DD:52:04:43:10:13:A9:29:24:17:3A:0E:D7:14:DB:36:F8:6C:E0:E0<br>            X509v3 Authority Key Identifier:<br>                keyid:44:04:3B:60:BD:69:78:14:68:AF:A0:41:13:F6:17:07:13:63:58:CD<br><br>            X509v3 Subject Alternative Name:<br>                DNS:kubernetes, DNS:kubernetes.default, DNS:kubernetes.default.svc, DNS:kubernetes.default.svc.cluster, DNS:kubernetes.default.svc.cluster.local, IP Address:127.0.0.1, IP Address:172.20.0.112, IP Address:172.20.0.113, IP Address:172.20.0.114, IP Address:172.20.0.115, IP Address:10.254.0.1<br>...<br></code></pre></td></tr></table></figure><ul><li>确认 <code>Issuer</code> 字段的内容和 <code>ca-csr.json</code> 一致；</li><li>确认 <code>Subject</code> 字段的内容和 <code>kubernetes-csr.json</code> 一致；</li><li>确认 <code>X509v3 Subject Alternative Name</code> 字段的内容和 <code>kubernetes-csr.json</code> 一致；</li><li>确认 <code>X509v3 Key Usage、Extended Key Usage</code> 字段的内容和 <code>ca-config.json</code> 中 <code>kubernetes</code> profile 一致；</li></ul><h4 id="使用-cfssl-certinfo-命令"><a href="#使用-cfssl-certinfo-命令" class="headerlink" title="使用 cfssl-certinfo 命令"></a>使用 <code>cfssl-certinfo</code> 命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ cfssl-certinfo -cert kubernetes.pem<br>...<br>&#123;<br>  <span class="hljs-string">&quot;subject&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;kubernetes&quot;</span><br>    ]<br>  &#125;,<br>  <span class="hljs-string">&quot;issuer&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;common_name&quot;</span>: <span class="hljs-string">&quot;Kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;country&quot;</span>: <span class="hljs-string">&quot;CN&quot;</span>,<br>    <span class="hljs-string">&quot;organization&quot;</span>: <span class="hljs-string">&quot;k8s&quot;</span>,<br>    <span class="hljs-string">&quot;organizational_unit&quot;</span>: <span class="hljs-string">&quot;System&quot;</span>,<br>    <span class="hljs-string">&quot;locality&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;province&quot;</span>: <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>    <span class="hljs-string">&quot;names&quot;</span>: [<br>      <span class="hljs-string">&quot;CN&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;BeiJing&quot;</span>,<br>      <span class="hljs-string">&quot;k8s&quot;</span>,<br>      <span class="hljs-string">&quot;System&quot;</span>,<br>      <span class="hljs-string">&quot;Kubernetes&quot;</span><br>    ]<br>  &#125;,<br>  <span class="hljs-string">&quot;serial_number&quot;</span>: <span class="hljs-string">&quot;174360492872423263473151971632292895707129022309&quot;</span>,<br>  <span class="hljs-string">&quot;sans&quot;</span>: [<br>    <span class="hljs-string">&quot;kubernetes&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster&quot;</span>,<br>    <span class="hljs-string">&quot;kubernetes.default.svc.cluster.local&quot;</span>,<br>    <span class="hljs-string">&quot;127.0.0.1&quot;</span>,<br>    <span class="hljs-string">&quot;10.64.3.7&quot;</span>,<br>    <span class="hljs-string">&quot;10.254.0.1&quot;</span><br>  ],<br>  <span class="hljs-string">&quot;not_before&quot;</span>: <span class="hljs-string">&quot;2017-04-05T05:36:00Z&quot;</span>,<br>  <span class="hljs-string">&quot;not_after&quot;</span>: <span class="hljs-string">&quot;2018-04-05T05:36:00Z&quot;</span>,<br>  <span class="hljs-string">&quot;sigalg&quot;</span>: <span class="hljs-string">&quot;SHA256WithRSA&quot;</span>,<br>...<br></code></pre></td></tr></table></figure><p>复制所有证书到<code>/etc/etcd/</code>目录下备用</p><h3 id="4-2-安装配置etcd"><a href="#4-2-安装配置etcd" class="headerlink" title="4.2 安装配置etcd"></a>4.2 安装配置etcd</h3><p>实验环境</p><ul><li>node-1：192.168.68149</li><li>node-2：192.168.68.150</li><li>node-3：192.168.68.148</li></ul><h4 id="下载最新版本的etcd"><a href="#下载最新版本的etcd" class="headerlink" title="下载最新版本的etcd"></a>下载最新版本的etcd</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">https://github.com/etcd-io/etcd/releases<br><span class="hljs-comment"># 下载相应平台最新版解压之后，将 etcd、etcdctl 放入 /usr/bin</span><br><span class="hljs-comment"># 可执行权限 chmod +x /usr/bin/etcd*</span><br></code></pre></td></tr></table></figure><h4 id="创建-etcd-的-systemd-unit-文件"><a href="#创建-etcd-的-systemd-unit-文件" class="headerlink" title="创建 etcd 的 systemd unit 文件"></a>创建 etcd 的 systemd unit 文件</h4><p>在&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录下创建文件etcd.service，内容如下。注意替换IP地址为你自己的etcd集群的主机IP。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@ha1 etcd]<span class="hljs-comment"># cat /lib/systemd/system/etcd.service</span><br>[Unit]<br>Description=Etcd Server<br>After=network.target<br>After=network-online.target<br>Wants=network-online.target<br>Documentation=https://github.com/coreos<br><br>[Service]<br>Type=notify<br>WorkingDirectory=/var/lib/etcd/<br>EnvironmentFile=-/etc/etcd/etcd.conf<br>ExecStart=/usr/local/bin/etcd \<br>  --cert-file=/etc/kubernetes/ssl/kubernetes.pem \<br>  --key-file=/etc/kubernetes/ssl/kubernetes-key.pem \<br>  --peer-cert-file=/etc/kubernetes/ssl/kubernetes.pem \<br>  --peer-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \<br>  --trusted-ca-file=/etc/kubernetes/ssl/ca.pem \<br>  --peer-trusted-ca-file=/etc/kubernetes/ssl/ca.pem \<br>  --initial-cluster infra1=https://192.168.68.149:2380,infra2=https://192.168.68.150:2380,infra3=https://192.168.68.148:2380 \<br>  --initial-cluster-state new<br>Restart=on-failure<br>RestartSec=5<br>LimitNOFILE=65536<br><br>[Install]<br>WantedBy=multi-user.target<br>[root@ha1 etcd]<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><ul><li>指定 <code>etcd</code> 的工作目录为 <code>/var/lib/etcd</code>，数据目录为 <code>/var/lib/etcd</code>，需在启动服务前创建这个目录，否则启动服务的时候会报错“Failed at step CHDIR spawning &#x2F;usr&#x2F;bin&#x2F;etcd: No such file or directory”；</li><li>为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和 CA 证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）；</li><li>创建 <code>kubernetes.pem</code> 证书时使用的 <code>kubernetes-csr.json</code> 文件的 <code>hosts</code> 字段<strong>包含所有 etcd 节点的IP</strong>，否则证书校验会出错；</li><li><code>--initial-cluster-state</code> 值为 <code>new</code> 时，<code>--name</code> 的参数值必须位于 <code>--initial-cluster</code> 列表中；</li></ul><h4 id="配置环境变量文件"><a href="#配置环境变量文件" class="headerlink" title="配置环境变量文件"></a>配置环境变量文件</h4><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@ha1 etcd]</span><span class="hljs-comment"># cat /etc/etcd/etcd.conf</span><br><span class="hljs-comment"># [member]</span><br><span class="hljs-attr">ETCD_NAME</span>=infra1<br><span class="hljs-attr">ETCD_DATA_DIR</span>=<span class="hljs-string">&quot;/var/lib/etcd&quot;</span><br><span class="hljs-attr">ETCD_LISTEN_PEER_URLS</span>=<span class="hljs-string">&quot;https://192.168.68.149:2380&quot;</span><br><span class="hljs-attr">ETCD_LISTEN_CLIENT_URLS</span>=<span class="hljs-string">&quot;https://192.168.68.149:2379&quot;</span><br><br><span class="hljs-comment">#[cluster]</span><br><span class="hljs-attr">ETCD_INITIAL_ADVERTISE_PEER_URLS</span>=<span class="hljs-string">&quot;https://192.168.68.149:2380&quot;</span><br><span class="hljs-attr">ETCD_INITIAL_CLUSTER_TOKEN</span>=<span class="hljs-string">&quot;etcd-cluster&quot;</span><br><span class="hljs-attr">ETCD_ADVERTISE_CLIENT_URLS</span>=<span class="hljs-string">&quot;https://192.168.68.149:2379&quot;</span><br><span class="hljs-section">[root@ha1 etcd]</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>Node-2,Node-3配置与此类似,ETCD_NAME换成对应节点的infra2&#x2F;3</p><p>启动etcd服务：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># systemctl daemon-reload</span><br><span class="hljs-comment"># systemctl enable etcd</span><br><span class="hljs-comment"># systemctl start etcd</span><br><span class="hljs-comment"># systemctl status etcd</span><br></code></pre></td></tr></table></figure><h4 id="踩到的坑"><a href="#踩到的坑" class="headerlink" title="踩到的坑"></a>踩到的坑</h4><ul><li><p>启动etcd服务时报错</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">: &#123;&quot;level&quot;:&quot;fatal&quot;,&quot;ts&quot;:1649936424.1166,&quot;caller&quot;:&quot;flags/flag.go:85&quot;,&quot;msg&quot;:&quot;conflicting environment variable is shadowed by corresponding command-line flag (either unset environment variable or disable flag))&quot;,&quot;environment-variable&quot;:&quot;ETCD_DATA_DIR&quot;,&quot;stacktrace&quot;:&quot;go.etcd.io/etcd/pkg/v3/flags.verifyEnv\n\t/tmp/etcd-release-3.5.2/etc<br></code></pre></td></tr></table></figure></li></ul><p>environment variable定义重复了，比较新的版本etcd启动会自动读取<code>/etc/etcd/etcd.config</code>（或其他指定目录）中的变量，不需要重复再在<code>/lib/systemd/system/etcd.service</code>中的<code>ExecStart</code>重复指定</p><ul><li><code>cannot access data directory: directory &quot;/application/kubernetes/data/&quot;,&quot;drwxr-xr-x&quot; exist without desired file permission &quot;-rwx------&quot;.</code></li></ul><p>将权限设置为700即可</p><ul><li><p><code>etcdctl member list查看成员列表，显示leader cluster may be unhealthy: failed to list members Error:  unexpected status code 404</code></p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">解决1：etcdctl通过<span class="hljs-attribute">ETCDCTL_API</span>=3查询的member list就是没有leader信息的，需要通过API2.0进行查询。ETCD3.4版本<span class="hljs-attribute">ETCDCTL_API</span>=3 etcdctl 和 etcd <span class="hljs-attribute">--enable-v2</span>=<span class="hljs-literal">false</span> 成为了默认配置，进行API2.0进行查询需要如下设置：客户端：<span class="hljs-built_in">export</span> <span class="hljs-attribute">ETCDCTL_API</span>=2 服务端：etcd.config.yaml中增加enable-v2: <span class="hljs-literal">true</span>，并重启etcd服务。<br>解决2：<span class="hljs-attribute">API</span>=3，使用如下命令：ETCDCTL_API=3 etcdctl endpoint status --cluster -w table注意：etcd集群所有节点都要启动enable-v2： <span class="hljs-literal">true</span>，否则会出现在API2.0下执行etcdctl命令，时而成功、时而报“unexpected status code 404”<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-使用kubeadm部署工具安装k8s"><a href="#5-使用kubeadm部署工具安装k8s" class="headerlink" title="5 使用kubeadm部署工具安装k8s"></a>5 使用kubeadm部署工具安装k8s</h2><p>为了方便学习此处使用kubeadm方式安装，后续考虑使用二进制方式部署。实验环境：</p><table><thead><tr><th>host</th><th>CPU</th><th>RAM</th><th>IP</th></tr></thead><tbody><tr><td>master</td><td>2</td><td>2</td><td>192.168.68.151</td></tr><tr><td>node-1</td><td>2</td><td>2</td><td>192.168.68.149</td></tr><tr><td>node-2</td><td>2</td><td>2</td><td>192.168.68.150</td></tr><tr><td>node-3</td><td>2</td><td>2</td><td>192.168.68.148</td></tr></tbody></table><p>系统：CentOS Linux release 7.9.2009 (Core), 内核版本：3.10.0-1160.62.1.el7.x86_64</p><h3 id="5-1-安装前准备"><a href="#5-1-安装前准备" class="headerlink" title="5.1 安装前准备"></a>5.1 安装前准备</h3><h4 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h4><ul><li>一台兼容的 Linux 主机。Kubernetes 项目为基于 Debian 和 Red Hat 的 Linux 发行版以及一些不提供包管理器的发行版提供通用的指令</li><li>每台机器 2 GB 或更多的 RAM （如果少于这个数字将会影响你应用的运行内存)</li><li>2 CPU 核或更多</li><li>集群中的所有机器的网络彼此均能相互连接(公网和内网都可以)</li><li>节点之中不可以有重复的主机名、MAC 地址或 product_uuid。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#verify-mac-address">这里</a>了解更多详细信息。</li><li>开启机器上的某些端口。请参见<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#check-required-ports">这里</a> 了解更多详细信息。</li><li>禁用交换分区。为了保证 kubelet 正常工作，你 <strong>必须</strong> 禁用交换分区。</li></ul><h4 id="确保每个节点上-MAC-地址和-product-uuid-的唯一性"><a href="#确保每个节点上-MAC-地址和-product-uuid-的唯一性" class="headerlink" title="确保每个节点上 MAC 地址和 product_uuid 的唯一性"></a>确保每个节点上 MAC 地址和 product_uuid 的唯一性</h4><ul><li>你可以使用命令 <code>ip link</code> 或 <code>ifconfig -a</code> 来获取网络接口的 MAC 地址</li><li>可以使用 <code>sudo cat /sys/class/dmi/id/product_uuid</code> 命令对 product_uuid 校验</li></ul><p>一般来讲，硬件设备会拥有唯一的地址，但是有些虚拟机的地址可能会重复。 Kubernetes 使用这些值来唯一确定集群中的节点。 如果这些值在每个节点上不唯一，可能会导致安装 <a href="https://github.com/kubernetes/kubeadm/issues/31">失败</a>。</p><h4 id="允许-iptables-检查桥接流量"><a href="#允许-iptables-检查桥接流量" class="headerlink" title="允许 iptables 检查桥接流量"></a>允许 iptables 检查桥接流量</h4><p>确保 <code>br_netfilter</code> 模块被加载。这一操作可以通过运行 <code>lsmod | grep br_netfilter</code> 来完成。若要显式加载该模块，可执行 <code>sudo modprobe br_netfilter</code>。</p><p>为了让你的 Linux 节点上的 iptables 能够正确地查看桥接流量，你需要确保在你的 <code>sysctl</code> 配置中将 <code>net.bridge.bridge-nf-call-iptables</code> 设置为 1。例如：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/modules-load.d/k8s.conf</span><br><span class="hljs-string">br_netfilter</span><br><span class="hljs-string">EOF</span><br><br><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/sysctl.d/k8s.conf</span><br><span class="hljs-string">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="hljs-string">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="hljs-string">EOF</span><br>sudo sysctl --system<br></code></pre></td></tr></table></figure><h4 id="安装-runtime"><a href="#安装-runtime" class="headerlink" title="安装 runtime"></a>安装 runtime</h4><p>默认情况下，Kubernetes 使用 <a href="https://kubernetes.io/zh/docs/concepts/overview/components/#container-runtime">容器运行时接口（Container Runtime Interface，CRI）</a> 来与你所选择的容器运行时交互。</p><p>如果你不指定运行时，则 kubeadm 会自动尝试检测到系统上已经安装的运行时， 方法是扫描一组众所周知的 Unix 域套接字。 下面的表格列举了一些容器运行时及其对应的套接字路径：</p><table><thead><tr><th>运行时</th><th>域套接字</th></tr></thead><tbody><tr><td>Docker</td><td>&#x2F;var&#x2F;run&#x2F;dockershim.sock</td></tr><tr><td>containerd</td><td>&#x2F;run&#x2F;containerd&#x2F;containerd.sock</td></tr><tr><td>CRI-O</td><td>&#x2F;var&#x2F;run&#x2F;crio&#x2F;crio.sock</td></tr></tbody></table><p>如果同时检测到 Docker 和 containerd，则优先选择 Docker。 这是必然的，因为 Docker 18.09 附带了 containerd 并且两者都是可以检测到的， 即使你仅安装了 Docker。 如果检测到其他两个或多个运行时，kubeadm 输出错误信息并退出。</p><p>kubelet 通过内置的 <code>dockershim</code> CRI 实现与 Docker 集成。</p><p>参阅<a href="https://kubernetes.io/zh/docs/setup/production-environment/container-runtimes/">容器运行时</a> 以了解更多信息。</p><h4 id="安装-kubeadm、kubelet-和-kubectl"><a href="#安装-kubeadm、kubelet-和-kubectl" class="headerlink" title="安装 kubeadm、kubelet 和 kubectl"></a>安装 kubeadm、kubelet 和 kubectl</h4><p>你需要在每台机器上安装以下的软件包：</p><ul><li><code>kubeadm</code>：用来初始化集群的指令。</li><li><code>kubelet</code>：在集群中的每个节点上用来启动 Pod 和容器等。</li><li><code>kubectl</code>：用来与集群通信的命令行工具。</li></ul><p>此处以阿里源安装为例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="hljs-string">&gt; [kubernetes]</span><br><span class="hljs-string">&gt; name=Kubernetes</span><br><span class="hljs-string">&gt; baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="hljs-string">&gt; enabled=1</span><br><span class="hljs-string">&gt; gpgcheck=1</span><br><span class="hljs-string">&gt; repo_gpgcheck=0</span><br><span class="hljs-string">&gt; gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="hljs-string">&gt; EOF</span><br></code></pre></td></tr></table></figure><blockquote><p>ps: 由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用 <code>yum install -y --nogpgcheck kubelet kubeadm kubectl</code> 安装；或者关闭<code>repo_gpgcheck</code>，否则yum安装时会报错<code>https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/repodata/repomd.xml: [Errno -1] repomd.xml signature could not be verified for kubernetes</code></p></blockquote><p>将 SELinux 设置为 permissive 模式（相当于将其禁用）</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">setenforce 0<br>sed -i <span class="hljs-string">&#x27;s/^SELINUX=enforcing$/SELINUX=permissive/&#x27;</span> /etc/selinux/config<br></code></pre></td></tr></table></figure><p>安装kubeadm、kubelet 和 kubectl</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">yum install -y kubelet kubeadm kubectl <span class="hljs-attribute">--disableexcludes</span>=kubernetes<br>systemctl <span class="hljs-built_in">enable</span> --now kubelet<br></code></pre></td></tr></table></figure><p>关闭swap（1.8版本以后必须，否则报错）</p><ul><li>swapoff -a 临时关闭</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master etc]<span class="hljs-comment"># swapoff -a  # 临时关闭</span><br>[root@master etc]<span class="hljs-comment"># free -m</span><br>              total        used        free      shared  buff/cache   available<br>Mem:           1980         312         134          17        1533        1486<br>Swap:             0           0           0<br></code></pre></td></tr></table></figure><ul><li>在&#x2F;etc&#x2F;fstab中注视掉swap（永久）</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master etc]<span class="hljs-comment">#sed -i &quot;s/\/dev\/mapper\/centos-swap/\#\/dev\/mapper\/centos-swap/g&quot; /etc/fstab</span><br>[root@master etc]<span class="hljs-comment"># mount -a # 修改后重新挂载全部挂载点</span><br></code></pre></td></tr></table></figure><h3 id="5-2-节点初始化"><a href="#5-2-节点初始化" class="headerlink" title="5.2 节点初始化"></a>5.2 节点初始化</h3><h4 id="master-节点初始化"><a href="#master-节点初始化" class="headerlink" title="master 节点初始化"></a>master 节点初始化</h4><p>初始化master节点，kubeadm init命令支持两种初始化方式，一是通过命令行选项传递关键的部署设定，另一个是基于yaml格式的专用配置文件，后一种允许用户自定义各个部署参数。</p><p>命令中的各选项简单说明如下：</p><ul><li>–pod-network-cidr：Pod网络的地址范围，其值为CIDR格式的网络地址，通常，Flannel网络插件的默认为10.244.0.0&#x2F;16，Project Calico插件的默认值为192.168.0.0&#x2F;16；</li><li>–service-cidr：Service的网络地址范围，其值为CIDR格式的网络地址，默认为10.96.0.0&#x2F;12；通常，<code>仅Flannel一类的网络插件需要手动指定该地址</code>；</li><li>–apiserver-advertise-address：apiserver通告给其他组件的IP地址，一般应该为Master节点的用于集群内部通信的IP地址，0.0.0.0表示节点上所有可用地址；</li><li>–token-ttl：共享令牌（token）的过期时长，默认为24小时，0表示永不过期；为防止不安全存储等原因导致的令牌泄露危及集群安全，建议为其设定过期时长。未设定该选项时，在token过期后，若期望再向集群中加入其它节点，可以使用如下命令重新创建token，并生成节点加入命令。</li></ul><p>有关 <code>kubeadm init</code> 参数的更多信息，请参见 <a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/">kubeadm 参考指南</a>。</p><p>要使用配置文件配置 <code>kubeadm init</code> 命令，请参见<a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/#config-file">带配置文件使用 kubeadm init</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment">#   kubeadm init --apiserver-advertise-address=192.168.68.151 --service-cidr=10.1.0.0/16 --pod-network-cidr=10.244.0.0/16  # 151是mater本机的ip</span><br>[init] Using Kubernetes version: v1.23.5<br>[preflight] Running pre-flight checks<br>[WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not <span class="hljs-keyword">function</span> correctly<br>[WARNING Service-Kubelet]: kubelet service is not enabled, please run <span class="hljs-string">&#x27;systemctl enable kubelet.service&#x27;</span><br>[preflight] Pulling images required <span class="hljs-keyword">for</span> setting up a Kubernetes cluster<br>[preflight] This might take a minute or two, depending on the speed of your internet connection<br>[preflight] You can also perform this action <span class="hljs-keyword">in</span> beforehand using <span class="hljs-string">&#x27;kubeadm config images pull&#x27;</span><br>[certs] Using certificateDir folder <span class="hljs-string">&quot;/etc/kubernetes/pki&quot;</span><br>[certs] Generating <span class="hljs-string">&quot;ca&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;apiserver&quot;</span> certificate and key<br>[certs] apiserver serving cert is signed <span class="hljs-keyword">for</span> DNS names [kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local master] and IPs [10.1.0.1 192.168.68.151]<br>[certs] Generating <span class="hljs-string">&quot;apiserver-kubelet-client&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;front-proxy-ca&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;front-proxy-client&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;etcd/ca&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;etcd/server&quot;</span> certificate and key<br>[certs] etcd/server serving cert is signed <span class="hljs-keyword">for</span> DNS names [localhost master] and IPs [192.168.68.151 127.0.0.1 ::1]<br>[certs] Generating <span class="hljs-string">&quot;etcd/peer&quot;</span> certificate and key<br>[certs] etcd/peer serving cert is signed <span class="hljs-keyword">for</span> DNS names [localhost master] and IPs [192.168.68.151 127.0.0.1 ::1]<br>[certs] Generating <span class="hljs-string">&quot;etcd/healthcheck-client&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;apiserver-etcd-client&quot;</span> certificate and key<br>[certs] Generating <span class="hljs-string">&quot;sa&quot;</span> key and public key<br>[kubeconfig] Using kubeconfig folder <span class="hljs-string">&quot;/etc/kubernetes&quot;</span><br>[kubeconfig] Writing <span class="hljs-string">&quot;admin.conf&quot;</span> kubeconfig file<br>[kubeconfig] Writing <span class="hljs-string">&quot;kubelet.conf&quot;</span> kubeconfig file<br>[kubeconfig] Writing <span class="hljs-string">&quot;controller-manager.conf&quot;</span> kubeconfig file<br>[kubeconfig] Writing <span class="hljs-string">&quot;scheduler.conf&quot;</span> kubeconfig file<br>[kubelet-start] Writing kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[kubelet-start] Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[kubelet-start] Starting the kubelet<br>[control-plane] Using manifest folder <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[control-plane] Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-apiserver&quot;</span><br>[control-plane] Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-controller-manager&quot;</span><br>[control-plane] Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-string">&quot;kube-scheduler&quot;</span><br>[etcd] Creating static Pod manifest <span class="hljs-keyword">for</span> <span class="hljs-built_in">local</span> etcd <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span><br>[wait-control-plane] Waiting <span class="hljs-keyword">for</span> the kubelet to boot up the control plane as static Pods from directory <span class="hljs-string">&quot;/etc/kubernetes/manifests&quot;</span>. This can take up to 4m0s<br>[apiclient] All control plane components are healthy after 6.003818 seconds<br>[upload-config] Storing the configuration used <span class="hljs-keyword">in</span> ConfigMap <span class="hljs-string">&quot;kubeadm-config&quot;</span> <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-system&quot;</span> Namespace<br>[kubelet] Creating a ConfigMap <span class="hljs-string">&quot;kubelet-config-1.23&quot;</span> <span class="hljs-keyword">in</span> namespace kube-system with the configuration <span class="hljs-keyword">for</span> the kubelets <span class="hljs-keyword">in</span> the cluster<br>NOTE: The <span class="hljs-string">&quot;kubelet-config-1.23&quot;</span> naming of the kubelet ConfigMap is deprecated. Once the UnversionedKubeletConfigMap feature gate graduates to Beta the default name will become just <span class="hljs-string">&quot;kubelet-config&quot;</span>. Kubeadm upgrade will handle this transition transparently.<br>[upload-certs] Skipping phase. Please see --upload-certs<br>[mark-control-plane] Marking the node master as control-plane by adding the labels: [node-role.kubernetes.io/master(deprecated) node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]<br>[mark-control-plane] Marking the node master as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule]<br>[bootstrap-token] Using token: v7a8ke.zqnhzofo3cn69lge<br>[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles<br>[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes<br>[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs <span class="hljs-keyword">in</span> order <span class="hljs-keyword">for</span> nodes to get long term certificate credentials<br>[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token<br>[bootstrap-token] configured RBAC rules to allow certificate rotation <span class="hljs-keyword">for</span> all node client certificates <span class="hljs-keyword">in</span> the cluster<br>[bootstrap-token] Creating the <span class="hljs-string">&quot;cluster-info&quot;</span> ConfigMap <span class="hljs-keyword">in</span> the <span class="hljs-string">&quot;kube-public&quot;</span> namespace<br>[kubelet-finalize] Updating <span class="hljs-string">&quot;/etc/kubernetes/kubelet.conf&quot;</span> to point to a rotatable kubelet client certificate and key<br>[addons] Applied essential addon: CoreDNS<br>[addons] Applied essential addon: kube-proxy<br><br>Your Kubernetes control-plane has initialized successfully!<br><br>To start using your cluster, you need to run the following as a regular user:<br><br>  <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>  sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>  sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><br>Alternatively, <span class="hljs-keyword">if</span> you are the root user, you can run:<br><br>  <span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf<br><br>You should now deploy a pod network to the cluster.<br>Run <span class="hljs-string">&quot;kubectl apply -f [podnetwork].yaml&quot;</span> with one of the options listed at:<br>  https://kubernetes.io/docs/concepts/cluster-administration/addons/<br><br>Then you can <span class="hljs-built_in">join</span> any number of worker nodes by running the following on each as root:<br><br>kubeadm <span class="hljs-built_in">join</span> 192.168.68.151:6443 --token v7a8ke.zqnhzofo3cn69lge \<br>--discovery-token-ca-cert-hash sha256:6d362f1c226c8e8ae42a87f57608264104b58abd7ec5cfde4795353eba8c4a11<br></code></pre></td></tr></table></figure><p>初始化前可以输入<code>kubeadm config images pull</code> 事先拉取相关镜像, 加快初始化速度</p><p>如果<code>kubeadm</code>初始化时出现问题，参考官方<a href="https://kubernetes.io/zh/docs/setup/production-environment/tools/kubeadm/troubleshooting-kubeadm/">故障排查手册</a></p><p>按照说明，添加cluster相关配置：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 普通用户</span><br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/.kube<br>sudo <span class="hljs-built_in">cp</span> -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config<br>sudo <span class="hljs-built_in">chown</span> $(<span class="hljs-built_in">id</span> -u):$(<span class="hljs-built_in">id</span> -g) <span class="hljs-variable">$HOME</span>/.kube/config<br><span class="hljs-comment"># root用户</span><br><span class="hljs-built_in">export</span> KUBECONFIG=/etc/kubernetes/admin.conf<br></code></pre></td></tr></table></figure><p>此时检查 pods， 发现 coredns 在pending，是因为在等待网络插件的安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master .kube]<span class="hljs-comment"># kubectl get pods --all-namespaces</span><br>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-64897985d-7d9cf          0/1     Pending   0          17m<br>kube-system   coredns-64897985d-gdkpg          0/1     Pending   0          17m<br>kube-system   etcd-master                      1/1     Running   0          17m<br>kube-system   kube-apiserver-master            1/1     Running   0          17m<br>kube-system   kube-controller-manager-master   1/1     Running   0          17m<br>kube-system   kube-proxy-4cv47                 1/1     Running   0          17m<br>kube-system   kube-scheduler-master            1/1     Running   1          17m<br></code></pre></td></tr></table></figure><p>还有非常重要的一步是 <strong>部署网络插件</strong> ,参考 <a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/networking/#how-to-implement-the-kubernetes-networking-model">插件列表</a> ， 这里我们选择安装 <a href="https://github.com/flannel-io/flannel#flannel">Flannel</a></p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br>Warning: policy/v1beta1 PodSecurityPolicy is deprecated <span class="hljs-keyword">in</span> v1.21+, unavailable <span class="hljs-keyword">in</span> v1.25+<br>podsecuritypolicy.policy/psp.flannel.unprivileged created<br>clusterrole.rbac.authorization.k8s.io/flannel created<br>clusterrolebinding.rbac.authorization.k8s.io/flannel created<br>serviceaccount/flannel created<br>configmap/kube-flannel-cfg created<br>daemonset.apps/kube-flannel-ds created<br></code></pre></td></tr></table></figure><p>此时再次检查pods:</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 此时coredns的pods也变成了Running状态</span><br>[root@master ~]<span class="hljs-comment"># kubectl get pods -A</span><br>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-64897985d-7d9cf          0/1     Running   0          130m<br>kube-system   coredns-64897985d-gdkpg          0/1     Running   0          130m<br>kube-system   etcd-master                      1/1     Running   0          131m<br>kube-system   kube-apiserver-master            1/1     Running   0          131m<br>kube-system   kube-controller-manager-master   1/1     Running   0          131m<br>kube-system   kube-flannel-ds-5kwrh            1/1     Running   0          95s<br>kube-system   kube-proxy-4cv47                 1/1     Running   0          130m<br>kube-system   kube-scheduler-master            1/1     Running   1          131m<br><br><span class="hljs-comment">## 此时只有一个node</span><br>[root@master ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME     STATUS   ROLES                  AGE    VERSION<br>master   Ready    control-plane,master   132m   v1.23.5<br></code></pre></td></tr></table></figure><h4 id="slave节点加入集群"><a href="#slave节点加入集群" class="headerlink" title="slave节点加入集群"></a>slave节点加入集群</h4><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@node-1 ~]<span class="hljs-comment"># kubeadm join 192.168.68.151:6443 --token v7a8ke.zqnhzofo3cn69lge --discovery-token-ca-cert-hash sha256:6d362f1c226c8e8ae42a87f57608264104b58abd7ec5cfde4795353eba8c4a11</span><br>[preflight] Running pre-flight checks<br>^C<br>[root@node-1 ~]<span class="hljs-comment"># kubeadm join 192.168.68.151:6443 --token v7a8ke.zqnhzofo3cn69lge --discovery-token-ca-cert-hash sha256:6d362f1c226c8e8ae42a87f57608264104b58abd7ec5cfde4795353eba8c4a11</span><br>[preflight] Running pre-flight checks<br>[preflight] Reading configuration from the cluster...<br>[preflight] FYI: You can look at this config file with <span class="hljs-string">&#x27;kubectl -n kube-system get cm kubeadm-config -o yaml&#x27;</span><br>[kubelet-start] Writing kubelet configuration to file <span class="hljs-string">&quot;/var/lib/kubelet/config.yaml&quot;</span><br>[kubelet-start] Writing kubelet environment file with flags to file <span class="hljs-string">&quot;/var/lib/kubelet/kubeadm-flags.env&quot;</span><br>[kubelet-start] Starting the kubelet<br>[kubelet-start] Waiting <span class="hljs-keyword">for</span> the kubelet to perform the TLS Bootstrap...<br><br>This node has joined the cluster:<br>* Certificate signing request was sent to apiserver and a response was received.<br>* The Kubelet was informed of the new secure connection details.<br><br>Run <span class="hljs-string">&#x27;kubectl get nodes&#x27;</span> on the control-plane to see this node <span class="hljs-built_in">join</span> the cluster.<br></code></pre></td></tr></table></figure><p>如法炮制将node-2、node-3 也加入，此时查看nodes状态，由notready变为ready</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME     STATUS     ROLES                  AGE    VERSION<br>master   Ready      control-plane,master   167m   v1.23.5<br>node-1   NotReady   &lt;none&gt;                 40s    v1.23.5<br>node-2   NotReady   &lt;none&gt;                 45s    v1.23.5<br>node-3   NotReady   &lt;none&gt;                 61s    v1.23.5<br>[root@master ~]<span class="hljs-comment"># kubectl get nodes</span><br>NAME     STATUS   ROLES                  AGE     VERSION<br>master   Ready    control-plane,master   173m    v1.23.5<br>node-1   Ready    &lt;none&gt;                 6m33s   v1.23.5<br>node-2   Ready    &lt;none&gt;                 6m38s   v1.23.5<br>node-3   Ready    &lt;none&gt;                 6m54s   v1.23.5<br></code></pre></td></tr></table></figure><p>查看pods</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">[root@master ~]<span class="hljs-comment"># kubectl get pods -A</span><br>NAMESPACE     NAME                             READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-64897985d-7d9cf          1/1     Running   0          177m<br>kube-system   coredns-64897985d-gdkpg          1/1     Running   0          177m<br>kube-system   etcd-master                      1/1     Running   0          177m<br>kube-system   kube-apiserver-master            1/1     Running   0          177m<br>kube-system   kube-controller-manager-master   1/1     Running   0          177m<br>kube-system   kube-flannel-ds-5kwrh            1/1     Running   0          48m<br>kube-system   kube-flannel-ds-hgcb4            1/1     Running   0          10m<br>kube-system   kube-flannel-ds-hmthh            1/1     Running   0          10m<br>kube-system   kube-flannel-ds-w7wl5            1/1     Running   0          10m<br>kube-system   kube-proxy-2mk4k                 1/1     Running   0          10m<br>kube-system   kube-proxy-4cv47                 1/1     Running   0          177m<br>kube-system   kube-proxy-s6d6h                 1/1     Running   0          10m<br>kube-system   kube-proxy-zlj2x                 1/1     Running   0          10m<br>kube-system   kube-scheduler-master            1/1     Running   1          177m<br></code></pre></td></tr></table></figure><p>至此一个master，三个node的kubernetes集群基础设施已经部署完成</p><h3 id="5-x-踩到的坑"><a href="#5-x-踩到的坑" class="headerlink" title="5.x 踩到的坑"></a>5.x 踩到的坑</h3><ul><li><p>kubeadm 初始化报错<code>18797 server.go:302] &quot;Failed to run kubelet&quot; err=&quot;failed to run Kubelet: misconfiguration: kubelet cgroup driver: \&quot;systemd\&quot; is different from docker cgroup driver: \&quot;cgroupfs\&quot;&quot;</code></p><p>原因</p><p>　kubernetes1.14之后的版本推荐使用systemd,但docker默认的Cgroup Driver 是Cgroup，使得kubelet部署报错</p><p>解决方案</p><p>修改docker配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> &lt;&lt;<span class="hljs-string">EOF | sudo tee /etc/docker/daemon.json</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;exec-opts&quot;: [&quot;native.cgroupdriver=systemd&quot;],</span><br><span class="hljs-string">  &quot;log-driver&quot;: &quot;json-file&quot;,</span><br><span class="hljs-string">  &quot;log-opts&quot;: &#123;</span><br><span class="hljs-string">    &quot;max-size&quot;: &quot;100m&quot;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;storage-driver&quot;: &quot;overlay2&quot;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><p>完成后重启docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">enable</span> docker<br>systemctl daemon-reload<br>systemctl restart docker<br></code></pre></td></tr></table></figure></li><li><p>kubeadm初始化时拉取镜像超时，</p><p>原因 谷歌repo被墙</p><p>解决方案</p><p><code>kubeadm init</code>初始化时加入<code>--image-repository registry.aliyuncs.com/google_containers</code>, 或者在上一步中更换为阿里源</p></li></ul>]]></content>
    
    
    <summary type="html">K8s环境部署及安装，暂时采用kubeadm方式安装，后续考虑二进制部署</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    <category term="Cloud" scheme="http://www.qintianjun.top/categories/Ops/Cloud/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
    <category term="k8s" scheme="http://www.qintianjun.top/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack学习笔记-深入salt内部</title>
    <link href="http://www.qintianjun.top/2021/07/11/SaltStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5salt%E5%86%85%E9%83%A8/"/>
    <id>http://www.qintianjun.top/2021/07/11/SaltStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%B7%B1%E5%85%A5salt%E5%86%85%E9%83%A8/</id>
    <published>2021-07-11T07:29:30.000Z</published>
    <updated>2023-02-24T08:04:53.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="6-继续深入salt内部"><a href="#6-继续深入salt内部" class="headerlink" title="6 继续深入salt内部"></a>6 继续深入salt内部</h1><h2 id="6-1-salt配置"><a href="#6-1-salt配置" class="headerlink" title="6.1 salt配置"></a>6.1 salt配置</h2><p>在<code>/etc/salt</code>目录下通常会看到有master和minion文件，分别对应其配置。<br>有一些用户由于组织需要，需要将这些配置划分到更小的配置文件中。更重要的原因是Salt能够管理自身，相对于使用一个超大的配置文件来说，将它们按照需要划分到更小的、独立的、模板化的文件中更容易管理。<br>因此Master也会默认引入在<code>/etc/salt/master.d/</code>目录（Minion对应的是 minion.d目录）中以.conf为扩展名的文件。这和很多其他服务的设计一样，使用类似的目录结构。</p><p>和Salt其他地方的配置格式一样，这些核心配置文件的格式必须是YAML格式的。</p><h2 id="6-2-管理salt密钥"><a href="#6-2-管理salt密钥" class="headerlink" title="6.2 管理salt密钥"></a>6.2 管理salt密钥</h2><p>在<code>/etc/salt</code>目录下有一个pki目录，下面会有master&#x2F;和minion目录，分别用来存放对应的公钥和私钥。</p><p>minion上的<code>/etc/salt/pki/minion</code>目录下只会有3个文件:</p><ul><li>minion.pem minion的RSA私钥</li><li>minion.pub minion的RSA公钥</li><li>minion_master.pub master的RSA公钥</li></ul><p>master端也会将它的RSA密钥存放在<code>/etc/salt/pki/master/</code>目录下（master.pem和master.pub），同时这个目录下对应还有至少三个目录：</p><ul><li>minoins.pre 还未被接受的minion端RSA公钥</li><li>minions 被接受的minion端RSA公钥</li><li>minions_rejected 被拒绝的minion端RSA公钥</li></ul><h2 id="6-3-salt缓存"><a href="#6-3-salt缓存" class="headerlink" title="6.3 salt缓存"></a>6.3 salt缓存</h2><p>salt同时也维护了一个缓存目录，通常在<code>/var/cache/salt/</code>下。</p><h3 id="master端任务缓存"><a href="#master端任务缓存" class="headerlink" title="master端任务缓存"></a>master端任务缓存</h3><p>你每天可能最常用的第一个缓存目录是jobs&#x2F;录在默认配置中，该目录存储所有Master执行的任务数据。</p><p>这个目录使用hash映射（hashmap）样式存储。hash映射样式是指每条信息（本例中是任务ID或JID）通过hash算法进行运算，然后按照hash值的全部或一部分内容创建目录或目录结构。在本例中，使用分片hash模式，使用hash值的前两个字符创建父目录，子目录以切除前两个字符后的hash内容进行创建。<br>Salt默认使用的hash类型是MD5，算法可以通过修改 Master hash type的值进行调整:<code>hash type: md5</code></p><h3 id="minion端缓存的两个重要目录"><a href="#minion端缓存的两个重要目录" class="headerlink" title="minion端缓存的两个重要目录"></a>minion端缓存的两个重要目录</h3><p>minion端主要维护缓存两个目录:</p><ul><li><p>proc目录<br>这个目录主要是维护当前minion正在运行的任务数据<br>通过给minion下发一个sleep命令操作，可以非常容易地看到这个目录</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">salt <span class="hljs-string">&#x27;salt-minion2&#x27;</span> test.<span class="hljs-built_in">sleep</span> <span class="hljs-number">20</span> --async <span class="hljs-meta"># async参数表示异步，master端会立即返回一个jid后退出</span><br></code></pre></td></tr></table></figure><p>此时查看minion端：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[root@salt-minion2 minion]<span class="hljs-comment"># find . -type f -mmin -1</span><br>.<span class="hljs-regexp">/proc/</span><span class="hljs-number">20190414155119820447</span><br></code></pre></td></tr></table></figure><p>可以清楚看到任务文件被创建，执行完成后消失。</p></li><li><p>extendmods目录<br>这个目录是用于存放从master上同步到minion上的用户自定义模块，在master上的<code>/srv/salt</code>创建一个_modules目录，写入如下内容：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@salt</span>-minion2 modules]<span class="hljs-meta"># cat mytest.py </span><br>def <span class="hljs-built_in">ping</span>():<br>  <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>接下来使用命令同步模块到minion:</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">_modules</span>]<span class="hljs-comment"># salt &#x27;salt-minion2&#x27;  saltutil.sync_modules</span><br>salt-minion2:<br>    - modules.mytest  <span class="hljs-comment"># 返回同步完成</span><br></code></pre></td></tr></table></figure><p>接下来可以在minion端extmods&#x2F;modules目录下看到这个文件，同时可以在master上执行自定义方法：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">_modules</span>]<span class="hljs-comment"># salt &#x27;salt-minion2&#x27; mytest.ping</span><br>salt-minion2:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="6-4-事件系统"><a href="#6-4-事件系统" class="headerlink" title="6.4 事件系统"></a>6.4 事件系统</h2><h3 id="6-4-1-通用事件"><a href="#6-4-1-通用事件" class="headerlink" title="6.4.1 通用事件"></a>6.4.1 通用事件</h3><p>在salt内部有一些非常通用的事件，一部分只应用在salt内部的子模块中，了解这些事件以及它们如何工作将会在构建反应器（Reactor）时非常有益。</p><h4 id="salt-x2F-auth"><a href="#salt-x2F-auth" class="headerlink" title="salt&#x2F;auth"></a>salt&#x2F;auth</h4><p>minion会使用该事件定期完成与master的重认证，payload中包含：</p><ul><li>act: 指定该minion当前的状态</li><li>id: 表示该minion的ID</li><li>pub：指定该minion的RSA公钥</li><li>result：指定该请求是否成功</li></ul><h4 id="salt-x2F-key"><a href="#salt-x2F-key" class="headerlink" title="salt&#x2F;key"></a>salt&#x2F;key</h4><p>master端发送给minion端，告诉它密钥被ACCEPT或者REJECT的状态</p><ul><li>id: 指定该minion的ID</li><li>act: 表示该minion的新状态</li></ul><h4 id="salt-x2F-minion-x2F-x2F-start"><a href="#salt-x2F-minion-x2F-x2F-start" class="headerlink" title="salt&#x2F;minion&#x2F;&#x2F;start"></a>salt&#x2F;minion&#x2F;<minion_id>&#x2F;start</h4><p>当salt-minion进程启动时,会在接收命令前做一些工作，一旦进程启动完毕可以处理任务时就会发送这个事件，这是一个老事件，可期待未来的版本移除。</p><ul><li>cmd: 用于告诉salt这是一个什么类型事件</li><li>data: 指定salt什么时候启动</li><li>id: 指定该minion的id</li><li>pretag：salt内部用于产生命名空间</li><li>tag: 事件标签的副本</li></ul><h4 id="salt-x2F-job-x2F-x2F-new"><a href="#salt-x2F-job-x2F-x2F-new" class="headerlink" title="salt&#x2F;job&#x2F;&#x2F;new"></a>salt&#x2F;job&#x2F;<job_id>&#x2F;new</h4><p>当创建一个新任务时，将发送该时间，包含任务的元数据，payload包含：</p><ul><li>arg: 指定要传递给方法的参数</li><li>fun: 指定要调用哪个方法</li><li>jid: 指定任务的ID</li><li>minions: 表示需要执行该任务的minion列表</li><li>tgt：指定该任务的target</li><li>tgt_type: 指定该任务的target类型</li><li>user: 指定初始化该任务的用户，如果用户使用sudo,将在用户名称前增加sudo</li></ul><h4 id="salt-x2F-job-x2F-x2F-ret-x2F"><a href="#salt-x2F-job-x2F-x2F-ret-x2F" class="headerlink" title="salt&#x2F;job&#x2F;&#x2F;ret&#x2F;"></a>salt&#x2F;job&#x2F;<job_id>&#x2F;ret&#x2F;<minion_id></h4><p>一旦minion完成了任务, 它会发送一个返回数据的事件，payload包含：</p><ul><li>cmd: 这是另一个告诉salt这是什么类型事件的指标</li><li>func: 类似于salt&#x2F;job&#x2F;<job_id>&#x2F;new,指定当时调用的是哪个方法</li><li>func_args: 类似于之前的args, 指定传递给该方法的参数</li><li>id: 指定是哪个minion返回的数据</li><li>jid: 指定任务ID</li><li>retcode: 指定在处理任务时进程的返回代码</li><li>return：指定任务所有的返回数据，跟据执行任务的不同或长或短。</li><li>success：任务是否成功完成</li></ul><h4 id="salt-x2F-presence-x2F-present"><a href="#salt-x2F-presence-x2F-present" class="headerlink" title="salt&#x2F;presence&#x2F;present"></a>salt&#x2F;presence&#x2F;present</h4><p>只有当master配置文件中presence_events设置为True时才会有这个事件，会定期发送包含当前连接到master上的minion列表的事件。</p><ul><li>present：指定当前连接到master上的minion列表</li></ul><h4 id="salt-x2F-presence-x2F-change"><a href="#salt-x2F-presence-x2F-change" class="headerlink" title="salt&#x2F;presence&#x2F;change"></a>salt&#x2F;presence&#x2F;change</h4><p>只有当master配置文件中presence_events设置哪位True才有这个事件，有新的minion连接到master或从master上断开连接，会发送该事件。</p><ul><li>new: 指定从上次出现事件起已经连接的minion列表</li><li>lost: 指定从上次出现的事件起已经断开连接的minion列表</li></ul><h3 id="6-4-2-通用云事件"><a href="#6-4-2-通用云事件" class="headerlink" title="6.4.2 通用云事件"></a>6.4.2 通用云事件</h3><h4 id="salt-x2F-cloud-x2F-x2F-creating"><a href="#salt-x2F-cloud-x2F-x2F-creating" class="headerlink" title="salt&#x2F;cloud&#x2F;&#x2F;creating"></a>salt&#x2F;cloud&#x2F;<vm_name>&#x2F;creating</h4><p>该事件关于虚拟机创建的，payload包含：</p><ul><li>name: 要创建虚拟机的名字</li><li>provider：指定要应用云供应商的名字</li><li>profile： 指定要使用profile的配置</li></ul><h4 id="salt-x2F-cloud-x2F-x2F-requesting"><a href="#salt-x2F-cloud-x2F-x2F-requesting" class="headerlink" title="salt&#x2F;cloud&#x2F;&#x2F;requesting"></a>salt&#x2F;cloud&#x2F;<vm_name>&#x2F;requesting</h4><p>当所有用于创建虚拟机需要的信息收集后，salt clou会从云供应商处产生一个虚拟机创建完毕的请求，payload包含：</p><ul><li>kwargs: 指定来自于云供应商的所有参数，使用profile，用于搜集该请求的云拓扑</li></ul><h4 id="salt-x2F-cloud-x2F-x2F-querying"><a href="#salt-x2F-cloud-x2F-x2F-querying" class="headerlink" title="salt&#x2F;cloud&#x2F;&#x2F;querying"></a>salt&#x2F;cloud&#x2F;<vm_name>&#x2F;querying</h4><p>云供应商开始处理创建一个虚拟机并返回 Salt Cloud能够用于指向的ID。然而，它井不返回 Salt Cloud Salt Cloud会等待虚拟机的IP地址变成可状态。有效装载中将包含如下数据：</p><ul><li>instance_id:指定云供应商需要知道的创建的虚拟机ID。它可能并不会对正的虚拟机名称或 Minion ID</li></ul><h4 id="salt-x2F-cloud-x2F-＜vm-name＞-x2F-waiting-for-ssh"><a href="#salt-x2F-cloud-x2F-＜vm-name＞-x2F-waiting-for-ssh" class="headerlink" title="salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;waiting_for_ssh"></a>salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;waiting_for_ssh</h4><p>当返回一个虚拟机IP地址时，并不代表虚拟机可用 Salt Cloud会等待虚拟机变成可用并且可以响应SSH连接。有效装载中将包含如下数据：</p><ul><li>ip_address:表示用于连接该虚拟机的主机名或IP地址。</li></ul><h4 id="salt-x2F-cloud-x2F-＜vm-name＞-x2F-deploying"><a href="#salt-x2F-cloud-x2F-＜vm-name＞-x2F-deploying" class="headerlink" title="salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;deploying"></a>salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;deploying</h4><p>虚拟机现在可以通过SSH访问（Windows WinRM）。部署（或 Windows Minion配置）会上传上去后部署脚本（或Windows安装器）会执行。有效装载中将包含如下数据。</p><ul><li>name:指定已经创建的虚拟机名字。</li><li>kwargs:用于部署Salt到目标系统上的参数。它会是非常长的列表，有一些项部署脚本的内容）会非常长。</li></ul><h4 id="salt-x2F-cloud-x2F-＜vm-name＞-x2F-created"><a href="#salt-x2F-cloud-x2F-＜vm-name＞-x2F-created" class="headerlink" title="salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;created"></a>salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;created</h4><p>虚拟机已成功创建。这并不一定表示salt- minion进程已经可以接收连接，有可能现在还在启动阶段。此时有可能因为防火墙问题，或者其他原因导致部署脚本或 Windows安装器安装失败。如果你想等到 Minionminion&#x2F;minionid＞ startscloud&#x2F;＜ name＞&#x2F;created标签。有效装载中将包含如下数据。</p><ul><li>name:指定已经创建的虚拟机名字。</li><li>provider:表示使用的供应商配置的名字。 </li><li>profile Profile配置的名字。</li><li>instanceidMinionID不一致。</li></ul><h4 id="salt-x2F-cloud-x2F-＜vm-name-x2F-destorying"><a href="#salt-x2F-cloud-x2F-＜vm-name-x2F-destorying" class="headerlink" title="salt&#x2F;cloud&#x2F;＜vm_name&#x2F;destorying"></a>salt&#x2F;cloud&#x2F;＜vm_name&#x2F;destorying</h4><p>Salt Cloud可以产生一个请求给云供应商用来销毁一个虚拟机。每个云供应商驱动都必须支持该标签。有效装载中将包含如下数据。</p><ul><li>name: 指定需要销毁的虚拟机名字。</li></ul><h4 id="salt-x2F-cloud-x2F-＜vm-name＞-x2F-destoryed"><a href="#salt-x2F-cloud-x2F-＜vm-name＞-x2F-destoryed" class="headerlink" title="salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;destoryed"></a>salt&#x2F;cloud&#x2F;＜vm_name＞&#x2F;destoryed</h4><p>Salt Cloud已经销毁该虚拟机。每个云供应商驱动都必须支持该标签。有效装载中将包含女下数据。</p><ul><li>name: 表示刚刚完成销毁的虚拟机的名字。</li></ul><h3 id="6-1-3-salt-API-事件"><a href="#6-1-3-salt-API-事件" class="headerlink" title="6.1.3 salt API 事件"></a>6.1.3 salt API 事件</h3><p>Salt API是Salt内置的API守护进程，它为取代命令行方式来控制Salt提供了REST接需要注意的是 Salt APIwebhook发送自定义事件的特性。稍后将在 Salt API部分做详细描述。</p><h4 id="salt-x2F-netapi-x2F"><a href="#salt-x2F-netapi-x2F" class="headerlink" title="salt&#x2F;netapi&#x2F;"></a>salt&#x2F;netapi&#x2F;<url_path></h4><p>真实的URL路径依赖于salt api的配置，通常情况下会包含一个hook-to单词来表示它是个webhook，随后跟着一个斜线及任意的命令，payload:</p><ul><li>data: 表示用于POST给salt API URL的自定义数据。</li></ul><h2 id="6-5-反应器（Reactor）"><a href="#6-5-反应器（Reactor）" class="headerlink" title="6.5 反应器（Reactor）"></a>6.5 反应器（Reactor）</h2><p>salt与其他类似的系统的一个重大区别特性是，它不仅能发送事件，而且master能够基于时间中的事件来产生新的任务，为用户提供一个构件异步和自主式的系统。</p><h3 id="6-5-1-配置反应器"><a href="#6-5-1-配置反应器" class="headerlink" title="6.5.1 配置反应器"></a>6.5.1 配置反应器</h3><p>反应器是master端进程，不需要直接在master端做任何配置，事实上反应器需要监听事件总线来确定它需要执行什么。一般情况下，反应器存放在<code>/srv/reactor/</code>目录下。</p><p>反应器需要在master配置文件中配置，它包含<strong>标签映射</strong>以及<strong>当发现标签时应该执行的SLS文件列表</strong>，例如:</p><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">reactor:<br>  - <span class="hljs-string">&#x27;salt/minion/*/start/&#x27;</span>:<br>    - <span class="hljs-regexp">/srv/</span>reactor/highstate.sls<br></code></pre></td></tr></table></figure><p>这是一个简单的反应器，它会等待minion完全启动并且准备接受指令时，调用highstate文件以响应。</p><p>一些注意事项：</p><ul><li>在反应器系统中，事件标签会以glob通配方式进行解析，允许利用命令空间标签，基于来自特定minion事件的生成任务进行处理</li><li>标签（tag）和sls文件列表样式的，反应器系统中有多少需要关注的标签以及一个标签对应多少sls文件并没有什么硬性限制，但反应器是顶级声明，不能在master配置文件里配置多个反应器。</li></ul><h3 id="6-5-2-编写反应器"><a href="#6-5-2-编写反应器" class="headerlink" title="6.5.2 编写反应器"></a>6.5.2 编写反应器</h3><p>反应器默认采用YAML格式，也允许salt支持的其他格式，反应器sls文件包含三个部分：<code>一个ID起始</code>,<code>指定方法</code>,<code>该方法的参数</code>，如下：</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">highstate_run:  <span class="hljs-comment"># ID</span><br>  cmd.<span class="hljs-keyword">state</span>.highstate  <span class="hljs-comment"># 功能模块</span><br>    - tgt: &#123;&#123;id&#125;&#125;  <span class="hljs-comment"># 功能模块需要的参数</span><br></code></pre></td></tr></table></figure><p>其中功能模块支持三种不同种类的方法：</p><ul><li>执行模块</li><li>runner</li><li>wheel</li></ul><p>使用时需要在方法名字前分别加上cmd\runner\wheel</p><h3 id="6-5-3-调用执行模块"><a href="#6-5-3-调用执行模块" class="headerlink" title="6.5.3 调用执行模块"></a>6.5.3 调用执行模块</h3><p>执行模块作为salt的基础是反应器中最长用的类型。执行模块运行在minion端，需要在salt命令中指出有哪些minion作为目标(target)需要执行。这个目标对应到反应器中是<code>tgt</code>。如果不想使用默认的<code>glob</code>，需要通过<code>tgt_type</code>来声明目标类型。</p><p>在反应中支持如下目标类型：</p><ul><li>glob</li><li>pcre</li><li>list</li><li>grain</li><li>grain_pcre</li><li>pillar</li><li>nodegroup</li><li>range</li><li>compound</li></ul><p>大多数执行模块需要指定参数列表，在反应器中可以通过arg或kwargs进行声明，arg参数包括需要传递给方法的参数列表，通过顺序来指定传递的位置。</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kilroy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">cmd.cmd.run</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tgt: &#123;&#123; id &#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">arg:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;touch /tmp/kilroy_was_herer&#x27;</span><br></code></pre></td></tr></table></figure><p>kwargs参数包含一个需要传递给方法的参数名称以及对应值的字典。</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">kilroy</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">cmd.cmd.run</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">tgt: &#123;&#123; id &#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">kwarg:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;touch /tmp/kilroy_was_herer&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="6-5-4-调用runner模块"><a href="#6-5-4-调用runner模块" class="headerlink" title="6.5.4 调用runner模块"></a>6.5.4 调用runner模块</h3><p>runner模块运行在master端，因此不需要指定运行目标（target）,但是arg参数和kwarg参数依然可用，使用方法和执行模块一样：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">webhook1:<br>  runner.http.query:<br>    - arg:<br>      - http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/path/</span>to/webhook<br>webhook2:<br>  runner.http.query:<br>    - arg:<br>      - http:<span class="hljs-regexp">//</span>example.com<span class="hljs-regexp">/path/</span>toanother/webhook<br></code></pre></td></tr></table></figure><h3 id="6-5-5-调用wheel模块"><a href="#6-5-5-调用wheel模块" class="headerlink" title="6.5.5 调用wheel模块"></a>6.5.5 调用wheel模块</h3><p>wheel模块设计用于管理master自身，因此也不需要指定运行目标。</p><p>在wheel反应器中最常见的用法是接收或删除master上minion的key:</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">accept_minion:</span><br><span class="language-xml">  wheel.key.accept:</span><br><span class="language-xml">    - match: </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">data</span>[&#x27;name&#x27;] &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>使用wheel反应器时需要格外小心，尤其是接收minion key的操作。</p><p>当通过python来编写反应器时要尽可能地保持简单，因为slat每次只能执行一个反应器，复杂的反应器会导致其他反应器排队等待它的返回。</p><h2 id="6-6-编写更复杂的反应器"><a href="#6-6-编写更复杂的反应器" class="headerlink" title="6.6 编写更复杂的反应器"></a>6.6 编写更复杂的反应器</h2><p>salt内置了丰富的模块，在反应器系统中可以实现强大的功能。接下来我们学习反应器如何使用这些模块。</p><h4 id="发送告警"><a href="#发送告警" class="headerlink" title="发送告警"></a>发送告警</h4><p>salt内置了一些模块用于对外发送告警，如smpt和http执行模块，下面我们来看一个设置简单监控的例子，它会检查minion端的磁盘使用情况，如果指定的磁盘满了，会发送一个告警。</p><ul><li><p>首先看看如何建立一个监控磁盘状态的监控state<br>创建<code>/srv/salt/monitor/disks.sls</code>文件并包含如下内容：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">root_device_size</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">disk.status</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: /</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">maxium: &#x27;90%&#x27;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">onfail_in:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">event: alert_admins_disk</span><br><br><br><span class="hljs-attribute">alert_admins_disk</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">event.send</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: alert/admins/disk</span><br></code></pre></td></tr></table></figure></li><li><p>接下来我们在master的配置文件中映射该事件标签给反应器以及pagerduty服务的配置：</p><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">739 </span>reactor:<br><span class="hljs-symbol">740 </span>  - alert/admins/disk:<br><span class="hljs-symbol">741 </span>      - /srv/reactor/disk_alert.sls<br><span class="hljs-symbol">742 </span><br><span class="hljs-symbol">743 </span>my-pagerduty-account:<br><span class="hljs-symbol">744 </span>  pagerduty.subdomain: mysubdomain<br><span class="hljs-symbol">745 </span>  pagerduty.api_key: <span class="hljs-number">1234567890</span>ABCDEF1234<br></code></pre></td></tr></table></figure></li><li><p>接下来我们会创建使用pagerduty服务的事件来创建&#x2F;srv&#x2F;reacotr&#x2F;disk_alert.sls:</p><figure class="highlight basic"><table><tr><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">1 </span>  new_instance_alert:<br><span class="hljs-symbol">2 </span>    runner.pagerduty.create_event:<br><span class="hljs-symbol">3 </span>      - kwarg:<br><span class="hljs-symbol">4 </span>          description: <span class="hljs-string">&quot;Low Disk Space: &#123;&#123; id &#125;&#125;&quot;</span><br><span class="hljs-symbol">5 </span>          details: <span class="hljs-string">&quot;Salt has detected low disk space on &#123;&#123; id &#125;&#125;&quot;</span><br><span class="hljs-symbol">6 </span>          service_key: <span class="hljs-number">01234567890</span>ABCDEF0123456789abcde<br><span class="hljs-symbol">7 </span>          profile: my-pagerduty-account<br></code></pre></td></tr></table></figure><p>此时，当salt检测到根设备使用率超过90%, 我们将会看到它产生alert_admins_disk事件。但我们看不到触发了disk_alert反应器，以及它会在pagerDuty中创建一个事件。</p></li></ul><p>我们可以使用<code>salt调度器（scheduler）</code>来创建自动运行这个进程，只需在minion配置中加入如下代码块：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">schedule</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">disk_monitoring</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">function</span><span class="hljs-punctuation">:</span> <span class="hljs-string">state.sls</span><br>    <span class="hljs-attribute">seconds</span><span class="hljs-punctuation">:</span> <span class="hljs-string">360</span><br>    <span class="hljs-attribute">args</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">monitor.disks</span><br></code></pre></td></tr></table></figure><p>配置完毕后重启minion，minion会每6分钟执行一次minion_disks.sls。</p><h2 id="6-7-使用webhook"><a href="#6-7-使用webhook" class="headerlink" title="6.7 使用webhook"></a>6.7 使用webhook</h2><p>salt API提供一个REST接口，它能够用于接收webhook,这些webhook可以转换为事件，被反应器接收。</p><p>在我们接收webhok前，需要先进行salt API配置。</p><ul><li><p>首先需要编辑master配置以使salt API能接收口webhook:</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">rest_chaerrypy:</span><br><span class="hljs-symbol">  port:</span> <span class="hljs-number">8080</span><br><span class="hljs-symbol">  host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-symbol">  ssl_srt:</span> <span class="hljs-keyword">/etc/</span>pki<span class="hljs-keyword">/tls/</span>certs/localhost.crt<br><span class="hljs-symbol">  ssl_key:</span> <span class="hljs-keyword">/etc/</span>pki<span class="hljs-keyword">/tls/</span>certs/localhost.key<br><span class="hljs-symbol">  webhook_url:</span> /hook<br><span class="hljs-symbol">  webhook_disable_auth:</span> True<br></code></pre></td></tr></table></figure></li><li><p>接下来我们可以创建事件来映射来对应我们想要执行的sls文件。添加如下内容到master的配置中：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">reactor:<br>  - salt<span class="hljs-regexp">/netapi/</span>hook/customevent<br>      - <span class="hljs-regexp">/srv/</span>reactor/webhook.sls<br><br></code></pre></td></tr></table></figure></li></ul><p>（部分内容实验有误暂时略过，待补充）</p><h2 id="6-8-使用队列系统"><a href="#6-8-使用队列系统" class="headerlink" title="6.8 使用队列系统"></a>6.8 使用队列系统</h2><p>队列系统是另外一个具有发送事件能力的salt组件，它可以在反应器中使用。</p><h3 id="队列如何工作"><a href="#队列如何工作" class="headerlink" title="队列如何工作"></a>队列如何工作</h3><p>从基本的层面上讲，队列是非常简单的，我们能够在队列中添加项目，能在稍后按照添加的顺序处理这些项目。依赖于所使用的队列模块，项目可能唯一也可能不唯一。</p><p>在我们的例子中，我们将使用默认的 sqlite 队列模块。sqlite3内置于 Python中，因此该模块可以工作在任何基础设施中。该模块将会在数据库文件不存在时自动创建数据库文件。需要注意的是， sqlite需要项目是唯一的。如果你想使用其他模块，只需要在队列命令后添加 backend sqlite中存放的队列列表，需要使用如下命令:</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">＃salt-<span class="hljs-built_in">run</span><span class="hljs-built_in"> queue </span>list queues backend＝sqlite<br></code></pre></td></tr></table></figure><p>队列系统通过 runner进行管理，这意味着队列数据库只能被Master访问。当然稍后我们将看到它也用于在 Minion上管理任务。</p><h4 id="添加项目到队列中"><a href="#添加项目到队列中" class="headerlink" title="添加项目到队列中"></a>添加项目到队列中</h4><p>在通过队列处理之前，我们需要先添加一些项目到队列中，以便之后处理。现在我们将用一个叫作myqueue的队列，接下来的命令会添加一个项目到该队列中</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.insert myqueue item1</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>也可以一次性添加多个项目</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.insert myqueue &#x27;[&quot;item2&quot;, &quot;item3&quot;]&#x27;</span><br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h4 id="列出队列和队列中项目"><a href="#列出队列和队列中项目" class="headerlink" title="列出队列和队列中项目"></a>列出队列和队列中项目</h4><p>下列命令列出队列：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.list_queues</span><br>- myqueue<br></code></pre></td></tr></table></figure><p>下面命令列出队列中所有项目:</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.list_items myqueue</span><br>- item1<br>- item2<br>- item3<br><br><span class="hljs-comment"># 如下命令可以列出队列中项目个数</span><br>[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.list_length myqueue</span><br><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="处理队列中项目"><a href="#处理队列中项目" class="headerlink" title="处理队列中项目"></a>处理队列中项目</h4><p>弹出(pop)队列中项目：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.pop myqueue</span><br>- item1<br></code></pre></td></tr></table></figure><p>弹出队列中多个项目：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">reactor</span>]<span class="hljs-comment"># salt-run queue.pop myqueue 2</span><br>- item2<br>- item3<br></code></pre></td></tr></table></figure><blockquote><p>然而它并不能提供系统的自动化功能，如果想实现自动化，我们需要给反应器系统发送事件。下面的命令从队列中弹出一个项目并为它发送一个事件</p></blockquote><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">salt-run queue.process_queue myqueue<br>item1<br></code></pre></td></tr></table></figure><h4 id="从队列中删除项目"><a href="#从队列中删除项目" class="headerlink" title="从队列中删除项目"></a>从队列中删除项目</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# salt-run</span> queue.delete myqueue item1<br><span class="hljs-literal">True</span><br>[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# salt-run</span> queue.list_items myqueue<br>- item2<br>- item3<br></code></pre></td></tr></table></figure><p>也可以用列表形式一次性删除多个项目：</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">[root@salt-<span class="hljs-keyword">master</span> <span class="hljs-title">~]# salt-run</span> queue.delete myqueue &#x27;[<span class="hljs-string">&quot;item2&quot;</span>, <span class="hljs-string">&quot;item3&quot;</span>]&#x27;<br><span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h1 id="7-用highstate复合主机状态"><a href="#7-用highstate复合主机状态" class="headerlink" title="7 用highstate复合主机状态"></a>7 用highstate复合主机状态</h1><h2 id="7-1-highstate组织多个状态配置"><a href="#7-1-highstate组织多个状态配置" class="headerlink" title="7.1 highstate组织多个状态配置"></a>7.1 highstate组织多个状态配置</h2><p>之前我们都是使用state.sls模块来运行状态文件，通过单一的状态文件我们可以完成诸如Apache的部署，配置文件的下发，LAMP环境安装等等。但实际的生产环境中会存在大量的主机角色，我们需要通过拆分和复用让状态文件更加模块化。同时需要能整体性组织和管理这些模块，salt为我们提供了highstate模块让我们完成这个任务。</p><h2 id="7-2-用top-sls文件管理状态文件"><a href="#7-2-用top-sls文件管理状态文件" class="headerlink" title="7.2 用top.sls文件管理状态文件"></a>7.2 用top.sls文件管理状态文件</h2><p>top.sls也可以用来在状态系统中将不同的状态定位到不同的minion中。highstate函数正是通过top.sls文件作为入口对模块和主机进行管理的，下面首先学习用highstate函数配合top.sls文件来管理状态文件。</p><p>把lamp环境和Nginx代理状态配置文件整合：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string"></span><br><span class="hljs-string"></span>|<span class="hljs-string">---lamp</span><br><span class="hljs-string"></span>|<span class="hljs-string">     </span>|<span class="hljs-string">--- httpd.conf/ lamp.sls / my.cnf /php.ini</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--- nginx</span><br><span class="hljs-string"></span>|<span class="hljs-string">     </span>|<span class="hljs-string"> --- nginx.j2</span><br><span class="hljs-string"></span>|<br>|<span class="hljs-string">--- nginx.sls / test_vhost.conf</span><br></code></pre></td></tr></table></figure><p>编写top.sls:</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">base</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;minion-one&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nginx.nginx</span><br>  <span class="hljs-attribute">&quot;minion-two&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">match: list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">lamp.lamp</span><br></code></pre></td></tr></table></figure><p>(以下略，待补充)</p><h2 id="7-3-状态文件的拆分复用"><a href="#7-3-状态文件的拆分复用" class="headerlink" title="7.3 状态文件的拆分复用"></a>7.3 状态文件的拆分复用</h2><p>通过对状态文件的拆分和配置top.sls文件可以灵活地组合各种复用模块来管理minion。<br>(以下略，待补充)</p><h2 id="7-4-多环境配置和管理"><a href="#7-4-多环境配置和管理" class="headerlink" title="7.4 多环境配置和管理"></a>7.4 多环境配置和管理</h2><p>前面我们通过top.sls配置文件和模块的拆分已经可以对多种状态和多组minion进行同时管理了，只需要执行一条<code>#salt state.highstate</code>就能完成base环境内所有minion的管理。前面的top.sls都会包含一个base:配置项，这个其实是salt配置文件中默认的环境目录，可以看一下&#x2F;etc&#x2F;salt&#x2F;master中对应的部分：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"># file_roots:<br>#   base:<br>#     - <span class="hljs-regexp">/srv/</span>salt/<br>#   dev:<br>#     - <span class="hljs-regexp">/srv/</span>salt<span class="hljs-regexp">/dev/</span>services<br>#     - <span class="hljs-regexp">/srv/</span>salt<span class="hljs-regexp">/dev/</span>states<br>#   prod:<br>#     - <span class="hljs-regexp">/srv/</span>salt<span class="hljs-regexp">/prod/</span>services<br>#     - <span class="hljs-regexp">/srv/</span>salt<span class="hljs-regexp">/prod/</span>states<br>#<br>#file_roots:<br>#  base:<br>#    - <span class="hljs-regexp">/srv/</span>salt<br>#<br></code></pre></td></tr></table></figure><p>file_roots这个配置项指明了我们的环境目录在哪里，salt执行对应的sls状态文件都会从默认的目录去找。一般企业都会有开发环境、测试环境和生产环境。这些环境如果都放在base目录内进行管理就会比较混乱，为了区分和便于管理，可以对不同的环境配置不同的目录：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#   base:</span><br>     - <span class="hljs-regexp">/srv/</span>salt/<br><span class="hljs-comment">#   dev:</span><br>      - <span class="hljs-regexp">/src/</span>salt<span class="hljs-regexp">/dev/</span><br><span class="hljs-comment">#   prod:</span><br>      - <span class="hljs-regexp">/srv/</span>salt<span class="hljs-regexp">/prod/</span><br></code></pre></td></tr></table></figure><p>重启salt-master，建立了多个环境目录后我们可以通过维护多个top.sls配置文件来管理各自的环境，也可以通过维护一个top.sls来进行管理。多个环境的top.sls在最终执行salt ‘*’ state.highstate 命令时也会合成为一个文件。</p><p>举例说明：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster highstate]# vim top.sls</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">base</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;minion-one&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attribute">&quot;minion-two&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">match: list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">php</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br><br><span class="hljs-attribute">dev</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;test-*&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpd</span><br><br><span class="hljs-attribute">prod</span><span class="hljs-punctuation">:</span><br>  &quot;prod-*&quot;：<br>    <span class="hljs-bullet">-</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">php</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br></code></pre></td></tr></table></figure><p>分别在file_roots: 指定目录中建立对应的状态配置模块，在&#x2F;src&#x2F;salt&#x2F;top.sls中对所有环境的管理做统一入口，这样就可以完成不同环境的管理和隔离。</p><h2 id="7-5-实践：keepalived-redis-高可用架构部署"><a href="#7-5-实践：keepalived-redis-高可用架构部署" class="headerlink" title="7.5 实践：keepalived + redis 高可用架构部署"></a>7.5 实践：keepalived + redis 高可用架构部署</h2><p>文件列表如下：</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">[root@saltmaster keepalived]<span class="hljs-comment"># tree .</span><br>.<br>├── keepalived<br>│   ├── file<br>│   ├── init.sls<br>│   ├── <span class="hljs-keyword">install_keepalived.sls</span><br><span class="hljs-keyword"></span>│   ├── keepalived_conf.sls<br>│   ├── keepalived_running.sls<br>│   └── templates<br>│       ├── keepalived.conf<br>│       └── <span class="hljs-keyword">scripts</span><br><span class="hljs-keyword"></span>│           ├── redis_backup.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>│           ├── redis_check.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>│           ├── redis_fault.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>│           ├── redis_master.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>│           └── redis_stop.<span class="hljs-keyword">sh</span><br><span class="hljs-keyword"></span>├── redis<br>│   ├── file<br>│   ├── init.sls<br>│   ├── <span class="hljs-keyword">install_redis.sls</span><br><span class="hljs-keyword"></span>│   ├── redis_conf.sls<br>│   ├── redis_running.sls<br>│   └── templates<br>│       └── redis.<span class="hljs-keyword">j2</span><br><span class="hljs-keyword"></span>└── top.sls<br></code></pre></td></tr></table></figure><p>设置master的grains,指定role、vip、redis的masterip:</p><figure class="highlight csp"><table><tr><td class="code"><pre><code class="hljs csp">[root@saltmaster keepalived]# salt &quot;minion-two&quot; grains.setvals &quot;&#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;master&#x27;</span>, <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;192.168.58.200&#x27;</span>, <span class="hljs-string">&#x27;master_ip&#x27;</span>: <span class="hljs-string">&#x27;192.168.58.128&#x27;</span>&#125;&quot; <br>minion-two:<br>    ----------<br>    master_ip:<br>        192.168.58.128<br>    role:<br>        master<br>    vip:<br>        192.168.58.200<br></code></pre></td></tr></table></figure><p>设置slave的grains,指定role、vip、redis的masterip:</p><figure class="highlight csp"><table><tr><td class="code"><pre><code class="hljs csp">[root@saltmaster keepalived]# salt &quot;minion-one&quot; grains.setvals &quot;&#123;<span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;slave&#x27;</span>, <span class="hljs-string">&#x27;vip&#x27;</span>: <span class="hljs-string">&#x27;192.168.58.200&#x27;</span>, <span class="hljs-string">&#x27;master_ip&#x27;</span>: <span class="hljs-string">&#x27;192.168.58.128&#x27;</span>&#125;&quot;<br>minion-one:<br>    ----------<br>    master_ip:<br>        192.168.58.128<br>    role:<br>        slave<br>    vip:<br>        192.168.58.200<br></code></pre></td></tr></table></figure><p>设置入口文件:<br>以list匹配的方式对两台主机应用对应的模块</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">base</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&quot;192.168.58.128,192.168.58.129&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">match: list</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">keepalived</span><br></code></pre></td></tr></table></figure><p>部署Redis<br>安装Redis并且根据角色下发配置模板文件：<br>Redis安装入口文件</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">[root@saltmaster redis]<span class="hljs-comment"># cat init.sls </span><br>include:<br>  - <span class="hljs-string">.install_redis</span><br>  - <span class="hljs-string">.redis_running</span><br>  - <span class="hljs-string">.redis_conf</span><br></code></pre></td></tr></table></figure><p>Redis软件包的安装：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">redis</span>]<span class="hljs-comment"># cat install_redis.sls </span><br><span class="hljs-attr">install_redis:</span><br>  <span class="hljs-attr">pkg.installed:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><p>Redis配置下发以及创建目录：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">redis</span>]<span class="hljs-comment"># cat redis_conf.sls</span><br><span class="hljs-attr">redis_conf:</span><br>  <span class="hljs-attr">file.managed:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">/etc/redis.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">salt://redis/templates/redis.j2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">template:</span> <span class="hljs-string">jinjia</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-number">644</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">require:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">install_redis</span><br><br><span class="hljs-attr">redis_dir:</span><br>  <span class="hljs-attr">cmd.run:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">mkdir</span> <span class="hljs-string">-pv</span> <span class="hljs-string">/data/redis</span> <span class="hljs-string">&amp;&amp;chown</span> <span class="hljs-string">redis.redis</span> <span class="hljs-string">/data/redis</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">unless:</span> <span class="hljs-string">test</span> <span class="hljs-string">-d</span> <span class="hljs-string">/data/redis</span><br></code></pre></td></tr></table></figure><p>Redis服务启动控制：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">keepalived</span>]<span class="hljs-comment"># cat ../redis/redis_running.sls </span><br><span class="hljs-attr">redis_running:</span><br>  <span class="hljs-attr">service.running:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">enable:</span> <span class="hljs-literal">True</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">require:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">install_redis</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">watch:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">redis_conf</span><br></code></pre></td></tr></table></figure><p>部署keepalived<br>keepalived安装入口文件：</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">[root@saltmaster keepalived]<span class="hljs-comment"># cat init.sls </span><br>include:<br>  - <span class="hljs-string">.install_keepalived</span><br>  - <span class="hljs-string">.keepalived_running</span><br>  - <span class="hljs-string">.keepalived_conf</span><br></code></pre></td></tr></table></figure><p>keepalived软件包的安装：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">keepalived</span>]<span class="hljs-comment"># cat install_keepalived.sls </span><br><span class="hljs-attr">install_keepalived:</span><br>  <span class="hljs-attr">pkg.installed:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br></code></pre></td></tr></table></figure><p>keepalived配置下发以及创建目录：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">[root@saltmaster keepalived]<span class="hljs-comment"># vim keepalived_conf.sls </span><br><br>keepalived_conf:<br>  file.managed:<br>    - name:  <span class="hljs-regexp">/etc/</span>keepalived/keepalived.conf<br>    - source: salt:<span class="hljs-regexp">//</span>keepalived<span class="hljs-regexp">/templates/</span>keepalived.conf<br>    - user: root<br>    - group: root<br>    - template: jinja<br>    - mode: <span class="hljs-number">644</span><br>    - require:<br>        - pkg: install_keepalived<br>        - cmd: scripts_dir<br><br>   scripts_dir:<br>     cmd.run:<br>       - name: mkdir -pv <span class="hljs-regexp">/etc/</span>keepalived<span class="hljs-regexp">/scripts/</span><br>       - unless: test -d <span class="hljs-regexp">/etc/</span>keepalived<span class="hljs-regexp">/scripts/</span><br><br>  &#123;% <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;redis_backup.sh&quot;</span>, <span class="hljs-string">&quot;redis_check.sh&quot;</span>, <span class="hljs-string">&quot;redis_fault.sh&quot;</span>, <span class="hljs-string">&quot;redis_master.sh&quot;</span>, <span class="hljs-string">&quot;redis_stop.sh&quot;</span>] %&#125;<br>  keepalived_&#123;&#123; s &#125;&#125;:<br>    file.managed:<br>      - name: <span class="hljs-regexp">/etc/</span>keepalived<span class="hljs-regexp">/scripts/</span>&#123;&#123; s &#125;&#125;<br>      - source: salt:<span class="hljs-regexp">//</span>keepalived<span class="hljs-regexp">/templates/</span>scripts/&#123;&#123; s &#125;&#125;<br>      - user: root<br>      - group: root<br>      - template: jinja<br>      - mode: <span class="hljs-number">755</span><br>      - require:<br>          - pkg: install_keepalived<br>  &#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>keepalived服务启动控制:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">keepalived</span>]<span class="hljs-comment"># cat keepalived_running.sls</span><br><span class="hljs-attr">keepalived_running:</span><br>  <span class="hljs-attr">service.running:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">keepalived</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">enable:</span> <span class="hljs-literal">True</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">require:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">install_keepalive</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">watch:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">keepalived_conf</span><br></code></pre></td></tr></table></figure><h1 id="8-实战案例解析"><a href="#8-实战案例解析" class="headerlink" title="8 实战案例解析"></a>8 实战案例解析</h1><h2 id="8-1-LAMP环境搭建"><a href="#8-1-LAMP环境搭建" class="headerlink" title="8.1 LAMP环境搭建"></a>8.1 LAMP环境搭建</h2><h3 id="Apache安装配置"><a href="#Apache安装配置" class="headerlink" title="Apache安装配置"></a>Apache安装配置</h3><p>目录结构大致如下所示：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@salt-master prod]# tree .<br>.<br>├── apache<br>│   ├── apache.sls<br>│   └── <span class="hljs-keyword">files</span><br>│       └── httpd.<span class="hljs-keyword">conf</span><br>├── mysql<br>│   ├── <span class="hljs-keyword">files</span><br>│   │   └── my.<span class="hljs-keyword">cnf</span><br>│   └── mysql.sls<br>└── php<br>    ├── <span class="hljs-keyword">files</span><br>    └── php.sls<br><br></code></pre></td></tr></table></figure><p>apache.sls:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">1 apache-install:</span><br> <span class="hljs-attr">2   pkg.installed:</span><br> <span class="hljs-attr">3     - name:</span> <span class="hljs-string">httpd</span><br> <span class="hljs-number">4</span> <br> <span class="hljs-number">5</span> <br> <span class="hljs-attr">6 apache-config:</span><br> <span class="hljs-attr">7   file.managed:</span><br> <span class="hljs-attr">8     - name:</span> <span class="hljs-string">/etc/httpd/conf/httpd.conf</span><br> <span class="hljs-attr">9     - source:</span> <span class="hljs-string">salt://apache/files/httpd.conf</span><br><span class="hljs-attr">10     - user:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">11     - group:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">12     - mode:</span> <span class="hljs-number">644</span><br><span class="hljs-number">13</span> <br><span class="hljs-number">14</span> <br><span class="hljs-attr">15 apache-service:</span><br><span class="hljs-attr">16   service.running:</span><br><span class="hljs-attr">17     - name:</span> <span class="hljs-string">httpd</span><br><span class="hljs-attr">18     - enable:</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">salt-minion1:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: apache-install</span><br><span class="hljs-code">    Function: pkg.installed</span><br><span class="hljs-code">        Name: httpd</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: The following packages were installed/updated: httpd</span><br><span class="hljs-code">     Started: 22:17:01.328948</span><br><span class="hljs-code">    Duration: 11801.141 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              httpd:</span><br><span class="hljs-code">                  ----------</span><br><span class="hljs-code">                  new:</span><br><span class="hljs-code">                      2.4.6-88.el7.centos</span><br><span class="hljs-section">                  old:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: apache-config</span><br><span class="hljs-code">    Function: file.managed</span><br><span class="hljs-code">        Name: /etc/httpd/conf/httpd.conf</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: File /etc/httpd/conf/httpd.conf is in the correct state</span><br><span class="hljs-code">     Started: 22:17:13.141829</span><br><span class="hljs-code">    Duration: 63.056 ms</span><br><span class="hljs-section">     Changes:   </span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: apache-service</span><br><span class="hljs-code">    Function: service.running</span><br><span class="hljs-code">        Name: httpd</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: Service httpd has been enabled, and is running</span><br><span class="hljs-code">     Started: 22:17:14.723947</span><br><span class="hljs-code">    Duration: 375.309 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              httpd:</span><br><span class="hljs-code">                  True</span><br><br><span class="hljs-section">Summary for salt-minion1</span><br><span class="hljs-section">------------</span><br>Succeeded: 3 (changed=2)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     3<br>Total run time:  12.240 s<br></code></pre></td></tr></table></figure><p>apache已正确安装</p><h3 id="PHP安装"><a href="#PHP安装" class="headerlink" title="PHP安装"></a>PHP安装</h3><p>同理：<br>php.sls</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"> <span class="hljs-attribute">1 php-install</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">2   pkg.installed</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">3     - pkgs</span><span class="hljs-punctuation">:</span><br> <span class="hljs-attribute">4       - php</span><br><span class="hljs-attribute"> 5       - php-pdo</span><br><span class="hljs-attribute"> 6       - php-mysql</span><br><span class="hljs-attribute"> 7 </span><br><span class="hljs-attribute"> 8 </span><br><span class="hljs-attribute"> 9 php-config</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">10   file.managed</span><span class="hljs-punctuation">:</span><br><span class="hljs-attribute">11     - name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/etc/php.ini</span><br><span class="hljs-attribute">12     - source</span><span class="hljs-punctuation">:</span> <span class="hljs-string">salt://php/files/php.ini</span><br><span class="hljs-attribute">13     - user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">root</span><br><span class="hljs-attribute">14     - group</span><span class="hljs-punctuation">:</span> <span class="hljs-string">root</span><br><span class="hljs-attribute">15     - mode</span><span class="hljs-punctuation">:</span> <span class="hljs-string">644</span><br></code></pre></td></tr></table></figure><h3 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h3><p>mysql.sls:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"> <span class="hljs-attr">1 mysql-install:</span><br> <span class="hljs-attr">2   pkg.installed:</span><br> <span class="hljs-attr">3     - pkgs:</span><br> <span class="hljs-number">4</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">mariadb</span><br> <span class="hljs-number">5</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">mariadb-server</span><br> <span class="hljs-number">6</span>       <span class="hljs-bullet">-</span> <span class="hljs-string">mariadb-devel</span><br> <span class="hljs-number">7</span> <br> <span class="hljs-number">8</span> <br> <span class="hljs-attr">9 mysql-config:</span><br><span class="hljs-attr">10   file.managed:</span><br><span class="hljs-attr">11     - name:</span> <span class="hljs-string">/etc/my.cnf</span><br><span class="hljs-attr">12     - source:</span> <span class="hljs-string">salt://mysql/files/my.cnf</span><br><span class="hljs-attr">13     - user:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">14     - group:</span> <span class="hljs-string">root</span><br><span class="hljs-attr">15     - mode:</span> <span class="hljs-number">644</span><br><span class="hljs-number">16</span> <br><span class="hljs-number">17</span> <br><span class="hljs-attr">18 mysql-service:</span><br><span class="hljs-attr">19   service.running:</span><br><span class="hljs-attr">20     - name:</span> <span class="hljs-string">mariadb</span><br><span class="hljs-attr">21     - enable:</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>(待续)</p>]]></content>
    
    
    <summary type="html">saltstack相关知识整理</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>SaltStack学习笔记-概念及入门</title>
    <link href="http://www.qintianjun.top/2021/07/09/SaltStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%A5%E9%97%A8/"/>
    <id>http://www.qintianjun.top/2021/07/09/SaltStack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%85%A5%E9%97%A8/</id>
    <published>2021-07-09T14:52:16.000Z</published>
    <updated>2023-02-24T08:04:44.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="saltstack学习笔记"><a href="#saltstack学习笔记" class="headerlink" title="saltstack学习笔记"></a>saltstack学习笔记</h1><h1 id="1-入门"><a href="#1-入门" class="headerlink" title="1 入门"></a>1 入门</h1><h2 id="1-1-saltstack架构"><a href="#1-1-saltstack架构" class="headerlink" title="1.1 saltstack架构"></a>1.1 saltstack架构</h2><p>SaltStack是一种新型的基础设施管理软件,简单易部署,可伸缩的足以管理成千上万的服务器,和足够快的速度控制,与他们交流,以毫秒为单位。SaltStack提供了一个动态基础设施通信总线用于编排,远程执行、配置管理等等。SaltStack项目于2011年启动,年增长速度较快,五年期固定基础设施编制和配置管理的开源项目。SaltStack社区致力于保持slat项目集中、友好、健康、开放。<br><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/saltstack/saltstack.png"></p><p>简单来说它的两大基础功能就是：配置管理、远程命令执行。剩下就是根据你的需求自由组合，实现更复杂的功能和系统管理。<br>（待补充）</p><h2 id="1-2-安装saltstack"><a href="#1-2-安装saltstack" class="headerlink" title="1.2 安装saltstack"></a>1.2 安装saltstack</h2><p>salt官方推荐使用<code>salt bootstrap</code>进行安装，它会根据运行的系统不同自动选择安装方式，解决依赖。</p><p>由于salt源在国外且速度较慢，我们使用切换到国内阿里源的方式安装：</p><h3 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h3><p>Saltstack 的官方文档对其支持的每种操作系统上 salt 的安装已经提供了具体的说明，在您可以访问本站的镜像页面：</p><p><a href="https://mirrors.aliyun.com/saltstack/">https://mirrors.aliyun.com/saltstack/</a><br>来获取这些方法，另外，为了能使用本镜像站快速的安装软件包，您需要做2点修改：</p><h4 id="a-脚本中的域名修改"><a href="#a-脚本中的域名修改" class="headerlink" title="a.脚本中的域名修改"></a>a.脚本中的域名修改</h4><p>把对应OS初始化脚本中的域名</p><p>repo.saltstack.com<br>替换成在阿里镜像站对应的路径</p><p>mirrors.aliyun.com&#x2F;saltstack<br>比如对于 Centos 7 系统，在 saltstack 的官网提供的配置初始化手册是：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo yum install https:<span class="hljs-regexp">//</span>repo.saltstack.com<span class="hljs-regexp">/yum/</span>redhat/salt-repo-latest-<span class="hljs-number">2</span>.el7.noarch.rpm<br></code></pre></td></tr></table></figure><p>这时，你需要执行:</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo yum install https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/saltstack/yum</span><span class="hljs-regexp">/redhat/</span>salt-repo-latest-<span class="hljs-number">2</span>.el7.noarch.rpm<br></code></pre></td></tr></table></figure><p>来安装这个初始化软件包。</p><h4 id="b-配置中的域名修改"><a href="#b-配置中的域名修改" class="headerlink" title="b.配置中的域名修改"></a>b.配置中的域名修改</h4><p>仍以 Centos 7 为例，初始化rpm包生成的配置文件为:</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/yum</span>.repos.d/salt-latest.repo<br></code></pre></td></tr></table></figure><p>文件中的访问地址需要替换成镜像站的路径，执行命令：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo sed -i <span class="hljs-string">&quot;s/repo.saltstack.com/mirrors.aliyun.com\/saltstack/g&quot;</span> <span class="hljs-regexp">/etc/yum</span>.repos.d/salt-latest.repo<br></code></pre></td></tr></table></figure><h2 id="1-3-配置salt"><a href="#1-3-配置salt" class="headerlink" title="1.3 配置salt"></a>1.3 配置salt</h2><p>安装完成后可以开始配置salt,Salt Master启动后会默认监听两个端口：</p><p><strong>4505</strong>(publish_port)为Salt Master pub接口，提供远程执行命令发送功能；</p><p><strong>4506</strong>(ret_port)为Salt Master ret端口，支持认证，文件服务，结果收集等功能。</p><p>要确保防火墙对这两个端口开放。</p><p><strong>Salt Master</strong>的配置文件在<code>/etc/salt/master</code></p><p><strong>Salt Minion</strong>的配置文件在<code>/etc/salt/minion</code></p><h3 id="1-3-1-Salt-minion配置"><a href="#1-3-1-Salt-minion配置" class="headerlink" title="1.3.1 Salt minion配置"></a>1.3.1 Salt minion配置</h3><p>minion和master之间的通信最好使用域名进行连接，实验中可修改对应的<code>/etc/hosts</code>文件，加入如下配置：</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.58.128</span> master<br><span class="hljs-number">192.168.58.129</span> minion-one<br></code></pre></td></tr></table></figure><p>用vi打开minion主机的<code>/etc/salt/minion</code>,修改如下：<br>首先找出配置选项的master命令行，去掉注释并改为</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh"><span class="hljs-literal">master</span>:<span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>然后找到ID行，去掉注释并改为:</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">id</span>: minion-one <span class="hljs-comment"># 这个名字不一定需要和主机名一样，为了方便可以设置成一样</span><br></code></pre></td></tr></table></figure><p>如果未找到id行可以自己添加</p><blockquote><p>注意：如果未手动指定minion ID,minion将在启动时尝试智能化判断其minion ID，对于大多数系统，minion ID将设置为全局域名（FQDN）。</p></blockquote><p>之后重启salt master和minion对应的进程生效。</p><h3 id="1-3-2-在master上接受minion密钥"><a href="#1-3-2-在master上接受minion密钥" class="headerlink" title="1.3.2 在master上接受minion密钥"></a>1.3.2 在master上接受minion密钥</h3><p>minion在启动之后会连接master，请求master为其签发证书，签发完成后代表master可以信任该minion。</p><p><strong>salt-key</strong>命令可以帮助我们管理minion的密钥，在master上执行：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">[root@localhost scripts]<span class="hljs-meta"># salt-key -L</span><br>Accepted <span class="hljs-built_in">Keys</span>:<br>Denied <span class="hljs-built_in">Keys</span>:<br>Unaccepted <span class="hljs-built_in">Keys</span>:<br>minion-one<br>minion-two<br>Rejected <span class="hljs-built_in">Keys</span>:<br></code></pre></td></tr></table></figure><p>这是可以发现minion-one主机已经出现在了<code>unaccepted keys</code>中，这表示该minion已经和master联系，并且master已经获取了minion的公钥，正在等待接受该minion的指令。</p><p>这时我们可以通过查看密钥指纹来确保其与minion的密钥想匹配，在master上查询的命令：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@localhost scripts]# salt-key -<span class="hljs-keyword">f</span> minion-one<br>Unaccepted Keys:<br>minion-one:  <span class="hljs-number">30</span>:<span class="hljs-number">96</span>:<span class="hljs-number">64</span>:<span class="hljs-number">30</span>:<span class="hljs-number">3</span><span class="hljs-variable">a:a0</span>:<span class="hljs-number">77</span>:<span class="hljs-number">9</span><span class="hljs-keyword">f</span>:<span class="hljs-number">2</span><span class="hljs-keyword">e</span>:<span class="hljs-number">22</span>:a1:<span class="hljs-number">5</span><span class="hljs-keyword">c</span>:<span class="hljs-number">15</span>:<span class="hljs-keyword">a</span><span class="hljs-variable">a:9b</span>:ad:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>:<span class="hljs-number">06</span>:<span class="hljs-number">73</span>:<span class="hljs-number">9</span><span class="hljs-keyword">e</span>:<span class="hljs-number">5</span><span class="hljs-keyword">f</span>:<span class="hljs-keyword">ce</span>:<span class="hljs-keyword">bd</span>:<span class="hljs-keyword">a</span><span class="hljs-variable">b:d2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">6</span><span class="hljs-keyword">e</span>:<span class="hljs-number">5</span>d:<span class="hljs-number">0</span><span class="hljs-variable">b:cc</span>:<span class="hljs-number">02</span><br></code></pre></td></tr></table></figure><p>同样地，在minion上可以通过<code>salt-call</code>命令来获取：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@localhost scripts]# salt-<span class="hljs-keyword">call</span> --local key.finger<br>local:<br>    <span class="hljs-number">30</span>:<span class="hljs-number">96</span>:<span class="hljs-number">64</span>:<span class="hljs-number">30</span>:<span class="hljs-number">3</span><span class="hljs-variable">a:a0</span>:<span class="hljs-number">77</span>:<span class="hljs-number">9</span><span class="hljs-keyword">f</span>:<span class="hljs-number">2</span><span class="hljs-keyword">e</span>:<span class="hljs-number">22</span>:a1:<span class="hljs-number">5</span><span class="hljs-keyword">c</span>:<span class="hljs-number">15</span>:<span class="hljs-keyword">a</span><span class="hljs-variable">a:9b</span>:ad:<span class="hljs-number">36</span>:<span class="hljs-number">35</span>:<span class="hljs-number">06</span>:<span class="hljs-number">73</span>:<span class="hljs-number">9</span><span class="hljs-keyword">e</span>:<span class="hljs-number">5</span><span class="hljs-keyword">f</span>:<span class="hljs-keyword">ce</span>:<span class="hljs-keyword">bd</span>:<span class="hljs-keyword">a</span><span class="hljs-variable">b:d2</span>:<span class="hljs-number">26</span>:<span class="hljs-number">6</span><span class="hljs-keyword">e</span>:<span class="hljs-number">5</span>d:<span class="hljs-number">0</span><span class="hljs-variable">b:cc</span>:<span class="hljs-number">02</span><br></code></pre></td></tr></table></figure><p>可以看到两者相互匹配，所以我们可以在master上接受该密钥,使用<code>salt-key -a</code>参数：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@localhost</span> scripts]# salt-key -a minion-<span class="hljs-keyword">one</span><br>The following keys are going <span class="hljs-keyword">to</span> be accepted:<br>Unaccepted Keys:<br>minion-<span class="hljs-keyword">one</span><br>Proceed? [n/Y] Y<br>Key for minion minion-<span class="hljs-keyword">one</span> accepted.<br></code></pre></td></tr></table></figure><p>此时再次查看：</p><figure class="highlight sqf"><table><tr><td class="code"><pre><code class="hljs sqf">[root@localhost scripts]<span class="hljs-meta"># salt-key -L</span><br>Accepted <span class="hljs-built_in">Keys</span>:<br>minion-one<br>Denied <span class="hljs-built_in">Keys</span>:<br>Unaccepted <span class="hljs-built_in">Keys</span>:<br>minion-two<br>Rejected <span class="hljs-built_in">Keys</span>:<br></code></pre></td></tr></table></figure><p>可以看到minion密钥已经被接受。</p><blockquote><p>注： 对于有很多minion的情况，可以在<code>/etc/salt/master</code>配置文件中查找到如下行：<code>#auto_accept: True</code>，去掉注释，可以让master以后自动签发密钥；也可以使用salt-key -A命令统一接受密钥。</p></blockquote><h3 id="1-3-3-运行第一条salt命令"><a href="#1-3-3-运行第一条salt命令" class="headerlink" title="1.3.3 运行第一条salt命令"></a>1.3.3 运行第一条salt命令</h3><p>尝试在master端运行并返回结果：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;*&#x27;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>这是一个简单的探测主机是否存活的命令，在该示例中我们发送一条消息给若干minion，并告诉它们运行salt内置的一个模块中的一条命令，这个命令能很好地查询我们有哪些minion是存活的。</p><p>实际上，test模块还包含有许多其他有用的函数，我们可以使用<code>sys.list_functions</code>模块功能返回这些函数：</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">[root@localhost scripts]# salt &#x27;minion-<span class="hljs-keyword">one</span>&#x27; sys.list_functions <span class="hljs-keyword">test</span><br>minion-<span class="hljs-keyword">one</span>:<br>    - <span class="hljs-keyword">test</span>.arg<br>    - <span class="hljs-keyword">test</span>.arg_clean<br>    - <span class="hljs-keyword">test</span>.arg_repr<br>    - <span class="hljs-keyword">test</span>.arg_type<br>    - <span class="hljs-keyword">test</span>.assertion<br>.......以下省略<br></code></pre></td></tr></table></figure><p>我们来测试一下列表中的其他函数，比如<code>test.echo</code>,想了解函数的用法可以执行：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt minion-one sys.doc test.echo </span><br>test.echo:<br><br>    <span class="hljs-keyword">Return</span> a <span class="hljs-built_in">string</span> - used <span class="hljs-keyword">for</span> testing the connection<br><br>    CLI Example:<br><br>        salt <span class="hljs-string">&#x27;*&#x27;</span> test.echo <span class="hljs-string">&#x27;foo bar baz quo qux&#x27;</span><br></code></pre></td></tr></table></figure><p>下一章我们将进一步学习远程执行命令。</p><h1 id="2-通过salt远程执行管理minion"><a href="#2-通过salt远程执行管理minion" class="headerlink" title="2 通过salt远程执行管理minion"></a>2 通过salt远程执行管理minion</h1><h2 id="2-1-远程命令的组成结构"><a href="#2-1-远程命令的组成结构" class="headerlink" title="2.1 远程命令的组成结构"></a>2.1 远程命令的组成结构</h2><p>想了解salt命令的最简单方法就是用<code>--help</code>选项：</p><figure class="highlight gherkin"><table><tr><td class="code"><pre><code class="hljs gherkin">[root<span class="hljs-meta">@localhost</span> scripts]<span class="hljs-comment"># salt --help</span><br>Usage: salt [options] &#x27;<span class="hljs-variable">&lt;target&gt;</span>&#x27; <span class="hljs-variable">&lt;function&gt;</span> [arguments]<br><br>...... 以下省略<br></code></pre></td></tr></table></figure><p>可以看到，salt远程执行命令由五部分组成：</p><ul><li>第一部分–salt命令本身</li><li>第二部分–命令行选项</li><li>第三部分–目标定位字符串</li><li>第四部分–salt模块函数</li><li>第五部分–远程执行函数的参数</li></ul><p>下面是一个包含所有五个部分的例子：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@localhost scripts]# salt --summary <span class="hljs-emphasis">&#x27;*&#x27;</span> cmd.run &quot;uptime&quot;<br>minion-one:<br><span class="hljs-code">     16:24:02 up  1:52,  2 users,  load average: 0.00, 0.01, 0.05</span><br>minion-two:<br><span class="hljs-code">     16:24:02 up  1:49,  1 user,  load average: 0.24, 0.09, 0.10</span><br><br><br><span class="hljs-code">-------------------------------------------</span><br><span class="hljs-code">Summary</span><br><span class="hljs-code">-------------------------------------------</span><br># of minions targeted: 2<br># of minions returned: 2<br># of minions that did not return: 0<br><span class="hljs-section"># of minions with errors: 0</span><br><span class="hljs-section">-------------------------------------------</span><br></code></pre></td></tr></table></figure><p>接下来我们详细了解这五个部分。</p><h3 id="2-1-1-命令行选项"><a href="#2-1-1-命令行选项" class="headerlink" title="2.1.1 命令行选项"></a>2.1.1 命令行选项</h3><p>salt的命令行选项的作用就是通过不同的选项来改变程序本身的行为。<br>下面介绍几个主要的命令行参数：</p><ul><li>-v &#x2F; –verbose 开启命令的详细描述–详细说明命令运行后会发生什么</li><li>–summary 显示一条salt命令的概要</li><li>–out 控制salt执行后输出结果的格式：<br>  a. –out&#x3D;json 使用json格式输出执行结果； b.–out&#x3D;yaml 使用yaml格式输出执行结果</li></ul><p>还有很多选项可以改变salt命令的行为，可以通过<code>salt --help</code>命令来查看选项的用法。</p><h3 id="2-1-2-目标定位字符串"><a href="#2-1-2-目标定位字符串" class="headerlink" title="2.1.2 目标定位字符串"></a>2.1.2 目标定位字符串</h3><p>目标定位字符串用于在有大量minion服务器的情况下，灵活地定位到所需的服务器并执行远程命令。</p><h4 id="全局匹配"><a href="#全局匹配" class="headerlink" title="全局匹配"></a>全局匹配</h4><p>到现在的所有命令，我们的定位都采用了“*”进行匹配，salt匹配字符串的写法和shell基本相同</p><ul><li>*代表0个或任意个字符</li><li>? 代表一个字符</li><li>[] 代表字符的集合，如[a~z]代表所有小写字母，[0-9]代表数字</li></ul><h4 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h4><p>如果我们需要更复杂的匹配，可以使用正则表达式。salt使用python的re正则模块，可以解析正则表达式（PCRE），正则表达式匹配需要配合命令行选项-E或者-pcre，具体正则规则不是本文的重点，有需要者请自行查询相关资料。</p><h4 id="列表匹配"><a href="#列表匹配" class="headerlink" title="列表匹配"></a>列表匹配</h4><p>有时候我们需要指定一个列表里面的机器进行操作，这时候可以使用<code>-L</code> 参数进行列表匹配：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt -L <span class="hljs-string">&quot;minion-one,minion-two&quot;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>minion-two:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>通常列表匹配的主机都写在master的配置文件中，在&#x2F;etc&#x2F;salt&#x2F;master中以nodegroups形式出现，包括正则匹配全局匹配等方式都可以写在配置文件中，然后通过分组匹配选项<code>-N</code>加上nodegroup名称进行匹配，后面会详细介绍。</p><h4 id="Grain和Pillar匹配"><a href="#Grain和Pillar匹配" class="headerlink" title="Grain和Pillar匹配"></a>Grain和Pillar匹配</h4><p>Grain和Pillar是salt独有的两个概念，它们都是以key value形式存储的数据库，Grains是由minion返回给master的数据，而Pillar数据则是存储在master上的。每个minion只能看到自己的Pillar，Grain可以看做是Host的元数据(metadata), 例如CPU的数量；而Pillars则是主机所需的数据，例如数据库密码。一个minion可以告诉master它的Grain数据，而minion则需要从master索要Pillar数据。后面会详细讲解。</p><h4 id="Grains匹配"><a href="#Grains匹配" class="headerlink" title="Grains匹配"></a>Grains匹配</h4><p>Grains可以认为是描述minion本身固有属性的静态数据，列入minion服务器的操作系统、内存的大小、网卡的mac地址等，可以用如下命令列出主机所有的Grains数据。</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@localhost scripts]# salt &quot;minion-one&quot; grains.items</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    SSDs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">biosreleasedate</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">04/13/2018</span><br><span class="hljs-attribute">    biosversion</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">6.00</span><br><span class="hljs-attribute">    cpu_flags</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">fpu</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">vme</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">de</span><br>......以下省略<br></code></pre></td></tr></table></figure><p>检索某一Grains数据使用如下命令:</p><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua">[root@localhost scripts]# salt <span class="hljs-string">&#x27;minion-one&#x27;</span> grains.item <span class="hljs-built_in">os</span><br>minion-one:<br>    <span class="hljs-comment">----------</span><br>    <span class="hljs-built_in">os</span>:<br>        CentOS<br></code></pre></td></tr></table></figure><p>了解了操作系统信息后，我们可以利用Grains定位主机–利用<code>-G</code>或<code>--grain:</code>，如对使用CentOS的机器进行定位:</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt -G <span class="hljs-string">&#x27;os:CentOs&#x27;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>minion-two:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>定位系统版本是7.6.*的主机:</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt -G <span class="hljs-string">&#x27;osrelease:7.6.*&#x27;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>minion-two:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>定位ens33网卡的特定的MAC地址的主机：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt -G <span class="hljs-string">&#x27;hwaddr_interfaces:ens33:00:0c:29:0f:c1:a3&#x27;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>Grains的匹配强大之处不止于此，除了自带的Grains之外，我们还可以自定义Grains来满足不同的需求。后面会详细讨论，这里仅仅给出一个简单的例子：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt -G <span class="hljs-string">&#x27;hwaddr_interfaces:ens33:00:0c:29:0f:c1:a3&#x27;</span> test.ping</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># </span><br>[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># </span><br>[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> grains.setval install_date 20190311</span><br>minion-one:<br>    ----------<br>    install_date:<br>        <span class="hljs-number">20190311</span><br>[root<span class="hljs-symbol">@localhost</span> scripts]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> grains.item install_date</span><br>minion-one:<br>    ----------<br>    install_date:<br>        <span class="hljs-number">20190311</span><br></code></pre></td></tr></table></figure><h4 id="Pillars匹配"><a href="#Pillars匹配" class="headerlink" title="Pillars匹配"></a>Pillars匹配</h4><p>Pillars数据同Grains相似，不同之处是Pillars数据可以定义为更加动态的形式，并且是一个安全的数据存储库。它也是一个key-value形式存储的数据库，也可以和Grains一样进行匹配。不同的是需要使用<code>-I</code>或<code>--pillar</code>选项：</p><ul><li>列出主机所有的Pillar数据: <code>#salt &quot;minion-one&quot; pillar.items</code></li><li>查看单个Pillar数据：<code>#salt &quot;minion-one&quot; pillar.item role</code></li><li>匹配role值是Web的主机并执行远程命令：<code>salt -I &quot;role:Web&quot; test.ping</code></li></ul><h4 id="复合匹配"><a href="#复合匹配" class="headerlink" title="复合匹配"></a>复合匹配</h4><p>复合匹配就是将前面几种匹配方式混合使用，通过复合匹配我们可以定义更精细和复杂的minion匹配方式。例如：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># salt -C <span class="hljs-string">&#x27;minion-* and G@os:CentOs not E@.*-two$&#x27;</span> test.ping</span><br></code></pre></td></tr></table></figure><p>这段匹配的含义是匹配所有‘minion-’开头的并且操作系统是CentOS且不能以-two结尾的机器。</p><p>可以使用的匹配方法如下表所示：</p><table><thead><tr><th align="center">字母</th><th align="center">匹配类型</th><th align="center">示例</th></tr></thead><tbody><tr><td align="center">G</td><td align="center">Grains</td><td align="center">G@os:Ubuntu</td></tr><tr><td align="center">E</td><td align="center">正则</td><td align="center">E@web\d+(dev</td></tr><tr><td align="center">P</td><td align="center">Grains正则</td><td align="center">P@os:(RedHot</td></tr><tr><td align="center">L</td><td align="center">列表</td><td align="center"><a href="mailto:&#x4c;&#x40;&#x6d;&#105;&#110;&#x69;&#111;&#110;&#x31;&#x2e;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;">&#x4c;&#x40;&#x6d;&#105;&#110;&#x69;&#111;&#110;&#x31;&#x2e;&#x65;&#x78;&#97;&#x6d;&#112;&#108;&#x65;&#x2e;&#99;&#x6f;&#x6d;</a></td></tr><tr><td align="center">I</td><td align="center">Pillar</td><td align="center">I@pdata:foobar</td></tr><tr><td align="center">S</td><td align="center">Subnet&#x2F;IP address</td><td align="center"><a href="mailto:&#x53;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#x30;&#46;&#x31;">&#x53;&#x40;&#49;&#x39;&#50;&#x2e;&#49;&#54;&#x38;&#x2e;&#x30;&#46;&#x31;</a>&#x2F;24 or <a href="mailto:&#83;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#49;&#46;&#x31;&#48;&#x30;">&#83;&#x40;&#x31;&#57;&#x32;&#46;&#x31;&#x36;&#56;&#46;&#49;&#46;&#x31;&#48;&#x30;</a></td></tr><tr><td align="center">R</td><td align="center">Range cluster</td><td align="center">R@%foo.bar</td></tr></tbody></table><h2 id="2-2-远程执行模块和函数"><a href="#2-2-远程执行模块和函数" class="headerlink" title="2.2 远程执行模块和函数"></a>2.2 远程执行模块和函数</h2><p>远程执行的最后一部分是我们需要运行的模块以及相关函数和对应的执行参数。模块是函数的逻辑分组，一系列的函数组合在一起构成一个模块。</p><p>所有远程执行命令的格式都是<module>.<function>格式，使用sys.list_modules函数可以列举出对应minion主机上的所有模块;使用sys模块的list_functions函数可以列举出模块内可以应用的函数。</p><p>下面列举一些常用的模块和函数：</p><h3 id="1-远程命令执行模块"><a href="#1-远程命令执行模块" class="headerlink" title="1. 远程命令执行模块"></a>1. 远程命令执行模块</h3><p><code>cmd</code>模块可以在多台主机上同时执行一条相同命令</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># salt &#x27;*&#x27; cmd.run &quot;ps aux| wc -l&quot;</span><br><span class="hljs-attr">minion-one:</span><br>    <span class="hljs-number">103</span><br><span class="hljs-attr">minion-two:</span><br>    <span class="hljs-number">118</span><br>[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># salt &#x27;*&#x27; cmd.run_all &quot;ps aux| wc -l&quot; # 显示更详细参数</span><br><span class="hljs-attr">minion-two:</span><br>    <span class="hljs-string">----------</span><br>    <span class="hljs-attr">pid:</span><br>        <span class="hljs-number">9579</span><br>    <span class="hljs-attr">retcode:</span><br>        <span class="hljs-number">0</span><br>    <span class="hljs-attr">stderr:</span><br>    <span class="hljs-attr">stdout:</span><br>        <span class="hljs-number">118</span><br><span class="hljs-attr">minion-one:</span><br>    <span class="hljs-string">----------</span><br>    <span class="hljs-attr">pid:</span><br>        <span class="hljs-number">8023</span><br>    <span class="hljs-attr">retcode:</span><br>        <span class="hljs-number">0</span><br>    <span class="hljs-attr">stderr:</span><br>    <span class="hljs-attr">stdout:</span><br>        <span class="hljs-number">103</span><br><br></code></pre></td></tr></table></figure><h3 id="2-安装包管理"><a href="#2-安装包管理" class="headerlink" title="2. 安装包管理"></a>2. 安装包管理</h3><p><code>pkg</code>模块用于管理程序包，我们使用<code>pkg.install</code>模块来安装程序包</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@saltmaster</span> <span class="hljs-operator">~</span>]# salt <span class="hljs-string">&#x27;minion-one&#x27;</span> pkg.install <span class="hljs-string">&#x27;httpd&#x27;</span><br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    httpd:<br>        <span class="hljs-comment">----------</span><br>        <span class="hljs-keyword">new</span>:<br>            <span class="hljs-number">2.4</span><span class="hljs-number">.6</span><span class="hljs-number">-88.</span>el7.centos<br>        <span class="hljs-keyword">old</span>:<br>    httpd<span class="hljs-operator">-</span>tools:<br>        <span class="hljs-comment">----------</span><br>        <span class="hljs-keyword">new</span>:<br>            <span class="hljs-number">2.4</span><span class="hljs-number">.6</span><span class="hljs-number">-88.</span>el7.centos<br>        <span class="hljs-keyword">old</span>:<br>    mailcap:<br>        <span class="hljs-comment">----------</span><br>        <span class="hljs-keyword">new</span>:<br>            <span class="hljs-number">2.1</span><span class="hljs-number">.41</span><span class="hljs-number">-2.</span>el7<br>        <span class="hljs-keyword">old</span>:<br></code></pre></td></tr></table></figure><h3 id="3-管理服务模块"><a href="#3-管理服务模块" class="headerlink" title="3. 管理服务模块"></a>3. 管理服务模块</h3><p>salt通过<code>service</code>管理服务模块管理服务，该模块包括了<code>service.start</code>,<code>service.status</code>,<code>service.stop</code>等，如果service.status远程执行模块输出True结果，则表示该服务正在运行，如果输出False则表示该服务停止。</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@saltmaster</span> ~]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> service.status httpd</span><br>minion-one:<br>    <span class="hljs-literal">False</span><br>[root<span class="hljs-symbol">@saltmaster</span> ~]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> service.start httpd</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>[root<span class="hljs-symbol">@saltmaster</span> ~]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> service.status httpd</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>[root<span class="hljs-symbol">@saltmaster</span> ~]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> service.stop httpd</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br>[root<span class="hljs-symbol">@saltmaster</span> ~]<span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> service.status httpd</span><br>minion-one:<br>    <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><h3 id="4-文件管理模块"><a href="#4-文件管理模块" class="headerlink" title="4. 文件管理模块"></a>4. 文件管理模块</h3><p>对于文件管理，salt提供了<code>file</code>模块，<code>file.status</code>可以获取文件属性,<br><code>file.chown</code>可以修改文件属主</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">~</span>]<span class="hljs-comment"># salt &#x27;minion-one&#x27; file.stats /etc/yum.conf</span><br><span class="hljs-attr">minion-one:</span><br>    <span class="hljs-string">----------</span><br>    <span class="hljs-attr">atime:</span><br>        <span class="hljs-number">1552284497.869986</span><br>    <span class="hljs-attr">ctime:</span><br>        <span class="hljs-number">1552283157.8879962</span><br>    <span class="hljs-attr">gid:</span><br>        <span class="hljs-number">0</span><br>    <span class="hljs-attr">group:</span><br>        <span class="hljs-string">root</span><br>    <span class="hljs-attr">inode:</span><br>        <span class="hljs-number">16988181</span><br>    <span class="hljs-attr">mode:</span><br>        <span class="hljs-number">0644</span><br>    <span class="hljs-attr">mtime:</span><br>        <span class="hljs-number">1541382837.0</span><br>    <span class="hljs-attr">size:</span><br>        <span class="hljs-number">970</span><br>    <span class="hljs-attr">target:</span><br>        <span class="hljs-string">/etc/yum.conf</span><br>    <span class="hljs-attr">type:</span><br>        <span class="hljs-string">file</span><br>    <span class="hljs-attr">uid:</span><br>        <span class="hljs-number">0</span><br>    <span class="hljs-attr">user:</span><br>        <span class="hljs-string">root</span><br></code></pre></td></tr></table></figure><h3 id="5-用户管理模块"><a href="#5-用户管理模块" class="headerlink" title="5. 用户管理模块"></a>5. 用户管理模块</h3><p><code>user</code>模块可以用来管理用户，添加用户的salt命令格式如下：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">salt <span class="hljs-string">&#x27;*&#x27;</span> user.<span class="hljs-built_in">add</span> name <span class="hljs-symbol">&lt;uid&gt;</span> <span class="hljs-symbol">&lt;gid&gt;</span> <span class="hljs-symbol">&lt;groups&gt;</span> <span class="hljs-symbol">&lt;home&gt;</span> <span class="hljs-symbol">&lt;shell&gt;</span><br></code></pre></td></tr></table></figure><p>可以不指定其他信息，只做最简单的用户添加：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">salt <span class="hljs-string">&#x27;*&#x27;</span> <span class="hljs-keyword">user</span>.<span class="hljs-keyword">add</span> <span class="hljs-string">&#x27;mysql&#x27;</span><br></code></pre></td></tr></table></figure><p>删除用户：</p><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis">salt <span class="hljs-string">&#x27;minion-one&#x27;</span> <span class="hljs-literal">user</span>.<span class="hljs-keyword">delete</span> mysql<br></code></pre></td></tr></table></figure><p>查看用户信息：</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">salt</span> <span class="hljs-string">&#x27;minion-one&#x27;</span> user.<span class="hljs-literal">info</span> root<br></code></pre></td></tr></table></figure><h1 id="3-编写自己的模块代码"><a href="#3-编写自己的模块代码" class="headerlink" title="3 编写自己的模块代码"></a>3 编写自己的模块代码</h1><h2 id="3-1-理解salt底层执行的原理"><a href="#3-1-理解salt底层执行的原理" class="headerlink" title="3.1 理解salt底层执行的原理"></a>3.1 理解salt底层执行的原理</h2><p>salt底层通信是通过ZeroMQ完成的，采用了ZeroMQ的订阅发布模式（Pub和Sub）<br><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/saltstack/20170210103613403.png" alt="image"></p><p>简单来说Pub&#x2F;Sub模式类似于广播电台，在订阅发布模式中Pub将消息发送到总线，所有的Sub收到来自总线的消息后，根据自己的订阅条件来接收特定的消息。对应到Salt中就是master将事件发布到消息总线后，minion订阅并监听事件，然后minion会查看事件是否和自己匹配以确定是否需要执行。</p><p>Salt minion启动时从配置能文件中获取master的地址，如果为域名则进行解析，解析完成后会连接master的4506（ret接口）进行key认证。认证通过会获取到master的publish_port(默认4505)，然后连接publish_port订阅来自master pub接口的任务。当master下发操作指令时，所有的minion都能接收都，然后minion会检查本机是否匹配，如果匹配则执行。执行完毕后把结果发送到master的4506由master进行处理。</p><p>命令的发送完全是异步的，并且命令包很小，此外这些命令包通过maqpack进行序列化后数据会进一步压缩，所以salt的网络负载会非常低。</p><h2 id="3-2-执行模块的构成结构和编写自己的模块"><a href="#3-2-执行模块的构成结构和编写自己的模块" class="headerlink" title="3.2 执行模块的构成结构和编写自己的模块"></a>3.2 执行模块的构成结构和编写自己的模块</h2><p>（暂时忽略）</p><h1 id="4-通过state模块定义主机状态"><a href="#4-通过state模块定义主机状态" class="headerlink" title="4 通过state模块定义主机状态"></a>4 通过state模块定义主机状态</h1><h2 id="4-1-状态的概念以及如何撰写第一条状态"><a href="#4-1-状态的概念以及如何撰写第一条状态" class="headerlink" title="4.1 状态的概念以及如何撰写第一条状态"></a>4.1 状态的概念以及如何撰写第一条状态</h2><p>对于minion的环境控制，使用状态进行管理更为合适。状态是对minion的一种描述和定义，管理人员可以不关心具体部署的任务是如何完成的，只需要描述minion要到达什么状态，底层由salt的状态模块来完成功能。</p><p>之前我们使用pkg模块的install函数安装了httpd,这个函数的功能相当于在每台minion上执行yum install httpd命令，重复执行上面的命令相当于在所有minion上重新执行yum install httpd命令。</p><p>下面我们使用state模块完成部署：</p><ul><li><p>建立目录</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@saltmaster</span> srv]<span class="hljs-meta"># mkdir -p /srv/salt</span><br>[root<span class="hljs-symbol">@saltmaster</span> srv]<span class="hljs-meta"># cd /srv/salt</span><br></code></pre></td></tr></table></figure></li><li><p>建立apache.sls文件</p></li></ul><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">install_httpd</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">pkg.installed</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: httpd</span><br></code></pre></td></tr></table></figure><ul><li>使用state模块执行apache.sls</li></ul><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt <span class="hljs-emphasis">&#x27;minion-one&#x27;</span> state.sls apache<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: install_httpd</span><br><span class="hljs-code">    Function: pkg.installed</span><br><span class="hljs-code">        Name: httpd</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: The following packages were installed/updated: httpd</span><br><span class="hljs-code">     Started: 11:44:28.533490</span><br><span class="hljs-code">    Duration: 8349.668 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              httpd:</span><br><span class="hljs-code">                  ----------</span><br><span class="hljs-code">                  new:</span><br><span class="hljs-code">                      2.4.6-88.el7.centos</span><br><span class="hljs-code">                  old:</span><br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 1 (changed=1)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     1<br>Total run time:   8.350 s<br></code></pre></td></tr></table></figure><p>可以看到用state模块部署Apache软件时我们用了一个描述性的配置文件，命令行调用了state模块的SLS函数，从返回的结果上看也是成功部署了httpd。</p><p>为了看出区别我们再执行一次：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt <span class="hljs-emphasis">&#x27;minion-one&#x27;</span> state.sls apache<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: install_httpd</span><br><span class="hljs-code">    Function: pkg.installed</span><br><span class="hljs-code">        Name: httpd</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: All specified packages are already installed</span><br><span class="hljs-code">     Started: 11:49:56.301971</span><br><span class="hljs-code">    Duration: 1233.84 ms</span><br><span class="hljs-code">     Changes:   </span><br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 1<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     1<br>Total run time:   1.234 s<br></code></pre></td></tr></table></figure><p>从返回的结果来看httpd软件已经安装过了，多次运行也会得到和上面相同的结果。这就表明了执行模块和状态模块之间的主要区别–执行模块是过程式的，状态模块是描述性的。这意味着当你连续几次调用同一个执行模块时将执行相同的逻辑和指令，而状态模块则相反，<strong>当我们执行时state模块会首先做判断，判断httpd是否已经安装了，如果没有则进行安装，如果有则什么都不做，这种性质叫做幂等性，只有当真实状态和所需状态不同的情况下才执行功能</strong>。</p><h2 id="4-2-状态配置文件的各个要素"><a href="#4-2-状态配置文件的各个要素" class="headerlink" title="4.2 状态配置文件的各个要素"></a>4.2 状态配置文件的各个要素</h2><p>下面我们来看一下状态文件的构成，以刚才的Apache.sls文件为例:</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">install_httpd</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">pkg.installed</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">name: httpd</span><br></code></pre></td></tr></table></figure><p>sls配置文件使用YAML语言描述，默认的sls文件的renderer是YAML renderer，YAML renderer的工作是将YAML数据格式的结构编译成为Python的数据结构给salt使用。</p><p>主要记住三个规则就可以使用YAML语法写SLS文件了：</p><ol><li><p>规则一： 缩进<br>YAML使用了一个固定的缩进风格来标书数据层结构关系，salt需要每个缩进级别由两个空格组成，不要使用tabs。</p></li><li><p>规则二： 冒号<br>Python字典的keys在YAML中的表现形式是一个以冒号结尾的字符串。values的表现形式是冒号下面的每一行用一个空格隔开：</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">my_key:</span> my_value<br></code></pre></td></tr></table></figure><p>另一种选择，一个value可以通过缩进与key连接</p><figure class="highlight avrasm"><table><tr><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">mykey:</span><br>  my_value<br></code></pre></td></tr></table></figure></li><li><p>规则三：短横杠<br>用一个短横杠加一个空格来表示列表项，多个项使用同样的缩进级别来作为同一列表的一部分。</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">my_dictionary</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list_value_one</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list_value_two</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">list_value_three</span><br></code></pre></td></tr></table></figure><p>在Python中将被映射为：<br><code>&#123;&quot;my_dictionary&quot;: [&quot;list_value_one&quot;,&quot;list_value_two&quot;, “list_value_three”]&#125;</code></p></li></ol><p>下面详细说一下配置文件的格式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ID</span> <span class="hljs-attr">Declaration</span>&gt;</span>:<br>  <span class="hljs-tag">&lt;<span class="hljs-name">State</span> <span class="hljs-attr">Module</span>&gt;</span>.<span class="hljs-tag">&lt;<span class="hljs-name">Function</span>&gt;</span>:<br>    - name: <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br>    - <span class="hljs-tag">&lt;<span class="hljs-name">Function</span> <span class="hljs-attr">Arg</span>&gt;</span><br>    - <span class="hljs-tag">&lt;<span class="hljs-name">Function</span> <span class="hljs-attr">Arg</span>&gt;</span><br>    - <span class="hljs-tag">&lt;<span class="hljs-name">Function</span> <span class="hljs-attr">Arg</span>&gt;</span><br>    - <span class="hljs-tag">&lt;<span class="hljs-name">Requisite</span> <span class="hljs-attr">Declaration</span>&gt;</span><br>      - <span class="hljs-tag">&lt;<span class="hljs-name">Requisite</span> <span class="hljs-attr">Reference</span>&gt;</span><br></code></pre></td></tr></table></figure><p>每个状态的<ID Declaretion>字符串必须独一无二。<ID Declartion>可以包含字母、数字、空格和下划线。ID尽量保持简洁明了。<State Module>.<Function>即上文提到的远程执行命令采用的相同格式。</p><p>最后是函数参数，收个参数通常是name,然后是状态所需的其他参数。这里不同点是所有使用的模块都是状态模块而不是普通的远程执行模块。</p><p><a href="https://docs.saltstack.com/en/latest/ref/states/highstate.html#large-example">更多请参见官方文档</a></p><h2 id="4-3-常用的状态模块用法"><a href="#4-3-常用的状态模块用法" class="headerlink" title="4.3 常用的状态模块用法"></a>4.3 常用的状态模块用法</h2><h3 id="file模块"><a href="#file模块" class="headerlink" title="file模块"></a>file模块</h3><p>file模块包含许多函数，比较常用的有：</p><p><code>file.managed</code>下发文件，确保文件存在</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">/etc/foo.conf</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">file.manager</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">source:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">salt://foo.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">user: qtj</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">group: users</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mode: 644 </span><br></code></pre></td></tr></table></figure><p><code>file.directory</code>建立目录：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">/srv/stuff/substuff</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">file.directory</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">user: qtj</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">group: users</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mode: 755</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">makedirs: True</span><br></code></pre></td></tr></table></figure><p>file.symlink建立软连接：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/etc/g</span>rub.conf:<br>  <span class="hljs-keyword">file</span>.symlink:<br>    - target: <span class="hljs-regexp">/boot/g</span>rub/grub.conf<br></code></pre></td></tr></table></figure><p>file.recurse下发整个目录：</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/opt/</span>code/flask:<br>  <span class="hljs-keyword">file</span>.recurse:<br>  - <span class="hljs-keyword">source</span>: salt:<span class="hljs-comment">//code/flask</span><br>  - include_empty: <span class="hljs-keyword">True</span><br></code></pre></td></tr></table></figure><h3 id="pkg模块"><a href="#pkg模块" class="headerlink" title="pkg模块"></a>pkg模块</h3><p>pkg.installed软件安装：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">mypkgs</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">pkg.installed</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">pkgs:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">foo</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">bar: 1.2.3-4</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">baz</span><br></code></pre></td></tr></table></figure><p>后面可以指定软件rpm来源，如果什么都不带则默认安装最新版本</p><h3 id="service模块"><a href="#service模块" class="headerlink" title="service模块"></a>service模块</h3><p>启动redis服务：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">redis:</span><br>  <span class="hljs-attr">service.running:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">enable:</span> <span class="hljs-literal">True</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">reload:</span> <span class="hljs-literal">True</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">watch:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">redis</span><br></code></pre></td></tr></table></figure><h3 id="cron模块"><a href="#cron模块" class="headerlink" title="cron模块"></a>cron模块</h3><p>每五分钟执行一次：</p><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">date</span> &gt; <span class="hljs-regexp">/tmp/</span>crontest:<br>       cron.present:<br>       - user: root<br>       - <span class="hljs-built_in">minute</span>：<span class="hljs-string">&quot;*/5&quot;</span><br></code></pre></td></tr></table></figure><h3 id="user模块"><a href="#user模块" class="headerlink" title="user模块"></a>user模块</h3><p>user.present:</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">user.present:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">fullname:</span> <span class="hljs-string">lym</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">shell:</span> <span class="hljs-string">/bin/bash</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">home:</span> <span class="hljs-string">/home/lym</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">uid:</span> <span class="hljs-number">5200</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">gid:</span> <span class="hljs-number">5200</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">groups:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">users</span><br></code></pre></td></tr></table></figure><h3 id="sysctl模块"><a href="#sysctl模块" class="headerlink" title="sysctl模块"></a>sysctl模块</h3><p>调整内核参数：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">vm.swappiness:</span><br>  <span class="hljs-attr">sysctl.present:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">value:</span> <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h3 id="pip模块"><a href="#pip模块" class="headerlink" title="pip模块"></a>pip模块</h3><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">django</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">pip.installed</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">name: django &gt;=1.11.6, &lt;= 1.11.12</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">require:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">pkg: python-pip</span><br></code></pre></td></tr></table></figure><h2 id="4-4-使用requisites对状态进行排序控制"><a href="#4-4-使用requisites对状态进行排序控制" class="headerlink" title="4.4 使用requisites对状态进行排序控制"></a>4.4 使用requisites对状态进行排序控制</h2><p>如果一个主机涉及多个状态，并且状态之间相互关联，需要在执行顺序上有先后之分，那就必须引入requisites来进行控制。</p><p>下面以安装Apache为例说明：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">salt</span>]<span class="hljs-comment"># cat apache.sls </span><br><span class="hljs-attr">install_httpd:</span><br>    <span class="hljs-attr">pkg.installed:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br><span class="hljs-attr">httpd_running:</span><br>    <span class="hljs-attr">service.running:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">enable:</span> <span class="hljs-literal">True</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">require:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">install_httpd</span><br></code></pre></td></tr></table></figure><p>这段示例中定义了两个状态，分别是安装httpd和启动httpd,很明显必须先安装完成再启动httpd。这里我们通过require指定httpd running操作必须在install_httpd安装完成以后才可以执行。</p><p>进一步地</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">install_httpd:</span><br>    <span class="hljs-attr">pkg.installed:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br><span class="hljs-attr">httpd_running:</span><br>    <span class="hljs-attr">service.running:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">enable:</span> <span class="hljs-literal">True</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">require:</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">pkg:</span> <span class="hljs-string">install_httpd</span><br>          <span class="hljs-bullet">-</span> <span class="hljs-attr">watch:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">file:</span> <span class="hljs-string">httdp_conf</span><br><span class="hljs-attr">httdp_conf:</span><br>  <span class="hljs-attr">file.managed:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">/etc/httpd/conf/httdp.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">salt://httdp.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-number">600</span><br></code></pre></td></tr></table></figure><p>加入了一个httpd.conf文件下发的配置，首先安装httpd,然后确定httpd进程启动，最后对比需要下发的httpd.conf文件是否和minion上相同，如果不同就下发，之后通过watch指定触发重新加载httpd进程生效。</p><h1 id="5-通过Jinja2-模板以及Grain和Pillar扩展主机状态"><a href="#5-通过Jinja2-模板以及Grain和Pillar扩展主机状态" class="headerlink" title="5 通过Jinja2 模板以及Grain和Pillar扩展主机状态"></a>5 通过Jinja2 模板以及Grain和Pillar扩展主机状态</h1><h2 id="5-1-Jinja2-模板语言的基础"><a href="#5-1-Jinja2-模板语言的基础" class="headerlink" title="5.1 Jinja2 模板语言的基础"></a>5.1 Jinja2 模板语言的基础</h2><h3 id="Jinja2变量"><a href="#Jinja2变量" class="headerlink" title="Jinja2变量"></a>Jinja2变量</h3><p>Jinja2模板包含变量和表达式：变量用<code>&#123;&#123;&#125;&#125;</code>包围，表达式用<code>&#123;% %&#125;</code>包围。<br>从一个例子开始：</p><figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp">[<span class="hljs-meta">root@saltmaster salt</span>]<span class="hljs-meta"># cat var.sls </span><br>&#123;% <span class="hljs-keyword">set</span> <span class="hljs-keyword">var</span>=<span class="hljs-string">&#x27;Hello World!&#x27;</span> %&#125;<br>test_var:<br>  cmd.run:<br>    - name: echo <span class="hljs-string">&quot;var is &#123;&#123; var &#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>运行并查看Jinja2变量的输出：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt &quot;minion-one&quot; state.sls var<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: test_var</span><br><span class="hljs-code">    Function: cmd.run</span><br><span class="hljs-code">        Name: echo &quot;var is Hello World!&quot;</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: Command &quot;echo &quot;var is Hello World!&quot;&quot; run</span><br><span class="hljs-code">     Started: 18:08:14.434038</span><br><span class="hljs-code">    Duration: 16.576 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              pid:</span><br><span class="hljs-code">                  17044</span><br><span class="hljs-code">              retcode:</span><br><span class="hljs-code">                  0</span><br><span class="hljs-code">              stderr:</span><br><span class="hljs-code">              stdout:</span><br><span class="hljs-code">                  var is Hello World!</span><br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 1 (changed=1)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     1<br>Total run time:  16.576 ms<br></code></pre></td></tr></table></figure><h3 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h3><ul><li>For</li></ul><p>遍历序列中的每一项:</p><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> user <span class="hljs-keyword">in</span> users %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123;user&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>变量是一个字典：</p><figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> key, value <span class="hljs-keyword">in</span> my_dict.items() %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; key &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123; value &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p>与Python不同是是模板循环内不能有break或continue语句。</p><ul><li>if<figure class="highlight django"><table><tr><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> users %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> user <span class="hljs-keyword">in</span> users %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    </span><span class="hljs-template-variable">&#123;&#123; user.username &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="5-2-Grain和Pillar的概念及设置"><a href="#5-2-Grain和Pillar的概念及设置" class="headerlink" title="5.2 Grain和Pillar的概念及设置"></a>5.2 Grain和Pillar的概念及设置</h2><h3 id="Grain的概念"><a href="#Grain的概念" class="headerlink" title="Grain的概念"></a>Grain的概念</h3><p>Grains是存储在minion上的一种静态数据，minion启动后就进行Grains的计算，包括操作系统类型、版本、CPU核数、内存大小等等，这些数据不经常变化。Grain让salt变得更加灵活。</p><h3 id="Grain相关的基本命令"><a href="#Grain相关的基本命令" class="headerlink" title="Grain相关的基本命令"></a>Grain相关的基本命令</h3><p>列出所有minion上的Grains项</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster ~]# salt &quot;minion-one&quot; grains.ls</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">SSDs</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">biosreleasedate</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">biosversion</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cpu_flags</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cpu_model</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">cpuarch</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">disks</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">dns</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">domain</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">fqdn</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">fqdn_ip4</span><br>......以下省略<br></code></pre></td></tr></table></figure><p>查询minion上某一具体的Grain值：</p><figure class="highlight llvm"><table><tr><td class="code"><pre><code class="hljs llvm">[root<span class="hljs-title">@saltmaster</span> ~]# salt <span class="hljs-string">&quot;minion-one&quot;</span> grains.item cpu_model<br>minion-<span class="hljs-keyword">one</span>:<br>    ----------<br>    cpu_model:<br>        Intel(R) Core(TM) <span class="hljs-type">i5</span><span class="hljs-number">-4210</span>U CPU @ <span class="hljs-number">1.70</span>GHz<br></code></pre></td></tr></table></figure><p>列出对应minion上所有Grain的详细信息：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster ~]# salt &quot;minion-one&quot; grains.items</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    SSDs</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">biosreleasedate</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">04/13/2018</span><br><span class="hljs-attribute">    biosversion</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">6.00</span><br><span class="hljs-attribute">    cpu_flags</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">fpu</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">vme</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">de</span><br>......以下省略<br></code></pre></td></tr></table></figure><h3 id="设置Grains数据"><a href="#设置Grains数据" class="headerlink" title="设置Grains数据"></a>设置Grains数据</h3><p>salt为我们提供了很多默认的Grains数据，但有一些场景下需要用户自定义Grains的数据，下面讲解常用的设置方法：</p><ul><li>命令行方式<br>单个值设置：<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@saltmaster</span> <span class="hljs-operator">~</span>]# salt &quot;minion-one&quot; grains.setval my_grain bar<br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    my_grain:<br>        bar<br></code></pre></td></tr></table></figure></li></ul><p>多个值设置：</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@saltmaster ~]<span class="hljs-meta">#  salt <span class="hljs-string">&#x27;*&#x27;</span> grains.setval key <span class="hljs-string">&quot;&#123;&#x27;key1&#x27;: &#x27;val1&#x27;, &#x27;key2&#x27;: &#x27;val2&#x27;&#125;&quot;</span></span><br>minion-one:<br>    ----------<br><span class="hljs-symbol">    key:</span><br>        ----------<br><span class="hljs-symbol">        key1:</span><br>            val1<br><span class="hljs-symbol">        key2:</span><br>            val2<br>minion-two:<br>    ----------<br><span class="hljs-symbol">    key:</span><br>        ----------<br><span class="hljs-symbol">        key1:</span><br>            val1<br><span class="hljs-symbol">        key2:</span><br>            val2<br></code></pre></td></tr></table></figure><p>列表结构设置：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster ~]#  salt &#x27;*&#x27; grains.setval my_grain_dict &#x27;[&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]&#x27;</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    my_grain_dict</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">one</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">two</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">three</span><br><span class="hljs-attribute">minion-two</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    my_grain_dict</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">one</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">two</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">three</span><br></code></pre></td></tr></table></figure><p>设置成功后通过下面的命令查询：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster ~]# salt &#x27;*&#x27; grains.item my_grain_dict</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    my_grain_dict</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">one</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">two</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">three</span><br><span class="hljs-attribute">minion-two</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    my_grain_dict</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">one</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">two</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">three</span><br></code></pre></td></tr></table></figure><p><strong>以上变量已经写入了minion的&#x2F;etc&#x2F;salt&#x2F;grains文件中，通过查看对应文件可以获得</strong></p><ul><li>grains_module的方式设置</li></ul><p>a. 在master上建立模块对应的目录：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -pv /src/salt/_grains</span><br></code></pre></td></tr></table></figure><p>b. 写入一个模块：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">vim my_grain_mod.py<br><span class="hljs-keyword">import</span> <span class="hljs-type">time</span><br><br>def now():<br>  grains = &#123;&#125;<br>  grains[<span class="hljs-string">&#x27;now&#x27;</span>] = <span class="hljs-type">time</span>.time()<br>  <span class="hljs-keyword">return</span> grains<br></code></pre></td></tr></table></figure><p>c. 同步模块到minion</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts">[root@saltmaster _grains]<span class="hljs-meta"># salt <span class="hljs-string">&quot;minion-one&quot;</span> saltutil.sync_all</span><br>minion-one:<br>    ----------<br><span class="hljs-symbol">    beacons:</span><br><span class="hljs-symbol">    clouds:</span><br><span class="hljs-symbol">    engines:</span><br><span class="hljs-symbol">    grains:</span><br>        - grains.my_grain_mod<br><span class="hljs-symbol">    log_handlers:</span><br><span class="hljs-symbol">    matchers:</span><br><span class="hljs-symbol">    modules:</span><br><span class="hljs-symbol">    output:</span><br><span class="hljs-symbol">    proxymodules:</span><br><span class="hljs-symbol">    renderers:</span><br><span class="hljs-symbol">    returners:</span><br><span class="hljs-symbol">    sdb:</span><br><span class="hljs-symbol">    serializers:</span><br><span class="hljs-symbol">    states:</span><br><span class="hljs-symbol">    thorium:</span><br><span class="hljs-symbol">    utils:</span><br></code></pre></td></tr></table></figure><p>d. 重载一次模块</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@saltmaster</span> _grains]<span class="hljs-meta"># salt <span class="hljs-string">&quot;minion-one&quot;</span> sys.reload_modules</span><br>minion-one:<br>    <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>e. 查看新设置的Grains</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@saltmaster</span> _grains]# salt &quot;minion-one&quot; grains.item now<br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    now:<br>        <span class="hljs-number">1552442351.143724</span><br></code></pre></td></tr></table></figure><ul><li><p>在minion端设置<br>通过修改minion的配置文件同样可以自定义Grains,登录到一台minion上：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@salt-minion ~]# vim /etc/salt/minion.d/grain.conf</span><br><span class="hljs-attribute">grains</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">new_grain</span><span class="hljs-punctuation">:</span> <span class="hljs-string">bar</span><br>  <span class="hljs-attribute">new_grain_dict</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">one</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">two</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">three</span><br></code></pre></td></tr></table></figure><p>然后重启salt-minion 加载配置文件，之后在master上可以查看的新变量:</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@saltmaster</span> _grains]# salt &quot;minion-one&quot; grains.item new_grain<br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    new_grain:<br>        bar<br>[root<span class="hljs-variable">@saltmaster</span> _grains]# salt &quot;minion-one&quot; grains.item new_grain_dict<br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    new_grain_dict:<br>        <span class="hljs-operator">-</span> <span class="hljs-keyword">one</span><br>        <span class="hljs-operator">-</span> two<br>        <span class="hljs-operator">-</span> three<br></code></pre></td></tr></table></figure></li><li><p>删除自定义Grains</p><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># salt <span class="hljs-string">&quot;minion-one&quot;</span> grains.delval my_grain</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Pillar的概念"><a href="#Pillar的概念" class="headerlink" title="Pillar的概念"></a>Pillar的概念</h3><p>Grains是静态数据，如果是动态数据则需要使用Pillar，Pillar数据存储在master上，指定的minion只能看到自己的Pillar数据，其他的minion看不到任何Pillar数据，这一点和状态文件正好相反–所有通过认证的minion都可以获取状态文件，但是每个minion却自己有一套Pillar数据，并且这些数据都是加密的。</p><h3 id="Pillar相关的基本概念"><a href="#Pillar相关的基本概念" class="headerlink" title="Pillar相关的基本概念"></a>Pillar相关的基本概念</h3><p>列出对应minion上所有的Pillar的详细信息：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># salt <span class="hljs-string">&quot;minion-one&quot;</span> pillar.items</span><br></code></pre></td></tr></table></figure><p>查询minion上某一具体Grain的值：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta"># salt <span class="hljs-string">&#x27;minion-one&#x27;</span> pillar.item foo</span><br></code></pre></td></tr></table></figure><h3 id="设置Pillar数据"><a href="#设置Pillar数据" class="headerlink" title="设置Pillar数据"></a>设置Pillar数据</h3><p>设计这样一个场景：现在有三台minion，每台需要从master获取自己需要的私钥，私钥在传输过程中必须加密，且私钥不能够让任何其他minion获取到。下面用三个不同的字符串来代表私钥：</p><p>首先建立目录，然后为每个minion编写对应的SLS文件：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">mkdir</span> -pv /srv/pillar  <span class="hljs-comment"># 目录是固定的，写在其他地方不识别！</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">vim minion_one_key.sls</span><br>private_key: minion_one_key<br><span class="hljs-meta prompt_"># </span><span class="language-bash">vim minion_two_key.sls</span><br>private_key: minion_twp_key<br></code></pre></td></tr></table></figure><p>之后建立入口文件：</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">base</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">&#x27;minion-one&#x27;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">minion_one_key</span><br>  <span class="hljs-attribute">&#x27;minion-two&#x27;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">minion_two_key</span><br></code></pre></td></tr></table></figure><p>top.sls文件中可以使用第二节讲解过的各种匹配模式，这里使用了通用匹配，只匹配对应的minion名字，设置完毕后执行下面命令刷新Pillar数据：</p><figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># salt <span class="hljs-string">&#x27;*&#x27;</span> saltutil.refresh_pillar</span><br></code></pre></td></tr></table></figure><p>然后查看所有Pillar数据：</p><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">[root<span class="hljs-variable">@saltmaster</span> pillar]# salt <span class="hljs-string">&#x27;*&#x27;</span> pillar.items<br>minion<span class="hljs-operator">-</span><span class="hljs-keyword">one</span>:<br>    <span class="hljs-comment">----------</span><br>    private_key:<br>        minion_one_key<br>minion<span class="hljs-operator">-</span>two:<br>    <span class="hljs-comment">----------</span><br>    private_key:<br>        minion_two_key<br></code></pre></td></tr></table></figure><p>可以看到不同的minion获取了自己私有的字符串，这就完成了Pillar下发敏感数据的过程，通信加密，且minion之间不可见。</p><h2 id="5-3-用Jinjia2配合Grain和Pillar扩展SLS配置文件"><a href="#5-3-用Jinjia2配合Grain和Pillar扩展SLS配置文件" class="headerlink" title="5.3 用Jinjia2配合Grain和Pillar扩展SLS配置文件"></a>5.3 用Jinjia2配合Grain和Pillar扩展SLS配置文件</h2><h3 id="扩展Apache-sls配置文件"><a href="#扩展Apache-sls配置文件" class="headerlink" title="扩展Apache.sls配置文件"></a>扩展Apache.sls配置文件</h3><p>之前我们学习了如何用Apache.sls状态文件部署Apache，sls文件内容如下：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">salt</span>]<span class="hljs-comment"># cat apache.sls</span><br><span class="hljs-attr">install_httpd:</span><br>    <span class="hljs-attr">pkg.installed:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br></code></pre></td></tr></table></figure><p>这个文件仅仅适用于Redhat系的Linux系统，如果是Ubuntu系统，它对应的Apache安装包名叫做apache2，这个安装脚本就不适用了。</p><p>上面这种情况抽象出来，就是根据minion的不同属性，SLS状态文件需要有逻辑判断来执行不同的操作。而Grains是描述minion固有属性的数据，Jinjia2可以做流程和逻辑控制，那么两者结合起来就可以满足上面的需求。</p><p>修改后的sls状态文件如下：</p><figure class="highlight twig"><table><tr><td class="code"><pre><code class="hljs twig"><span class="language-xml">install_httpd:</span><br><span class="language-xml">  pkg.installed:</span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> grains[<span class="hljs-string">&#x27;os_family&#x27;</span>] == <span class="hljs-string">&#x27;Debian&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">    - name: apache2</span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">elif</span> grains[<span class="hljs-string">&#x27;os_family&#x27;</span>] == <span class="hljs-string">&#x27;RedHat&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">    - name: httpd</span><br><span class="language-xml">  </span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><h3 id="多系统vim安装实例"><a href="#多系统vim安装实例" class="headerlink" title="多系统vim安装实例"></a>多系统vim安装实例</h3><p>根据不同操作系统安装下不同的vim包下发不同的配置文件：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@saltmaster salt]# <span class="hljs-keyword">cat</span> <span class="hljs-keyword">vim</span>.sls<br><span class="hljs-keyword">vim</span>:<br>  pkg:<br>    - installed<br>    &#123;% <span class="hljs-keyword">if</span> grains[<span class="hljs-string">&#x27;os_family&#x27;</span>] == <span class="hljs-string">&#x27;RedHat&#x27;</span> %&#125;<br>    - name: <span class="hljs-keyword">vim</span>-enhanced<br>    &#123;% elif grains[<span class="hljs-string">&#x27;os_family&#x27;</span>] == <span class="hljs-string">&#x27;Debian&#x27;</span> %&#125;<br>    - name: <span class="hljs-keyword">vim</span>-nox<br>    &#123;% <span class="hljs-keyword">endif</span> %&#125;<br><br>&#123;% <span class="hljs-keyword">if</span> grains[<span class="hljs-string">&#x27;os&#x27;</span>] == <span class="hljs-string">&#x27;Arch&#x27;</span> %&#125;<br><span class="hljs-keyword">file</span>:<br>  - managed<br>  - <span class="hljs-keyword">source</span>: salt://<span class="hljs-keyword">vim</span>/vimrc<br>  - user: root<br>  - group: root<br>  - <span class="hljs-keyword">mode</span>: <span class="hljs-number">644</span><br>  - template: jinja<br>  - makedirs: True<br>  - require:<br>      - pkg: <span class="hljs-keyword">vim</span><br>&#123;% <span class="hljs-keyword">endif</span> %&#125;<br></code></pre></td></tr></table></figure><h3 id="iptables根据系统不同下发"><a href="#iptables根据系统不同下发" class="headerlink" title="iptables根据系统不同下发"></a>iptables根据系统不同下发</h3><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">iptables:<br>  pkg:<br>    - installed<br>  service:<br>    - running<br>    - watch:<br>        - pkg: iptables<br>        - <span class="hljs-keyword">file</span>: iptables<br>  <span class="hljs-keyword">file</span>:<br>    - managed<br>    - <span class="hljs-keyword">source</span>: salt:<span class="hljs-comment">//iptables/iptables</span><br>    &#123;% <span class="hljs-keyword">if</span> grains[<span class="hljs-string">&#x27;os&#x27;</span>] == <span class="hljs-string">&#x27;CentOS&#x27;</span> or grains[<span class="hljs-string">&#x27;os&#x27;</span>] == <span class="hljs-string">&#x27;Fedora&#x27;</span> %&#125;<br>    - name: <span class="hljs-regexp">/etc/</span>sysconfig/iptables<br>    &#123;% elif grains[<span class="hljs-string">&#x27;os&#x27;</span>] == <span class="hljs-string">&#x27;Arch&#x27;</span> %&#125;<br>    - name: <span class="hljs-regexp">/etc/</span>conf.d/iptables<br>    &#123;% endif %&#125;<br></code></pre></td></tr></table></figure><h3 id="通过Pillar扩展SLS配置"><a href="#通过Pillar扩展SLS配置" class="headerlink" title="通过Pillar扩展SLS配置"></a>通过Pillar扩展SLS配置</h3><p>Jinjia2模板语言和Pillar的结合在使用上和Grains没有任何区别。下面举一个例子，有三台minion分别设置了它们的Pillar的user值如下:</p><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">[root@saltmaster pillar]# salt &#x27;*&#x27; pillar.items</span><br><span class="hljs-attribute">minion-one</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    user</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mysql1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mysql2</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">mysql3</span><br><span class="hljs-attribute">minion-two</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">----------</span><br><span class="hljs-attribute">    user</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">web1</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">web2</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">web3</span><br></code></pre></td></tr></table></figure><p>要在这两台机器上根据它们的Pillar值分别建立相关的用户,sls脚本代码如下：</p><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@saltmaster salt]</span># cat adduser<span class="hljs-selector-class">.sls</span> <br>&#123;% for <span class="hljs-selector-tag">i</span> in pillar<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;user&#x27;</span>]</span> %&#125;<br>add_&#123;&#123; <span class="hljs-selector-tag">i</span> &#125;&#125;:<br>  user.present:<br>    - name: &#123;&#123; <span class="hljs-selector-tag">i</span> &#125;&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt <span class="hljs-emphasis">&#x27;*&#x27;</span> state.sls adduser<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: add_mysql1</span><br><span class="hljs-code">    Function: user.present</span><br><span class="hljs-code">        Name: mysql1</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: New user mysql1 created</span><br><span class="hljs-code">     Started: 13:45:04.686551</span><br><span class="hljs-code">    Duration: 92.536 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              fullname:</span><br><span class="hljs-code">              gid:</span><br><span class="hljs-code">                  1001</span><br><span class="hljs-code">              groups:</span><br><span class="hljs-code">                  - mysql1</span><br><span class="hljs-code">              home:</span><br><span class="hljs-code">                  /home/mysql1</span><br><span class="hljs-code">              homephone:</span><br><span class="hljs-code">              name:</span><br><span class="hljs-code">                  mysql1</span><br><span class="hljs-code">              other:</span><br><span class="hljs-code">              passwd:</span><br><span class="hljs-code">                  x</span><br><span class="hljs-code">              roomnumber:</span><br><span class="hljs-code">              shell:</span><br><span class="hljs-code">                  /bin/bash</span><br><span class="hljs-code">              uid:</span><br><span class="hljs-code">                  1001</span><br><span class="hljs-code">              workphone:</span><br>......中间部分省略<br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 3 (changed=3)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     3<br>Total run time: 164.397 ms<br>......以下省略<br></code></pre></td></tr></table></figure><h2 id="5-4-用Jianjia2配合Grains和Pilliar动态下发配置文件"><a href="#5-4-用Jianjia2配合Grains和Pilliar动态下发配置文件" class="headerlink" title="5.4 用Jianjia2配合Grains和Pilliar动态下发配置文件"></a>5.4 用Jianjia2配合Grains和Pilliar动态下发配置文件</h2><p>第四节我们学习过file模块的一个状态函数managed，这个模块可以从master下发配置文件到匹配的minion上，这种下发方式使所有minion得到一份同样的配置文件。</p><p>但是现实情况是不同的minion有不同的CPU核数，不同的内存大小，很多软件需要根据这些配置进行不同的相应调整。Jinjia2配合Grain和Pillar可以很好地决绝此类问题，下面我们学校如何通过模板文件动态地生成配置文件。</p><h3 id="一个简单模板下发实例"><a href="#一个简单模板下发实例" class="headerlink" title="一个简单模板下发实例"></a>一个简单模板下发实例</h3><p>首先编辑状态文件：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml">[<span class="hljs-string">root@saltmaster</span> <span class="hljs-string">salt</span>]<span class="hljs-comment"># cat template.sls </span><br><span class="hljs-attr">template_test:</span><br>  <span class="hljs-attr">file.managed:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">source:</span> <span class="hljs-string">salt://test.j2</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">/tmp/test.conf</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">group:</span> <span class="hljs-string">root</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">mode:</span> <span class="hljs-number">644</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">template:</span> <span class="hljs-string">jinja</span><br></code></pre></td></tr></table></figure><p>编辑模板文件：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">[root@saltmaster salt]# cat test.j2 </span><br><span class="language-xml">cpu_num = </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">grains</span>[&#x27;num_cpus&#x27;] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">mem_total = </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">grains</span>[&#x27;mem_total&#x27;] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">hostname = </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">grains</span>[&#x27;host&#x27;] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">user = </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">pillar</span>[&#x27;user&#x27;][0] &#125;&#125;</span><br></code></pre></td></tr></table></figure><p>测试模板文件下发：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt &quot;minion-one&quot; state.sls template<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: template_test</span><br><span class="hljs-code">    Function: file.managed</span><br><span class="hljs-code">        Name: /tmp/test.conf</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: File /tmp/test.conf updated</span><br><span class="hljs-code">     Started: 14:02:28.037462</span><br><span class="hljs-code">    Duration: 122.729 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              diff:</span><br><span class="hljs-code">                  New file</span><br><span class="hljs-code">              mode:</span><br><span class="hljs-code">                  0644</span><br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 1 (changed=1)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     1<br>Total run time: 122.729 ms<br></code></pre></td></tr></table></figure><p>登录到minion-one查看下发的配置文件：</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[root@salt-minion ~]</span><span class="hljs-comment"># cat /tmp/test.conf</span><br><span class="hljs-attr">cpu_num</span> = <span class="hljs-number">1</span><br><span class="hljs-attr">mem_total</span> = <span class="hljs-number">972</span><br><span class="hljs-attr">hostname</span> = salt-minion<br><span class="hljs-attr">user</span> = mysql1<br></code></pre></td></tr></table></figure><p>进一步地，如果在这个例子中加入部分Jinja2的逻辑控制功能：</p><figure class="highlight twig"><table><tr><td class="code"><pre><code class="hljs twig"><span class="language-xml">[root@saltmaster salt]# vim test.j2 </span><br><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> grains[<span class="hljs-string">&#x27;num_cpus&#x27;</span>] &gt;= <span class="hljs-number">8</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">cpu_num = 8</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">else</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">cpu_num = </span><span class="hljs-template-variable">&#123;&#123; grains[<span class="hljs-string">&#x27;num_cpus&#x27;</span>] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> grains[<span class="hljs-string">&#x27;mem_total&#x27;</span>] &lt;= <span class="hljs-number">512</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">mem_total &lt;= 512</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">elif</span> grains[<span class="hljs-string">&#x27;mem_total&#x27;</span>] &lt;= <span class="hljs-number">1024</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">mem_total = </span><span class="hljs-template-variable">&#123;&#123; grains[<span class="hljs-string">&#x27;mem_total&#x27;</span>] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">else</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">mem_total = 1024</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">hostname = </span><span class="hljs-template-variable">&#123;&#123; grains[<span class="hljs-string">&#x27;host&#x27;</span>] &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> i <span class="hljs-keyword">in</span> pillar[<span class="hljs-string">&#x27;user&#x27;</span>] <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">  </span><span class="hljs-template-variable">&#123;&#123; i &#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p>测试模板下发：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc">[root@saltmaster salt]# salt &quot;minion-one&quot; state.sls template<br><span class="hljs-section">minion-one:</span><br><span class="hljs-section">----------</span><br><span class="hljs-code">          ID: template_test</span><br><span class="hljs-code">    Function: file.managed</span><br><span class="hljs-code">        Name: /tmp/test.conf</span><br><span class="hljs-code">      Result: True</span><br><span class="hljs-code">     Comment: File /tmp/test.conf updated</span><br><span class="hljs-code">     Started: 14:34:54.882206</span><br><span class="hljs-code">    Duration: 89.375 ms</span><br><span class="hljs-code">     Changes:   </span><br><span class="hljs-code">              ----------</span><br><span class="hljs-code">              diff:</span><br><span class="hljs-code">                  --- </span><br><span class="hljs-code">                  +++ </span><br><span class="hljs-code">                  @@ -1,4 +1,8 @@</span><br><span class="hljs-code">                   </span><br><span class="hljs-code">                  +cpu_num = 1</span><br><span class="hljs-code">                  +</span><br><span class="hljs-code">                  +</span><br><span class="hljs-code">                  +mem_total = 972</span><br><span class="hljs-code">                  +</span><br><span class="hljs-code">                  +  mysql1</span><br><span class="hljs-code">                  +</span><br><span class="hljs-code">                  +  mysql2</span><br><span class="hljs-code">                  +</span><br><span class="hljs-code">                  +  mysql3</span><br><span class="hljs-code">                  +</span><br><br><span class="hljs-code">                   hostname = salt-minion</span><br><span class="hljs-code">                   </span><br><br><span class="hljs-section">Summary for minion-one</span><br><span class="hljs-section">------------</span><br>Succeeded: 1 (changed=1)<br><span class="hljs-section">Failed:    0</span><br><span class="hljs-section">------------</span><br>Total states run:     1<br>Total run time:  89.375 ms<br></code></pre></td></tr></table></figure><p>登录到minion-one， 查看下发的配置文件:</p><figure class="highlight makefile"><table><tr><td class="code"><pre><code class="hljs makefile">[root@salt-minion ~]<span class="hljs-comment"># cat /tmp/test.conf</span><br>cpu_num = 1<br>mem_total = 972<br>hostname = salt-minion<br>  mysql1<br>  mysql2<br>  mysql3<br></code></pre></td></tr></table></figure><p>配置文件下发完成。</p><h2 id="5-5-Jinja与Grains和Pillar的补充"><a href="#5-5-Jinja与Grains和Pillar的补充" class="headerlink" title="5.5 Jinja与Grains和Pillar的补充"></a>5.5 Jinja与Grains和Pillar的补充</h2><p>前面我们已经知道，如果有一个叫做user的Grain&#x2F;Pillar属性，可以通过如下方法访问:</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">The user </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">grains</span>[&#x27;user&#x27;] &#125;&#125;</span><span class="language-xml"> is referred to here.</span><br><span class="language-xml">The user </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">pillar</span>[&#x27;user&#x27;] &#125;&#125;</span><span class="language-xml"> is referred to here.</span><br></code></pre></td></tr></table></figure><p>但如果Pillar或者Grains没有设置user，模板将无法正确渲染，比较安全的方法是使用内置的salt交叉执行模块：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">The user </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">salt</span>[&#x27;grains.get&#x27;](<span class="hljs-name">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;larry&#x27;</span>) &#125;&#125;</span><span class="language-xml"> is referred to here.</span><br><span class="language-xml">The user </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">salt</span>[&#x27;grains.get&#x27;](<span class="hljs-name">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;larry&#x27;</span>) &#125;&#125;</span><span class="language-xml"> is referred to here.</span><br></code></pre></td></tr></table></figure><p>如果user没有设置，则会默认使用Larry这个值。</p><p>我们还可以通过搜索Grains和Pillar来让模板变得更加动态。使用<code>config.get</code>方法，salt会首先搜索minion配置文件中的值，如果没有找到则会检查Grain，如果还没有，则会检查Pillar，如果还没有，则会搜索Master配置，如果全部没有，则会使用默认提供的值：</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">The user </span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">salt</span>[&#x27;config.get&#x27;](<span class="hljs-name">&#x27;user&#x27;</span>, <span class="hljs-string">&#x27;larry&#x27;</span>) &#125;&#125;</span><span class="language-xml"> is referred to here.</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">saltstack相关知识整理</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>ansible学习笔记</title>
    <link href="http://www.qintianjun.top/2021/07/08/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://www.qintianjun.top/2021/07/08/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2021-07-08T00:11:26.000Z</published>
    <updated>2023-02-24T08:03:52.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-安装和入门"><a href="#1-安装和入门" class="headerlink" title="1 安装和入门"></a>1 安装和入门</h1><h2 id="1-1-ansible安装"><a href="#1-1-ansible安装" class="headerlink" title="1.1 ansible安装"></a>1.1 ansible安装</h2><h3 id="1-1-1-rpm包安装"><a href="#1-1-1-rpm包安装" class="headerlink" title="1.1.1 rpm包安装"></a>1.1.1 rpm包安装</h3><p>EPEL源</p><p>yum -y install ansible</p><h3 id="1-1-2-编译安装1-1-3-Git方式"><a href="#1-1-2-编译安装1-1-3-Git方式" class="headerlink" title="1.1.2 编译安装1.1.3 Git方式"></a>1.1.2 编译安装1.1.3 Git方式</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">git clone git:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ansible/</span>ansible.git --recursive<br><br>cd ./ansible<br><br>source .<span class="hljs-regexp">/hacking/</span>env-setup<br></code></pre></td></tr></table></figure><h3 id="1-1-4-pip-安装"><a href="#1-1-4-pip-安装" class="headerlink" title="1.1.4 pip 安装"></a>1.1.4 pip 安装</h3><p>pip安装：pip是安装python包的管理器，类似于yum</p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">yum -y <span class="hljs-keyword">install </span>python-pip python-devel<br><br>yum -y <span class="hljs-keyword">install </span>gcc glib-devel zlibl-devel rpm-<span class="hljs-keyword">build </span>openssl-devel<br><br>pip <span class="hljs-keyword">install </span>--upgrade pip<br><br>pip <span class="hljs-keyword">install </span>ansible --upgrade<br></code></pre></td></tr></table></figure><p>确认安装：ansible –version</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ansible <span class="hljs-number">2.9</span>.<span class="hljs-number">15</span><br>  config file = <span class="hljs-regexp">/etc/</span>ansible/ansible.cfg<br>  configured module search path = [<span class="hljs-string">u&#x27;/root/.ansible/plugins/modules&#x27;</span>, <span class="hljs-string">u&#x27;/usr/share/ansible/plugins/modules&#x27;</span>]<br>  ansible python module location = <span class="hljs-regexp">/usr/</span>lib<span class="hljs-regexp">/python2.7/</span>site-packages/ansible<br>  executable location = <span class="hljs-regexp">/usr/</span>bin/ansible<br>  python version = <span class="hljs-number">2.7</span>.<span class="hljs-number">5</span> (default, Apr  <span class="hljs-number">2</span> <span class="hljs-number">2020</span>, <span class="hljs-number">13</span>:<span class="hljs-number">16</span>:<span class="hljs-number">51</span>) [GCC <span class="hljs-number">4.8</span>.<span class="hljs-number">5</span> <span class="hljs-number">20150623</span> (Red Hat <span class="hljs-number">4.8</span>.<span class="hljs-number">5</span>-<span class="hljs-number">39</span>)]<br></code></pre></td></tr></table></figure><h2 id="1-2-ansible-相关文件"><a href="#1-2-ansible-相关文件" class="headerlink" title="1.2 ansible 相关文件"></a>1.2 ansible 相关文件</h2><h3 id="1-2-1-配置文件"><a href="#1-2-1-配置文件" class="headerlink" title="1.2.1 配置文件"></a>1.2.1 配置文件</h3><p>&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg 主配置文件，配置ansible工作特性</p><p>&#x2F;etc&#x2F;ansible&#x2F;hosts 主机清单</p><p>&#x2F;etc&#x2F;ansible&#x2F;roles&#x2F; 存放角色的目录</p><h3 id="1-2-2-ansible主配置文件"><a href="#1-2-2-ansible主配置文件" class="headerlink" title="1.2.2 ansible主配置文件"></a>1.2.2 ansible主配置文件</h3><p>ansible 配置文件<code>/etc/ansible/ansible.cfg</code>(一般保持默认), 其中大部分的配置内容无需进行修改</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[defaults]<br><span class="hljs-meta prompt_">#</span><span class="language-bash">inventory      = /etc/ansible/hosts  <span class="hljs-comment">#主机列表配置文件</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">library        = /usr/share/my_modules/ <span class="hljs-comment">#库文件存放目录</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">module_utils   = /usr/share/my_module_utils/</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">remote_tmp     = ~/.ansible/tmp <span class="hljs-comment">#临时py命令文件存放在远程主机目录</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">local_tmp      = ~/.ansible/tmp <span class="hljs-comment">#本机临时命令执行目录</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">forks          = 5 <span class="hljs-comment">#默认并发数（同时执行5个操作，eg五台主机五台的执行）</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">poll_interval  = 15</span> <br><span class="hljs-meta prompt_">#</span><span class="language-bash">sudo_user      = root <span class="hljs-comment">#默认sudo用户</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ask_sudo_pass = True <span class="hljs-comment">#每次执行ansible命令是否询问ssh密码</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">ask_pass      = True</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">transport      = smart</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">remote_port    = 22</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">module_lang    = C</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">module_set_locale = False</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">host_key_checking = False <span class="hljs-comment">#检查对应服务的的host_key，建议取消注释</span></span><br></code></pre></td></tr></table></figure><h3 id="1-2-3-主机清单文件"><a href="#1-2-3-主机清单文件" class="headerlink" title="1.2.3 主机清单文件"></a>1.2.3 主机清单文件</h3><p>主机清单inventory</p><p>inventory主机清单：ansible的主要功用在于批量主机操作，为了方便的使用其中的部分主机，可以在inventory file中将其分组命名</p><p>默认的inventory file为<code>/etc/ansible/hosts</code></p><p>inventory file可以有多个，且也可以通过Dynamic Inventory来动态完成</p><p><code>/etc/ansible/hosts</code>文件格式</p><p>inventory文件遵循INI文件风格，中括号的字符为组名。可以将同一个主机同事归并到不通的组中；此外，当如若目标主机使用了非默认的ssh端口，还可以在主机名称之后使用冒号加端口号来标明</p><p>eg：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">ntp<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.com</span><br><br><span class="hljs-selector-attr">[webservers]</span><br><br>www1<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.com</span>:<span class="hljs-number">2222</span><br><br>www2<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.com</span><br><br><span class="hljs-selector-attr">[dbservers]</span><br><br>db1<span class="hljs-selector-class">.magedu</span><span class="hljs-selector-class">.com</span><br><br>db2<span class="hljs-selector-class">.magedu</span>.com<br></code></pre></td></tr></table></figure><p>如果主机名称遵相似的命名模式，还可以使用列表的方式标识个主机</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[wedservers]</span><br><br>www<span class="hljs-selector-attr">[01:100]</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.com</span><br><br><span class="hljs-selector-attr">[dbservers]</span><br><br>db-<span class="hljs-selector-attr">[a:f]</span><span class="hljs-selector-class">.example</span>.com<br></code></pre></td></tr></table></figure><h2 id="1-3-ansible-系列命令"><a href="#1-3-ansible-系列命令" class="headerlink" title="1.3 ansible 系列命令"></a>1.3 ansible 系列命令</h2><p><strong>ansible 系列命令</strong></p><p>ansible ansible-doc  ansible-playbook  ansible-vault  ansible-console  ansible-galaxy ansible-pull</p><p><strong>1、ansible-doc 显示模块帮助</strong></p><p>ansible-doc [options][module]</p><p>-a  显示所有模块文档</p><p>-l，–list 列出可用模块</p><p>-s，–snippet 显示指定模块的playbook片段</p><p>实例：</p><p>ansible-doc -l 列出所有模块</p><p>ansible-doc ping 查看指定模块的帮助用法</p><p>ansible-doc -s ping 查看指定模块的帮助用法</p><p>ansible通过ssh实现配置管理、应用部署，任务执行等功能，建议配置ansible段能基于密钥认证的方式联系各被管理节点</p><p><strong>2、ansible<host-pattern>[-m module_name] [-a args]</strong></p><p>–version 显示版本</p><p>-m module 指定模块，默认为command</p><p>-v 详细过程 -vv -vvv 更详细</p><p>–list-host 显示主机列表，可简写–list</p><p>-k ，–ask-pass 提示输入ssh连接密码。默认key验证</p><p>-K， –ask-become-pass  提示输入sudo时的口令</p><p>-C，–check 检查不执行</p><p>-T –timeout&#x3D;TIMEOUT 执行命令的超时时间，默认10s</p><p>-u –user&#x3D;REMOTE——USER 执行远程执行的用户</p><p>-b， –become 代替旧版本的sudo切换</p><p><strong>3、ansible的Host-pattern  匹配主机的列表</strong></p><p>all：表示所有Inventory中的所有主机</p><p>*：通配符</p><p>ansible “*” -m ping</p><p>ansible 192.168.1.* -m ping</p><p>ansible “*srvs” -m ping</p><p>或关系</p><p>ansible “webserver:dbserver” -m ping</p><p>ansible “webserver:dbserver” -m ping #执行在web组并且在dbserver组中的主机（忽略重复的）</p><p>与关系</p><p>ansible “webserver:&amp;dbserver” -m ping</p><p>只执行在web组并且也在dbserver组中的主机</p><p>逻辑非</p><p>ansible ‘webserver:!dbserver’ -m ping  <strong>【注意此处只能使用单引号！】</strong></p><p>综合逻辑</p><p>ansible ‘webserver:dbserver:&amp;webserver:!dbserver’ -m ping</p><p>正则表达式</p><p>ansible “webserver:&amp;dbserver” -m ping</p><p>ansible “~(web|db).*.magedu.\com” -m ping</p><p><strong>4、ansible命令执行过程</strong></p><p>a 加载自己的配置文件 默认&#x2F;etc&#x2F;ansible&#x2F;ansible.cfg</p><p>b 加载自己对应的模块 如command</p><p>c 通过ansible将模块或命令生成对应的临时py文件，并将改文件传输至远程服务器的对应执行用户SHOME&#x2F;.ansible&#x2F;tmp&#x2F;ansible-tmp-数字&#x2F;XXX.py文件</p><p>d 文件见+x执行</p><p>e 执行并返回结果</p><p>f 删除临时py文件，sleep 0退出</p><p><strong>5、执行状态</strong></p><p>绿色：执行成功并且不需要做改变的操作</p><p>黄色：执行成功并且对目标主机做变更</p><p>红色：执行失败</p><h1 id="2-ansible常用模块"><a href="#2-ansible常用模块" class="headerlink" title="2 ansible常用模块"></a>2 ansible常用模块</h1><h2 id="2-1-command"><a href="#2-1-command" class="headerlink" title="2.1 command"></a>2.1 command</h2><p>在远程主机执行命令，默认模块。可忽略-m选项</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><code class="hljs jboss-cli">ansible srvs -m <span class="hljs-keyword">command</span> -a ‘systemctl restart sshd’<br><br>ansible srvs -m <span class="hljs-keyword">command</span> -a &#x27;<span class="hljs-keyword">echo</span> magedu | passwd <span class="hljs-params">--stdin</span> wang &#x27;不成功<br></code></pre></td></tr></table></figure><blockquote><p> 此命令不支持$VRNAME&lt; &gt;  | ; &amp; 等，需要用shell模块实现</p></blockquote><h2 id="2-2-shell"><a href="#2-2-shell" class="headerlink" title="2.2 shell"></a>2.2 shell</h2><p>和command相似，用shell执行命令</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">ansible srv -m <span class="hljs-built_in">shell</span> -<span class="hljs-keyword">a</span> ‘echo magedu | passwd <span class="hljs-comment">--stdin wang’</span><br></code></pre></td></tr></table></figure><p>调用bash执行命令 类似<code>cat /tmp/stanley.md | awk -F &#39;|&#39; &#39;&#123;print $1,$2&#125;&#39; &amp; &gt; /tmp/example.txt</code>这些复杂命令，即使使用shell也可能会失败，</p><p>解决办法：写到脚本，copy到远程，执行，再把需要的结果拉回执行命令的机器</p><h2 id="2-3-script"><a href="#2-3-script" class="headerlink" title="2.3 script"></a>2.3 script</h2><p>在远程主机上运行脚本</p><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css">-<span class="hljs-selector-tag">a</span> “/PATH/<span class="hljs-selector-tag">TO</span>/SCRIPT_FILE”<br><br>ansible webserver -m script -<span class="hljs-selector-tag">a</span> f1<span class="hljs-selector-class">.sh</span><br></code></pre></td></tr></table></figure><h2 id="2-4-copy"><a href="#2-4-copy" class="headerlink" title="2.4 copy"></a>2.4 copy</h2><p>从服务器复制文件到客户端</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">ansible all -m <span class="hljs-keyword">copy</span><span class="language-bash"> -a <span class="hljs-string">&#x27;src=/data/test1 dest=/data/test1 backup=yes mode=000 owner=zhang&#x27;</span>  <span class="hljs-comment">#如目标存在，默认覆盖，此处是指先备份，并修改全向属主</span></span><br><br>ansible all -m <span class="hljs-keyword">copy</span><span class="language-bash"> -a <span class="hljs-string">&quot;content=&#x27;test content\n&#x27; dest=/tmo/f1.txt&quot;</span> <span class="hljs-comment">#利用内容，直接生成目标文件</span></span><br><br>ansible all -m <span class="hljs-keyword">copy</span><span class="language-bash"> -a <span class="hljs-string">&quot;src=/root/ops_scripts dest=/tmp/&quot;</span> <span class="hljs-comment"># 把一个目录里的所有内容拷贝到目标主机</span></span><br><br></code></pre></td></tr></table></figure><h2 id="2-5-fetch"><a href="#2-5-fetch" class="headerlink" title="2.5 fetch"></a>2.5 fetch</h2><p>从客户端取文件至服务器端，与copy相反，目录可以先tar，默认只支持取文件</p><p>ansible all -m fetch -a ‘src&#x3D;&#x2F;root&#x2F;a.sh dest&#x3D;&#x2F;data&#x2F;f2.sh’</p><h2 id="2-6-file"><a href="#2-6-file" class="headerlink" title="2.6 file"></a>2.6 file</h2><p>设置文件属性（状态，属组，属主，权限）</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible <span class="hljs-literal">all</span> -m file -a “path=/root/a.sh owner=zhang mode=<span class="hljs-number">755</span>”<br><br>ansible <span class="hljs-literal">all</span> -m file -a &#x27;src=/data/test1 dest=/tmp/test <span class="hljs-keyword">state</span>=link&#x27;<br><br>ansible <span class="hljs-literal">all</span> -m file -a ’name=/data/f3 <span class="hljs-keyword">state</span>=touch‘  <span class="hljs-comment">#创建文件</span><br><br>ansible <span class="hljs-literal">all</span> -m file -a ’name=/data/f3 <span class="hljs-keyword">state</span>=absent‘ <span class="hljs-comment">#删除文件</span><br><br>ansible <span class="hljs-literal">all</span> -m file -a ’name=/data <span class="hljs-keyword">state</span>=directory‘ <span class="hljs-comment">#创建目录</span><br><br>ansible <span class="hljs-literal">all</span> -m file -a ’src=/etc/fstab dest=/data/fstab.link <span class="hljs-keyword">state</span>=link‘<br></code></pre></td></tr></table></figure><h2 id="2-7-unarchive"><a href="#2-7-unarchive" class="headerlink" title="2.7 unarchive"></a>2.7 unarchive</h2><p>功能:解包解压缩</p><p>实现有两种用法:</p><ol><li><p>将ansible主机上的压缩包传到远程主机后解压缩至特定目录,设置copy-yes</p></li><li><p>将远程主机上的某个压缩包解压缩到指定路径下,设置copy&#x3D;no</p></li></ol><p>常见参数</p><ul><li>copy: 默认为yes,当copy&#x3D;yes,拷贝的文件是从ansible主机复制到远程主机上,如果设置为copy&#x3D;no,会在远程主机上寻找src源文件</li><li>remote_src:和copy功能一样且互斥, yes表示在远程主机,不在ansible主机, no表示文件在ansible主机上src:源路径,可以是ansible主机上的路径,也可以是远程主机上的路径,如果是远程主机上的路径,则需要设置copy&#x3D;no</li><li>dest:远程主机上的目标路径</li><li>mode:设置解压缩后的文件权限</li></ul><p>范例：</p><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis">ansible <span class="hljs-literal">all</span> -m un<span class="hljs-params">archive</span> -a <span class="hljs-string">&#x27;src=/data/foo.tgz dest=/var/1ib/foo&#x27;</span><br><br>ansible <span class="hljs-literal">all</span> -m un<span class="hljs-params">archive</span> -a <span class="hljs-string">&#x27;src=/tmp/foo.zip dest=/data copy=no mode=0777&#x27;</span><br><br>ansible <span class="hljs-literal">all</span> -m un<span class="hljs-params">archive</span> -a <span class="hljs-string">&#x27;src=https://example.com/example.zip dest=/data copy=no&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="2-8-Archive"><a href="#2-8-Archive" class="headerlink" title="2.8 Archive"></a>2.8 Archive</h2><p>功能：打包压缩</p><figure class="highlight stata"><table><tr><td class="code"><pre><code class="hljs stata">ansible all -<span class="hljs-keyword">m</span> archieve -a &#x27;path=/<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/ dest=/data/<span class="hljs-keyword">log</span>.tar.bz2 <span class="hljs-keyword">format</span>=bz2 owner=wang mode=0600&#x27;<br></code></pre></td></tr></table></figure><h2 id="2-9-hostname"><a href="#2-9-hostname" class="headerlink" title="2.9 hostname"></a>2.9 hostname</h2><p>管理主机名</p><figure class="highlight nginx"><table><tr><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ansible</span> <span class="hljs-number">192.168.10.24</span> -m hostname -a “name=kso-bj6-zw-zhangwei”<span class="hljs-comment">#永久生效（但hosts文件需要手动更改）</span><br></code></pre></td></tr></table></figure><h2 id="2-10-cron"><a href="#2-10-cron" class="headerlink" title="2.10 cron"></a>2.10 cron</h2><p>计划任务</p><p>支持时间：minute，hour，day，month，weekday</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible <span class="hljs-literal">all</span> -m cron -a <span class="hljs-string">&quot;minute=*/5 weekday=1,3,5 job=&#x27;/usr/sbin/ntpfata 172.16.0.1 &amp; &gt;/dev/null&#x27; name=Synctime&quot;</span> 创建任务<br>ansible <span class="hljs-literal">all</span> -m cron -a <span class="hljs-string">&quot;disabled=true job=&#x27;/usr/sbin/ntpfata 172.16.0.1 &amp; &gt;/dev/null&#x27; name=Synctime&quot;</span> 禁用任务（加<span class="hljs-comment">#号注释）</span><br><br>ansible <span class="hljs-literal">all</span> -m cron -a <span class="hljs-string">&quot;disabled=no  job=&#x27;/usr/sbin/ntpfata 172.16.0.1 &amp; &gt;/dev/null&#x27; name=Synctime&quot;</span> 启用任务<br><br>ansible <span class="hljs-literal">all</span> -m  cron -a &#x27;<span class="hljs-keyword">state</span>=absent name=Synctime&#x27; 删除任务<br></code></pre></td></tr></table></figure><h2 id="2-11-yum"><a href="#2-11-yum" class="headerlink" title="2.11 yum"></a>2.11 yum</h2><p>管理包(支持Red-Hat 系列)</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible <span class="hljs-literal">all</span> -m yum -a &#x27;name=httpd <span class="hljs-keyword">state</span>=latest&#x27;安装<br><br>ansible <span class="hljs-literal">all</span> -m yum -a &#x27;name=httpd <span class="hljs-keyword">state</span>=ansent&#x27; 卸载<br><br>ansible <span class="hljs-literal">all</span> -m yum  -a &#x27;name=dstat update_cache=yes&#x27; 更新缓存<br><br>【注：dstat--监控工具https://www.jianshu.com/p/<span class="hljs-number">49</span>b259cbcc79】<br></code></pre></td></tr></table></figure><h2 id="2-12-service"><a href="#2-12-service" class="headerlink" title="2.12 service"></a>2.12 service</h2><p>管理服务</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible <span class="hljs-literal">all</span> -m service -a &#x27;name=httpd <span class="hljs-keyword">state</span>=stopped&#x27;<br><br>ansible <span class="hljs-literal">all</span> -m service -a &#x27;name=httpd <span class="hljs-keyword">state</span>=started enabled=yes&#x27;<br><br>ansible <span class="hljs-literal">all</span> -m service -a &#x27;name=httpd <span class="hljs-keyword">state</span>=reload&#x27;<br><br>ansible <span class="hljs-literal">all</span> -m service -a &#x27;name=httpd <span class="hljs-keyword">state</span>=restart&#x27;<br></code></pre></td></tr></table></figure><h2 id="2-13-user"><a href="#2-13-user" class="headerlink" title="2.13 user"></a>2.13 user</h2><p>管理用户</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible <span class="hljs-literal">all</span> -m <span class="hljs-keyword">user</span> -a &#x27;name=user1 comment=<span class="hljs-string">&quot;test user&quot;</span> uid=<span class="hljs-number">2048</span> home=/data/home/user1 <span class="hljs-keyword">group</span>=root&#x27;  创建用户，以及uid，家目录，并描述（comment）<br><br>ansible <span class="hljs-literal">all</span> -m <span class="hljs-keyword">user</span> -a &#x27;name=zhangwei shell=/sbin/nologin  system=yes home=/data/home/zhangwei&#x27;    创建不可登陆的系统用户<br><br>ansible <span class="hljs-literal">all</span> -m <span class="hljs-keyword">user</span> -a &#x27;name=zhangwei <span class="hljs-keyword">state</span>=absent remove=yes&#x27;删除用户及家目录(remove表示是否删除家目录)<br></code></pre></td></tr></table></figure><h2 id="2-14-group"><a href="#2-14-group" class="headerlink" title="2.14 group"></a>2.14 group</h2><p>管理组</p><figure class="highlight crmsh"><table><tr><td class="code"><pre><code class="hljs crmsh">ansible all -m <span class="hljs-keyword">group</span> <span class="hljs-title">-a</span> <span class="hljs-string">&quot;name=testgroup system=yes&quot;</span><br><br>ansible all -m <span class="hljs-keyword">group</span> <span class="hljs-title">-a</span> <span class="hljs-string">&quot;name=testgroup state=absent&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-15-lineinfile"><a href="#2-15-lineinfile" class="headerlink" title="2.15 lineinfile"></a>2.15 lineinfile</h2><p>文件内容替换 </p><p>ansible在使用sed进行替换时,经常会遇到需要转义的问题,而且ansible在遇到特殊符号进行替换时,存在问题,无法正常进行替换。其实在ansible自身提供了两个模块: lineinfile模块和replace模块,可以方便的进行替换 功能:相当于sed,可以修改文件内容</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">ansible all-m lineinfile -a <span class="hljs-string">&quot;path=/etc/selinux/config regexp=&#x27;ASELINUX=line=&#x27; SELINUX=enforcing.&quot;</span><br>ansible al1-m lineinfile -a &#x27;dest=/etc/fstab <span class="hljs-keyword">state</span>=absent regexp=<span class="hljs-string">&quot;^#&quot;</span>.<br></code></pre></td></tr></table></figure><h2 id="2-16-replace"><a href="#2-16-replace" class="headerlink" title="2.16 replace"></a>2.16 replace</h2><p>类似于se d命令，主要也是基于正则进行匹配和替换</p><figure class="highlight arcade"><table><tr><td class="code"><pre><code class="hljs arcade">ansible <span class="hljs-built_in">all</span> -m <span class="hljs-built_in">replace</span> -a <span class="hljs-string">&quot;path=/etc/fstab regexp=&#x27;^(UUID.*)&#x27; replace=&#x27;#\1&#x27;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-17-setup"><a href="#2-17-setup" class="headerlink" title="2.17 setup"></a>2.17 setup</h2><p>用来收集主机的系统信息，这些facts信息可以直接以变量的形式使用，但是如果主机较多，会影响执行速度，可以使用<code>gather_facts: no</code> 来禁止ansible收集facts信息</p><figure class="highlight ada"><table><tr><td class="code"><pre><code class="hljs ada">ansible <span class="hljs-keyword">all</span> -m setup 查看所有信息<br>ansible <span class="hljs-keyword">all</span> -m setup -a <span class="hljs-string">&quot;filter=ansible_processor&quot;</span> 查看指定信息<br></code></pre></td></tr></table></figure><h1 id="3-playbook"><a href="#3-playbook" class="headerlink" title="3 playbook"></a>3 playbook</h1><h2 id="3-1-介绍"><a href="#3-1-介绍" class="headerlink" title="3.1 介绍"></a>3.1 介绍</h2><h3 id="playbook"><a href="#playbook" class="headerlink" title="playbook"></a>playbook</h3><p><img src="/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20210219183051942.png" alt="image-20210219183051942"></p><p>playbook是由一个或者多个“play”组成的列表</p><p>play的主要功能在于将事先归并为一组的主机装扮成事先通过ansible中的task定义好的角色。从根本上来讲，所谓task无非是调用ansible的一个module。将多个play组织在一个playbook中，即可以让他们联同起来按照事先编排的机制同唱一台大戏。</p><p>palybook采用YAML语言编写</p><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>YAML是一个可读性高用来表达资料序列的格式。YAML参考了其他多种语言，包括：XML、C语言、Python、Perl以及电子邮件格式RFC2822等。Clark Evans在2001年在首次发表了这种语言，另外Ingy dot Net与Oren Ben-Kiki也是这种语言的共同设计者。</p><p>YAML Ain’t Markup Language，即TAML不是XML。不过，在开发这种语言时，YAML的意思其实是：Yet Another Markup Language（仍是一种标记语言）</p><p>特性</p><ul><li>YAML的可读性好</li><li>YAML和脚本语言的交互性好</li><li>YAML使用实现语言的数据类型</li><li>YAML有一个一致的信息模型</li><li>YAML易于实现</li><li>YAML可以基于流来处理</li><li>YAML表达能力强，扩展性好</li></ul><p>更多内容及规范参见<a href="http://www.yaml.org/">http://www.yaml.org</a></p><h3 id="yaml-语法简介"><a href="#yaml-语法简介" class="headerlink" title="yaml 语法简介"></a>yaml 语法简介</h3><ol><li><p>注意</p><p>在单一档案中，可以连续三个连字号（—）区分多个档案。另外，还有选择性的连续三个点号（…）用来表示档案结尾</p><p>次行动开始正常些playbook的内容，一般建议些明该playbook的功能</p><p>使用#号注释代码</p><p>缩进必须是统一的，不能空格和tab混用</p><p>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判断配置的级别是通过缩进结合换行来实现的</p><p>YAML文件内容和linux系统大小写判断方式保持一致，是区别大小写的，k&#x2F;v的值均需大小写敏感</p><p>k&#x2F;v的值可同行写也可换行写。同行的话，使用：号分割</p><p>v可是一个字符串，也可是另一个列表</p><p>一个完成的代码块功能需最少元素包括 name:    task</p><p>一个name只能包括一个task</p><p>YAML文件扩展名通常为yml或者yaml</p></li><li><p>list：列表，其所有元素均使用“-”打头</p><p>示例：</p><p># Alist of tasty fruits</p><p>- Apple</p><p>- Orange</p><p>- Strawberry</p><p>- Mango</p></li><li><p>Dictionary：字典，通常由说个key与value构成</p><p>示例：</p><p>-–</p><p># An employee record</p><p>name:Example Developer</p><p> job:Developer</p><p>skill:Elite</p><p>也可将key:value放置于{}中进行表示，用“，”分隔多个key:value</p><p>示例：</p><p>-–</p><p># An employee record</p><p>{name:Example Developer,job:Developer,skill:Elite}</p><p>YAML的语法和其他高阶语言类似，并且可以简单表达清单，散列表、标量等数据结构。其机构（Structure）通过空格来展示，序列（Sequence）里的项目“-”来代表，Map李的键值对用“：”分割。</p></li></ol><h2 id="3-2-playbook核心元素"><a href="#3-2-playbook核心元素" class="headerlink" title="3.2 playbook核心元素"></a>3.2 playbook核心元素</h2><ul><li>hosts  执行的远程主机列表</li><li>tasks  任务集</li><li>varniables  内置变量或自定义变量在playbook中调用</li><li>templates  模板，可替换模板文件中的变量并实现一些简单逻辑文件</li><li>hanslers 和notity结合使用，有特定条件出发操作，满足条件方可执行，否则不执行</li><li>tags  标签 指定某条任务执行，用于选择运行playbook中部分代码。ansible具有幂等性，因此会自动化跳过没有变化的部分，即便如此，有些代码为此时其确实没有发生变化的时间依然会非常的长。此时，确信其没有变化，就可以通过tags跳过此些代码片段。</li></ul><h2 id="3-3-playbook基础组件"><a href="#3-3-playbook基础组件" class="headerlink" title="3.3 playbook基础组件"></a>3.3 playbook基础组件</h2><h3 id="hosts"><a href="#hosts" class="headerlink" title="hosts"></a>hosts</h3><p>playbook中的每一个play的目的都是为了让某个或某些主机以某个指定的用户身份执行任务。hosts用于指定要执行指定任务的主机，须事先定义在主机清单中</p><p>可以是如下形式：</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog">one.example.com<br><br>one.example.com:two.example.com<br><br><span class="hljs-number">192.168.1.50</span><br><br><span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.*<br><br>webserver:dbserver 两个组的并集<br><br>webserver:&amp;dbserver 两个组的交集<br><br>webserver:!dbserver 在webserver组中  但不在dbserver组中<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-bullet">- </span>hosts：webserver:sbserver<br></code></pre></td></tr></table></figure><h3 id="remote-user"><a href="#remote-user" class="headerlink" title="remote_user"></a>remote_user</h3><p>可用于Host和task中。也可以通过制定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外；甚至可以在sudo时使用sudo_user: root时切换到用户。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">test</span> <span class="hljs-string">connection</span><br>      <span class="hljs-string">ping</span><br>      <span class="hljs-attr">remote_user:</span> <span class="hljs-string">zhangwei</span><br>      <span class="hljs-attr">sudo:</span> <span class="hljs-literal">yes</span>   <span class="hljs-comment">#默认sudo为root</span><br>      <span class="hljs-attr">sudo_user:</span> <span class="hljs-string">wang</span>   <span class="hljs-comment">#sudo为wang</span><br></code></pre></td></tr></table></figure><h3 id="tasks"><a href="#tasks" class="headerlink" title="tasks"></a>tasks</h3><p>任务列表</p><p>格式：（1）action: module arguments </p><pre><code>          (2) module: arguments 【建议使用】          注意：shell和command模块后面跟命令，而非key=value</code></pre><p>某任务的状态在运行后为change时，可通过‘notify’通知给相应的handlers</p><p>某任务可以通过‘tags’打标签，而后可在ansible-playbook命令上使用-t指定进行调用</p><p>示例：</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">tasks：<br>  - name: <span class="hljs-built_in">disable</span> selinux<br>    <span class="hljs-built_in">command</span>: /sbin/setenforce 0<br><br><br></code></pre></td></tr></table></figure><p>如果命令或脚本的退出码不为零，可以使用如下方式替代</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">tasks:<br>  - name: run <span class="hljs-keyword">this</span> conamnd and ignore the result<br>    shell : <span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/sommecommand || /</span>bin/<span class="hljs-keyword">true</span><br><br></code></pre></td></tr></table></figure><p>或者使用ignore_errors来忽略错误信息：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tasks:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">run</span> <span class="hljs-string">this</span> <span class="hljs-string">conamnd</span> <span class="hljs-string">and</span> <span class="hljs-string">ignore</span> <span class="hljs-string">the</span> <span class="hljs-string">result</span><br>    <span class="hljs-attr">shell :</span> <span class="hljs-string">/usr/bin/sommecommand</span><br>    <span class="hljs-attr">ignore_errors:</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>运行playbook方式</p><p>ansible-playbook &lt;filename.yml&gt;  … [options]</p><p>常见选项</p><p>–check (-C)只检测可能会发生的改变，但不真正执行操作</p><p>–list-hosts 列出运行任务的主机</p><p>–limit 主机列表 只针对主机列表中的主机执行</p><p>-v 显示过程 -vv -vvv更详细</p><p>示例：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">ansible-playbook <span class="hljs-built_in">file</span>.yml <span class="hljs-comment">--check 只检测</span><br><br>ansible-playbook <span class="hljs-built_in">file</span>.yml<br><br>ansible-playbook <span class="hljs-built_in">file</span>.yml <span class="hljs-comment">--limit webserver</span><br><br>ansible-playbook <span class="hljs-built_in">file</span>.yml <span class="hljs-comment">--list-hosts  # 查看主机</span><br><br>ansible-playbook <span class="hljs-built_in">file</span>.yml <span class="hljs-comment">--list-tasks  #查看任务列表</span><br><br>ansible-playbook <span class="hljs-built_in">file</span>.yml <span class="hljs-comment">--list-tags  # 查看标签</span><br></code></pre></td></tr></table></figure><h2 id="3-4-playbook中的handler和notify"><a href="#3-4-playbook中的handler和notify" class="headerlink" title="3.4 playbook中的handler和notify"></a>3.4 playbook中的handler和notify</h2><ul><li><p>handlers</p><p>是tasks列表，这些task与前述的task并没有本质上的不同，用于当关注的资源发生变化时，才会采取一定的操作</p></li><li><p>notify</p><p>此action可用于在每个play的最后被触发，这样可以避免多次有改变发生时，每次都执行指定的操作，仅在所有的变化发生完后一次性执行指定的操作。在notify中列出的操作称为handler，也即notify中调用handler中定义的操作</p></li></ul><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">httpd</span> <span class="hljs-string">package</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=present</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">configuration</span> <span class="hljs-string">file</span> <span class="hljs-string">for</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-attr">copy:</span> <span class="hljs-string">src=/root/conf/httpd.conf</span> <span class="hljs-string">dest=/etc/httpd/conf/httpd.conf</span><br>      <span class="hljs-attr">notify:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">restart</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-string">Check</span> <span class="hljs-string">Nginx</span> <span class="hljs-string">Process</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">httpd</span> <span class="hljs-string">service</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">enabled=true</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=started</span><br>  <span class="hljs-attr">handlers:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">restart</span> <span class="hljs-string">httpd</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">name=httpd</span> <span class="hljs-string">state=restarted</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Check</span> <span class="hljs-string">Nginx</span> <span class="hljs-string">process</span><br>      <span class="hljs-attr">shell:</span> <span class="hljs-string">killall</span> <span class="hljs-string">-O</span> <span class="hljs-string">nginx</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">/tmp/nginx.log</span><br></code></pre></td></tr></table></figure><h2 id="3-5-playbook中tags的使用"><a href="#3-5-playbook中tags的使用" class="headerlink" title="3.5 playbook中tags的使用"></a>3.5 playbook中tags的使用</h2><p><img src="/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20210220172828318.png" alt="image-20210220172828318"></p><p>ansible-playbook -t conf httpd.yml    <strong>【使用-t 指定标签名字】</strong></p><p>ansible-playbook -t conf,service httpd.yml</p><p>ansible-playbook  httpd.yml –list-tsgs  #查看标签列表</p><p>注意：tags标签命名可以相同，不通模块下写入相同tags标签，执行时，打入标签的模块会同时执行</p><h2 id="3-6-playbook中变量的使用"><a href="#3-6-playbook中变量的使用" class="headerlink" title="3.6 playbook中变量的使用"></a>3.6 playbook中变量的使用</h2><ul><li><p>变量名：仅能由字母、数字和下划线组成，且只能以字母开头</p></li><li><p>变量来源：</p><ul><li><p>ansible setup facts 远程主机的所有变量都可以直接调用</p><figure class="highlight nsis"><table><tr><td class="code"><pre><code class="hljs nsis">ansible <span class="hljs-literal">all</span> -m setup <span class="hljs-comment">#查看远程主机的所有变量</span><br>ansible <span class="hljs-literal">all</span> -m setup -a <span class="hljs-string">&#x27;filter=ansible_hostname&#x27;</span><span class="hljs-comment">#过滤主机中的变量</span><br>ansible <span class="hljs-literal">all</span> -m setup -a <span class="hljs-string">&#x27;filter=ansible_hostname&#x27;</span> <span class="hljs-comment">##过滤主机的主机全名 </span><br></code></pre></td></tr></table></figure><p>这里查找到的变量可以直接在playbook中调用</p></li><li><p>在&#x2F;etc&#x2F;ansible&#x2F;hosts中定义</p><p>普通变量：主机组中主机单独定义，优先级高与公共变量</p><p>公共组变量：针对主机组中所有主机定义统一变量</p><figure class="highlight accesslog"><table><tr><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[websrvs]</span><br><span class="hljs-number">10.0.0.8</span> hostname=node1<br><span class="hljs-number">10.0.0.7</span> hostname=node2<br><br><span class="hljs-string">[websrvs:vars]</span><br>domain=mageedu.org<br></code></pre></td></tr></table></figure><blockquote><p>注：主机变量的优先级高于公共变量</p></blockquote></li><li><p>通过命令行指定变量，优先级最高</p><p><code>ansible-playbook -e varname=value</code></p><p>例子：</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">pkname</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">pkname</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">start</span> <span class="hljs-string">serivece</span><br>      <span class="hljs-attr">service:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">pkname</span> <span class="hljs-string">&#125;&#125;</span> <span class="hljs-string">state=started</span> <span class="hljs-string">enabled=yes</span><br></code></pre></td></tr></table></figure><p>在命令行中调用：</p><figure class="highlight sml"><table><tr><td class="code"><pre><code class="hljs sml">ansible-playbook -e <span class="hljs-symbol">&#x27;pkname</span>=httpd&#x27;   test.yml<br></code></pre></td></tr></table></figure></li><li><p>在playbook中定义</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pkname1:</span> <span class="hljs-string">httpd</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">pkname2:</span> <span class="hljs-string">telnet</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">pkname1</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">pkname1</span> <span class="hljs-string">&#125;&#125;</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">pkname2</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=&#123;&#123;</span> <span class="hljs-string">pkname2</span> <span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>在role中定义</p></li><li><p>使用变量文件</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Play</span> <span class="hljs-string">the</span> <span class="hljs-string">template</span> <span class="hljs-string">module</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">env:</span> <span class="hljs-string">&quot;development&quot;</span><br>  <span class="hljs-attr">vars_files:</span>  <span class="hljs-comment"># 变量定义在相对路径的文件中</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vars/test.yml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vars/development.yml</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">vars/production.yml</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">generation</span> <span class="hljs-string">the</span> <span class="hljs-string">hello_world.txt</span> <span class="hljs-string">file</span><br>      <span class="hljs-attr">template:</span><br>        <span class="hljs-attr">src:</span> <span class="hljs-string">./files/hello_world.txt.j2</span><br>        <span class="hljs-attr">dest:</span> <span class="hljs-string">/tmp/hello_world2.txt</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-7-模板templates"><a href="#3-7-模板templates" class="headerlink" title="3.7 模板templates"></a>3.7 模板templates</h2><ul><li>文本文件，嵌套有脚本（使用模板编程语言编写）</li><li>jinja2语言，使用字面量，有下面形式:</li><li>字符串：使用单引号或者双引号</li><li>数字：整数，浮点数</li><li>列表：[item1，itme2,…]</li><li>元组：（item1，itme2,…）</li><li>字典：{key1:value1,key2:value2,…}</li><li>布尔型：true&#x2F;false</li><li>算术运算：+，-，<em>，&#x2F;，&#x2F;&#x2F;，%，</em>*</li><li>比较操作：&#x3D;&#x3D;,！&#x3D;,&gt;,&gt;&#x3D;,&lt;,&lt;&#x3D;</li><li>逻辑运算：and,or,not</li><li>流表达式：For If When（循环语句）</li></ul><p>小记：在模板目录template下写入模板文件，文件中可以直接调用setup变量（src可以直接书写模板目录下的文件）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 修改文件nginx.conf.j2</span><br><span class="hljs-string">mkdir</span> <span class="hljs-string">templates</span><br><span class="hljs-string">vim</span> <span class="hljs-string">templates/nginx.conf.j2</span><br><span class="hljs-string">worker_processes</span> &#123;&#123; <span class="hljs-string">ansible_processor_vcpus</span> &#125;&#125;<br><br><span class="hljs-string">vim</span> <span class="hljs-string">temnginx2.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">websrvs</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">tasks:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">template</span> <span class="hljs-string">config</span> <span class="hljs-string">to</span><br></code></pre></td></tr></table></figure><h3 id="3-7-1-for和if"><a href="#3-7-1-for和if" class="headerlink" title="3.7.1 for和if"></a>3.7.1 for和if</h3><p>template中也可以使用流程控制for循环和if条件判断，实现动态生成文件功能</p><p><strong>for条件判断</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># tplnginx.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">websrvs</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">nginx_vhosts:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">listen:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">tasks:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">config</span> <span class="hljs-string">file</span><br>      <span class="hljs-attr">template:</span> <span class="hljs-string">src=nginx.conf.j2</span> <span class="hljs-string">dest=/data/nginx.conf</span><br><br><span class="hljs-comment"># nginx.conf.j2</span><br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">for</span> <span class="hljs-string">host</span> <span class="hljs-string">in</span> <span class="hljs-string">nginx_vhosts</span> <span class="hljs-string">%</span>&#125;<br><span class="hljs-string">server</span> &#123;<br>  <span class="hljs-string">listen</span> &#123;&#123; <span class="hljs-string">vhost.listen</span> &#125;&#125;<br>&#125;<br>&#123;<span class="hljs-string">%</span> <span class="hljs-string">endfor</span> <span class="hljs-string">%</span>&#125;<br><br><span class="hljs-comment"># 生成的结果</span><br><span class="hljs-string">server</span> &#123;<br>  <span class="hljs-string">listen</span> <span class="hljs-number">8080</span><span class="hljs-string">;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>if条件判断</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">web</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">vars:</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">web1:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">81</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">web1.magedu.com</span><br>        <span class="hljs-attr">rootdir:</span> <span class="hljs-string">/data/website1</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">web2:</span><br>        <span class="hljs-attr">port:</span> <span class="hljs-number">82</span><br>        <span class="hljs-comment">#name: web2.magedu.com</span><br>        <span class="hljs-attr">rootdir:</span> <span class="hljs-string">/data/website2</span><br><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">copy</span> <span class="hljs-string">conf</span><br>      <span class="hljs-attr">template:</span> <span class="hljs-string">src=if.conf.j2</span> <span class="hljs-string">dest=/data/if.conf</span><br></code></pre></td></tr></table></figure><p>模版文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs jinja2">&#123;% for p in ports %&#125;<br>server&#123;<br>        listen &#123;&#123; p.port &#125;&#125;<br>&#123;% if p.name is defined %&#125; #如果p.name被定义就执行下面的servername，否则不执行<br>        servername &#123;&#123; p.name &#125;&#125;<br>&#123;% endif %&#125;<br>        documentroot &#123;&#123; p.rootdir &#125;&#125;<br>&#125;<br>&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-2-when语句"><a href="#3-7-2-when语句" class="headerlink" title="3.7.2 when语句"></a>3.7.2 when语句</h2><p>条件测试： 如果需要根据变量，facts或此前任务的执行结果来作为某task执行与否的前提时需要用到条件测试，通过w hen语句实现，在task中使用，jinja2的语法格式</p><p>在task后添加when子句即可使用条件测试，when语句支持jinja2表达式语法</p><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">set</span> <span class="hljs-string">vim</span> <span class="hljs-string">package</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">all</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">apt</span> <span class="hljs-string">packages</span><br>      <span class="hljs-attr">apt:</span> <span class="hljs-string">name=vim</span> <span class="hljs-string">state=present</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">ansible_pkg_mgr</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;apt&quot;</span> <span class="hljs-comment"># 如果是Debian系统使用apt安装</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">yum</span> <span class="hljs-string">packages</span><br>      <span class="hljs-attr">yum:</span> <span class="hljs-string">name=vim-minimal</span> <span class="hljs-string">state=present</span><br>      <span class="hljs-attr">when:</span> <span class="hljs-string">ansible_pkg_mgr</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;yum&quot;</span>  <span class="hljs-comment"># 如果是RedHat系列系统使用yum安装</span><br></code></pre></td></tr></table></figure><h1 id="4-roles"><a href="#4-roles" class="headerlink" title="4 roles"></a>4 roles</h1><p>roles（角色）是ansible自1.2版本引入的新特性，用于层次性，结构化地组织playbook。roles能够根据层次结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量、文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一种机制。角色一般用于主机构建服务的场景中，但也可以使用于构建守护进程等场景中</p><p>复杂场景：建议使用roles，代码复用度高</p><ul><li>变更指定主机或主机组</li><li>如命令不规范，维护和传承成本大</li><li>某些功能需要多个playbook，通过includes可以实现</li></ul><h2 id="4-1-roles目录编排"><a href="#4-1-roles目录编排" class="headerlink" title="4.1 roles目录编排"></a>4.1 roles目录编排</h2><p><img src="/ansible%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.assets/image-20210222200644300.png" alt="image-20210222200644300"></p><p><strong>roles目录结构</strong></p><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">playbook.yml<br>  roles<br>  <span class="hljs-keyword">project</span>/<br>  tasks/<br>  files/<br>  vars/  不常用<br>  defaults/  不常用<br>  templates/<br>  handlers/<br>  meta/  不常用<br></code></pre></td></tr></table></figure><p><strong>roles各目录的作用</strong></p><ul><li>&#x2F;roles&#x2F;project&#x2F;:项目名称，有以下目录</li><li>files&#x2F;：存放由copy模块或scripts模块等调用的文件</li><li>template&#x2F;：template模块查找所需要模板文件的目录</li><li>tasks&#x2F;：定义tasks，roles的基本元素，至少应该包含一个名为main.yml的文件；其他的文件需要在此文件中通过include进行调用</li><li>handlers&#x2F;：至少应该包含一个名为main.yml的文件；其他的文件需要在此文件中通过include进行调用</li><li>vars&#x2F;：定义变量，至少应该包含一个名为main.yml的文件；其他的文件需要在此文件中通过include进行调用</li><li>meta&#x2F;：定义当前角色的特殊设定及其依赖关系，至少应该包含一个名为main.yml的文件；其他的文件需要在此文件中通过include进行调用</li><li>default&#x2F;：设定默认变量时使用此目录中的main.yml文件</li></ul><h2 id="4-2-实战案例"><a href="#4-2-实战案例" class="headerlink" title="4.2 实战案例"></a>4.2 实战案例</h2><h3 id="实验-创建httpd角色"><a href="#实验-创建httpd角色" class="headerlink" title="实验: 创建httpd角色"></a>实验: 创建httpd角色</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-meta prompt_">1&gt; </span>创建roles目录<br>   mkdir roles/&#123;httpd,mysql,redis&#125;/tasks -pv<br>   mkdir  roles/httpd/&#123;handlers,files&#125;<br><br>查看目录结构<br>tree roles/<br>    roles/<br>    ├── httpd<br>    │   ├── files<br>    │   ├── handlers<br>    │   └── tasks<br>    ├── mysql<br>    │   └── tasks<br>    └── redis<br>        └── tasks<br><br><span class="hljs-meta prompt_">2&gt; </span>创建目标文件<br>   cd roles/httpd/tasks/<br>   touch install.yml config.yml service.yml<br><br><span class="hljs-meta prompt_">3&gt; </span>vim install.yml<br>   - name: install httpd package<br>     yum: name=httpd<br>     <br>   vim config.yml<br>   - name: config file  <br>     copy: src=httpd.conf dest=/etc/httpd/conf/ backup=yes <br>   <br>   vim service.yml<br>   - name: start service <br>     service: name=httpd state=started enabled=yes<br>     <br><span class="hljs-meta prompt_">4&gt; </span>创建main.yml主控文件,调用以上单独的yml文件,<br>   main.yml定义了谁先执行谁后执行的顺序<br>   vim main.yml<br>   - include: install.yml<br>   - include: config.yml<br>   - include: service.yml<br>   <br><span class="hljs-meta prompt_">5&gt; </span>准备httpd.conf文件,放到httpd单独的文件目录下<br>   cp /app/ansible/flies/httpd.conf ../files/<br>   <br><span class="hljs-meta prompt_">6&gt; </span>创建一个网页<br>   vim flies/index.html<br>   &lt;h1&gt; welcome to weixiaodong home &lt;\h1&gt;<br><br><span class="hljs-meta prompt_">7&gt; </span>创建网页的yml文件<br>   vim tasks/index.yml<br>   - name: index.html<br>     copy: src=index.html dest=/var/www/html <br><br><span class="hljs-meta prompt_">8&gt; </span>将网页的yml文件写进main.yml文件中<br>   vim mian.yml<br>   - include: install.yml<br>   - include: config.yml<br>   - include: index.yml<br>   - include: service.yml<br><br><span class="hljs-meta prompt_">9&gt; </span>在handlers目录下创建handler文件main.yml<br>   vim handlers/main.yml<br>   - name: restart service httpd<br>     service: name=httpd state=restarted<br><br><span class="hljs-meta prompt_">10&gt; </span>创建文件调用httpd角色<br>    cd /app/ansidle/roles<br>    vim role_httpd.yml<br>    ---<br>    # httpd role<br>    - hosts: appsrvs<br>      remote_user: root <br><br>      roles:       #调用角色<br>        - role: httpd  <br>        <br><span class="hljs-meta prompt_">11&gt; </span>查看目录结构<br>    tree <br>    .<br>    httpd<br>    ├── files<br>    │   ├── httpd.conf<br>    │   └── index.html<br>    ├── handlers<br>    │   └── main.yml<br>    └── tasks<br>        ├── config.yml<br>        ├── index.yml<br>        ├── install.yml<br>        ├── main.yml<br>        └── service.yml<br><br><span class="hljs-meta prompt_">12&gt; </span>ansible-playbook role_httpd.yml<br></code></pre></td></tr></table></figure><h3 id="针对大型项目使用Roles进行编排"><a href="#针对大型项目使用Roles进行编排" class="headerlink" title="针对大型项目使用Roles进行编排"></a>针对大型项目使用Roles进行编排</h3><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">roles目录结构：<br>playbook.yml<br>roles/<br>  <span class="hljs-keyword">project</span>/<br>    tasks/<br>    files/<br>    vars/<br>    templates/<br>    handlers/<br>    default/ <span class="hljs-comment"># 不经常用</span><br>    meta/    <span class="hljs-comment"># 不经常用</span><br><br>示例：<br>nginx-role.yml<br>roles/<br>└── nginx<br>    ├── files<br>    │ └── main.yml<br>    ├── tasks<br>    │ ├── groupadd.yml<br>    │ ├── <span class="hljs-keyword">install</span>.yml<br>    │ ├── main.yml<br>    │ ├── restart.yml<br>    │ └── useradd.yml<br>    └── vars<br>        └── main.yml<br></code></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">roles的示例如下所示：<br>site<span class="hljs-selector-class">.yml</span><br>webservers<span class="hljs-selector-class">.yml</span><br>dbservers<span class="hljs-selector-class">.yml</span><br>roles/<br>  common/<br>    files/<br>    templates/<br>    tasks/<br>    handlers/<br>    vars/<br>    meta/<br>  webservers/<br>    files/<br>    templates/<br>    tasks/<br>  handlers/<br>    vars/<br>    meta/<br></code></pre></td></tr></table></figure><h3 id="实验：-创建一个nginx角色"><a href="#实验：-创建一个nginx角色" class="headerlink" title="实验： 创建一个nginx角色"></a>实验： 创建一个nginx角色</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><code class="hljs erlang-repl">建立nginx角色在多台主机上来部署nginx需要安装 创建账号<br><span class="hljs-meta prompt_">1&gt; </span>创建nginx角色目录<br>     cd /app/ansible/role<br>     mkdir nginx&#123;tesks,templates,hanslers&#125; -pv<br><br><span class="hljs-meta prompt_">2&gt; </span>创建任务目录<br>     cd tasks/<br>     touch insatll.yml config.yml service.yml file.yml user.yml<br>   创建main.yml文件定义任务执行顺序<br>     vim main.yml<br>     - include: user.yml<br>     - include: insatll.yml<br>     - include: config.yml<br>     - include: file.yml<br>     - include: service.yml<br><br>  <br><span class="hljs-meta prompt_">3&gt; </span>准备配置文件(centos7、<span class="hljs-number">8</span>)<br>   ll /app/ansible/role/nginx/templates/<br>   nginx7.conf.j2<br>   nginx8.conf.j2<br><br><br><span class="hljs-meta prompt_">4&gt; </span>定义任务<br>   vim tasks/install.yml<br>   - name: install<br>     yum: name=nginx<br>     <br>   vim tasks/config.yml<br>    - name: config file<br>      template: src=nginx7.conf.j2 dest=/etc/nginx/nginx.conf<br>      when: ansible_distribution_major_version==<span class="hljs-string">&quot;7&quot;</span><br>      notify: restrat<br>      <br>    - name: config file<br>      template: src=nginx8.conf.j2 dest=/etc/nginx/nginx.conf<br>      when: ansible_distribution_major_version==<span class="hljs-string">&quot;8&quot;</span><br>      notify: restrat<br>      <br>    vim tasks/file.yml   跨角色调用file.yum文件,实现文件复用<br>    - name: index.html<br>      copy: src=roles/httpd/files/index.html dest=/usr/share/nginx/html/ <br>   <br>    vim tasks/service.yml<br>    - nmae: start service<br>      service: name=nginx state=started enabled=yes<br>      <br>    vim handlers/main.yml<br>    - name: restrat<br>      service: name=nginx state=restarted<br>      <br>    vim roles/role_nginix.yml<br>    --- <br>    #test rcle<br>    - hosts: appsrvs<br>    <br>      roles: <br>        - role: nginx<br>        <br><span class="hljs-meta prompt_">5&gt; </span>测试安装<br>   ansible-playbook role_nginx.yml<br></code></pre></td></tr></table></figure><h3 id="Roles案例"><a href="#Roles案例" class="headerlink" title="Roles案例"></a>Roles案例</h3><p>Roles目录编排<br><img src="https://note.youdao.com/yws/res/56284/31BB6620C07C4E8DAEC14CB20CF8C573" alt="image"></p><p>Playbook中调用<br><img src="https://note.youdao.com/yws/res/56283/B2206BA3F50D46ACBCC941F778A2C845" alt="image"></p><h3 id="playbook调用角色"><a href="#playbook调用角色" class="headerlink" title="playbook调用角色"></a>playbook调用角色</h3><figure class="highlight nestedtext"><table><tr><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">调用角色方法1：</span><br><span class="hljs-attribute">- hosts</span><span class="hljs-punctuation">:</span> <span class="hljs-string">websrvs</span><br>  <span class="hljs-attribute">remote_user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">root</span><br>  <br>  <span class="hljs-attribute">roles</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">memcached</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">nginx</span><br>    <br><span class="hljs-attribute">调用角色方法2：</span><br><span class="hljs-attribute">传递变量给角色</span><br><span class="hljs-attribute">- hosts</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">remote_user</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">roles</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">&#123; role: nginx, username: nginx &#125;   #不同的角色调用不同的变量  </span><br>    <span class="hljs-attribute">键role用于指定角色名称</span><br><span class="hljs-attribute">    后续的k/v用于传递变量给角色</span><br><span class="hljs-attribute"></span><br><span class="hljs-attribute">调用角色方法3：还可基于条件测试实现角色调用</span><br><span class="hljs-attribute">roles</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">&#123; role: nginx, username: nginx, when: ansible_distribution_major_version == &#x27;7&#x27; &#125;</span><br></code></pre></td></tr></table></figure><h3 id="通过roles传递变量"><a href="#通过roles传递变量" class="headerlink" title="通过roles传递变量"></a>通过roles传递变量</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">通过roles传递变量</span><br><span class="hljs-string">当给一个主机应用角色的时候可以传递变量，然后在角色内使用这些变量</span><br><span class="hljs-string">示例：</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">common</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">foo_app_instance</span>, <span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;/web/htdocs/a.com&#x27;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="向roles传递参数"><a href="#向roles传递参数" class="headerlink" title="向roles传递参数"></a>向roles传递参数</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">而在playbook中，可以这样使用roles：</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">common</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">webservers</span><br><br><span class="hljs-string">也可以向roles传递参数</span><br><span class="hljs-string">示例：</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">common</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">foo_app_instance</span>, <span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;/opt/a&#x27;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">5000</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">foo_app_instance</span>, <span class="hljs-attr">dir:</span> <span class="hljs-string">&#x27;/opt/b&#x27;</span>, <span class="hljs-attr">port:</span> <span class="hljs-number">5001</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="条件式地使用roles"><a href="#条件式地使用roles" class="headerlink" title="条件式地使用roles"></a>条件式地使用roles</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">甚至也可以条件式地使用roles</span><br><span class="hljs-string">示例：</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">webservers</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">some_role</span>, <span class="hljs-attr">when:</span> <span class="hljs-string">&quot;ansible_os_family == &#x27;RedHat&#x27;&quot;</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="Roles条件及变量等案例"><a href="#Roles条件及变量等案例" class="headerlink" title="Roles条件及变量等案例"></a>Roles条件及变量等案例</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">When条件</span><br>    <span class="hljs-attr">roles:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">role:</span> <span class="hljs-string">nginx</span>, <span class="hljs-attr">when:</span> <span class="hljs-string">&quot;ansible_distribution_major_version == &#x27;7&#x27; &quot;</span> ,<span class="hljs-attr">username:</span> <span class="hljs-string">nginx</span> &#125;<br><span class="hljs-string">变量调用</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">zabbix-proxy</span><br>  <span class="hljs-attr">sudo:</span> <span class="hljs-literal">yes</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">geerlingguy.php-mysql</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">dj-wasabi.zabbix-proxy</span>, <span class="hljs-attr">zabbix_server_host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.37</span><span class="hljs-number">.167</span> &#125;<br></code></pre></td></tr></table></figure><h3 id="完整的roles架构"><a href="#完整的roles架构" class="headerlink" title="完整的roles架构"></a>完整的roles架构</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">//</span> <span class="hljs-string">nginx-role.yml</span> <span class="hljs-string">顶层任务调用yml文件</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">testweb</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">nginx</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">role:</span> <span class="hljs-string">httpd</span> <span class="hljs-string">可执行多个role</span><br><br><span class="hljs-string">cat</span> <span class="hljs-string">roles/nginx/tasks/main.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">groupadd.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">useradd.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">install.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">restart.yml</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">include:</span> <span class="hljs-string">filecp.yml</span><br><br><span class="hljs-string">//</span> <span class="hljs-string">roles/nginx/tasks/groupadd.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">add</span> <span class="hljs-string">group</span> <span class="hljs-string">nginx</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">name=nginx</span> <span class="hljs-string">state=present</span><br><br><span class="hljs-string">cat</span> <span class="hljs-string">roles/nginx/tasks/filecp.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">file</span> <span class="hljs-string">copy</span><br>  <span class="hljs-attr">copy:</span> <span class="hljs-string">src=tom.conf</span> <span class="hljs-string">dest=/tmp/tom.conf</span><br><br><span class="hljs-string">以下文件格式类似：</span><br><span class="hljs-string">useradd.yml,install.yml,restart.yml</span><br><br><span class="hljs-string">ls</span> <span class="hljs-string">roles/nginx/files/</span><br><span class="hljs-string">tom.conf</span><br></code></pre></td></tr></table></figure><h3 id="roles-playbook-tags使用"><a href="#roles-playbook-tags使用" class="headerlink" title="roles playbook tags使用"></a>roles playbook tags使用</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">roles</span> <span class="hljs-string">playbook</span> <span class="hljs-string">tags使用</span><br>    <span class="hljs-string">ansible-playbook</span> <span class="hljs-string">--tags=&quot;nginx,httpd,mysql&quot;</span> <span class="hljs-string">nginx-role.yml</span>  <span class="hljs-string">对标签进行挑选执行</span><br><br><span class="hljs-string">//</span> <span class="hljs-string">nginx-role.yml</span><br><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">hosts:</span> <span class="hljs-string">testweb</span><br>  <span class="hljs-attr">remote_user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">roles:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">role:</span> <span class="hljs-string">nginx</span> ,<span class="hljs-attr">tags:</span> [ <span class="hljs-string">&#x27;nginx&#x27;</span>, <span class="hljs-string">&#x27;web&#x27;</span> ] ,<span class="hljs-attr">when:</span> <span class="hljs-string">ansible_distribution_major_version</span> <span class="hljs-string">==</span> <span class="hljs-string">&quot;6“ &#125;</span><br><span class="hljs-string">    - &#123; role: httpd ,tags: [ &#x27;httpd&#x27;, &#x27;web&#x27; ] &#125;</span><br><span class="hljs-string">    - &#123; role: mysql ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span><br><span class="hljs-string">    - &#123; role: marridb ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span><br><span class="hljs-string">    - &#123; role: php &#125;</span><br></code></pre></td></tr></table></figure><h3 id="实验-创建角色memcached"><a href="#实验-创建角色memcached" class="headerlink" title="实验: 创建角色memcached"></a>实验: 创建角色memcached</h3><figure class="highlight erlang-repl"><table><tr><td class="code"><pre><code class="hljs erlang-repl">memcacched 当做缓存用,会在内存中开启一块空间充当缓存<br>cat /etc/sysconfig/memcached <br>    PORT=<span class="hljs-string">&quot;11211&quot;</span><br>    USER=<span class="hljs-string">&quot;memcached&quot;</span><br>    MAXCONN=<span class="hljs-string">&quot;1024&quot;</span><br>    CACHESIZE=<span class="hljs-string">&quot;64&quot;</span>    # 缓存空间默认<span class="hljs-number">64</span>M <br>    OPTIONS=<span class="hljs-string">&quot;&quot;</span><br><br><br><span class="hljs-meta prompt_">1&gt; </span>创建对用目录<br>   cd /app/ansible<br>   mkdir roles/memcached/&#123;tasks,templates&#125; -pv<br>   <br><span class="hljs-meta prompt_">2&gt; </span>拷贝memcached配置文件模板<br>   cp /etc/sysconfig/memcached  templates/memcached.j2<br>   vim templates/memcached.j2<br>   CACHESIZE=<span class="hljs-string">&quot;&#123;&#123;ansible_memtotal_mb//4&#125;&#125;&quot;</span>   #物理内存的<span class="hljs-number">1</span>/<span class="hljs-number">4</span>用做缓存<br>   <br><span class="hljs-meta prompt_">3&gt; </span>创建对应yml文件,并做相应配置<br>   cd tasks/<br>   touch install.yml config.yml service.yml<br>   创建main.yml文件定义任务执行顺序<br>   vim main.yml<br>   - include: install.yml<br>   - include: config.yml<br>   - include: service.yml  <br>   <br>   vim install.yml<br>   - name: install <br>     yum: name=memcached<br>     <br>   vim config.yml<br>   - name: config file<br>     template: src=memcached.j2 dets=/etc/sysconfig/memcached<br><br>   vim service.yml<br>   - name: service<br>     service: name=memcached state=started enabled=yes<br><br><span class="hljs-meta prompt_">4&gt; </span>创建调用角色文件<br>   cd /app/ansible/roles/<br>   vim role_memcached.yml<br>    ---<br>    - hosts: appsrvs<br>    <br>      roles: <br>        - role: memcached<br><br><span class="hljs-meta prompt_">5&gt; </span>安装<br>   ansible-playbook  role_memcached.yml <br>   memcached端口号<span class="hljs-number">11211</span><br></code></pre></td></tr></table></figure><h3 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">委任（指定某一台机器做某一个task）<br>    delegate_to<br>    local_action (专指针对ansible命令执行的机器做的变更操作)<br>交互提示<br>    prompt<br>*暂停（java）<br>    wait_for<br><span class="hljs-keyword">Debug</span><br>    <span class="hljs-keyword">debug</span>: msg=&quot;This always executes.&quot;<br><span class="hljs-keyword">Include</span><br><span class="hljs-keyword">Template</span> 多值合并<br><span class="hljs-keyword">Template</span> 动态变量配置<br></code></pre></td></tr></table></figure><h3 id="Ansible-Roles"><a href="#Ansible-Roles" class="headerlink" title="Ansible Roles"></a>Ansible Roles</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">委任<br>    delegate_to<br>交互提示<br>    prompt<br>暂停<br>    wait_for<br><span class="hljs-keyword">Debug</span><br>    <span class="hljs-keyword">debug</span>: msg=&quot;This always executes.&quot;<br><span class="hljs-keyword">Include</span><br><span class="hljs-keyword">Template</span> 多值合并<br><span class="hljs-keyword">Template</span> 动态变量配置<br></code></pre></td></tr></table></figure><h3 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h3><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//g</span>alaxy.ansible.com<br>https:<span class="hljs-regexp">//g</span>alaxy.ansible.com<span class="hljs-regexp">/explore#/</span><br>http:<span class="hljs-regexp">//gi</span>thub.com/<br>http:<span class="hljs-regexp">//</span>ansible.com.cn/<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ansible/</span>ansible<br>https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/ansible/</span>ansible-examples<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">ansible相关知识整理</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>PMM数据库监控工具调研</title>
    <link href="http://www.qintianjun.top/2021/06/26/PMM%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/"/>
    <id>http://www.qintianjun.top/2021/06/26/PMM%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7%E8%B0%83%E7%A0%94/</id>
    <published>2021-06-26T02:03:51.000Z</published>
    <updated>2022-04-20T03:06:32.184Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PMM数据库性能监控工具调研"><a href="#PMM数据库性能监控工具调研" class="headerlink" title="PMM数据库性能监控工具调研"></a>PMM数据库性能监控工具调研</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Percona Monitoring and Management (PMM)是一款开源的用于管理和监控MySQL和MongoDB性能的开源平台，通过PMM客户端收集到的DB监控数据用第三方软件Grafana画图展示出来。</p><p>PMM提供了对MyISAM、InnoDB、TokuDB和PXC&#x2F;Glarera的监控，另外也提供了Query Analytics的功能，可以检视执行了哪些SQL指令，并对执行效能较差的语法进行优化。另外在新版本还支持了MySQL复制拓扑图结构构造。Demo官网：<a href="http://pmmdemo.percona.com/">http://pmmdemo.percona.com</a></p><p>PMM针对操作系统的部份也提供了硬盘、网络、CPU和RAM的监控，特别的是它提供了Context switches、Processes和interrupts的监控，Context Switches可以看到CPU上下切换文的状况，Processes可以方便了解系统有多少程序在等待I&#x2F;O。</p><h2 id="架构解析"><a href="#架构解析" class="headerlink" title="架构解析"></a>架构解析</h2><p><img src="http://www.ywnds.com/wp-content/uploads/2017/05/2017051706555873.png" alt="img"></p><p><strong>Server组件</strong></p><p>Query Analytics(QAN)是用来搜集指令并作性能分析的，其组件分别说明如下：</p><ul><li><p>QAN API：作为percona-qan-agent后端储存和读取Query资料用。</p></li><li><p>QAN APP：提供图形化分析介面。</p></li></ul><p>Metrics Monitor(MM)组件提供了MySQL和MongoDB历史监控信息，其组件分别说明如下：</p><ul><li><p>Prometheus：一个开源的服务监控系统和时间序列数据库，它连接到PMM Client上的exporter聚集DB的监控数据。</p></li><li><p>Consul：提供API让PMM Client可以远端替Prometheus新增、移除hosts，同时它也储存了监控的metadata。</p></li><li><p>Grafana：这是一个第三方Dashboard和图形构建器，用于可视化Prometheus中聚合的数据，以Web呈现。</p></li><li><p>Percona Dashboards：是由Percona开发的一组用于Grafana的仪表板。</p></li></ul><p>上述的2个Web页面都能从PMM Landing Page(就是PMM首页)直接连结。</p><p><strong>Client组件</strong></p><ul><li>ppm-admin：命令行的PMM Client管理工具，用来新增、移除监控的资料Instance。</li><li>percona-qan-agent：用于搜集QAN查询效能性能资料，同时连结和传送资料给PMM Server中的QAN API。</li><li>node_exporter：Prometheus exporter用于搜集一般系统信息（<a href="https://github.com/prometheus/node_exporter%EF%BC%89%E3%80%82">https://github.com/prometheus/node_exporter）。</a></li><li>mysqld_exporter：Prometheus exporter用于搜集MySQL Server的信息（<a href="https://github.com/percona/mysqld_exporter%EF%BC%89%E3%80%82">https://github.com/percona/mysqld_exporter）。</a></li><li>mongodb_exporter：Prometheus exporter用于搜集MongoDB server的信息（<a href="https://github.com/percona/mongodb_exporter%EF%BC%89%E3%80%82">https://github.com/percona/mongodb_exporter）。</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>PMM Server需要docker环境，所以必须先安装docker，以下以CentOS 7为例,安装Docker CE</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">CentOS <span class="hljs-number">7</span>（使用 yum 进行安装）<br><br><span class="hljs-comment"># step 1: 安装必要的一些系统工具</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class="hljs-comment"># Step 2: 添加软件源信息</span><br>sudo yum-config-manager --add-repo https:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/docker-ce/</span>linux<span class="hljs-regexp">/centos/</span>docker-ce.repo<br><span class="hljs-comment"># Step 3: 更新并安装Docker-CE</span><br>sudo yum makecache fast<br>sudo yum -y install docker-ce<br><span class="hljs-comment"># Step 4: 开启Docker服务</span><br>sudo service docker start<br><br><span class="hljs-comment"># 注意：</span><br><span class="hljs-comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，您可以通过以下方式开启。同理可以开启各种测试版本等。</span><br><span class="hljs-comment"># vim /etc/yum.repos.d/docker-ee.repo</span><br><span class="hljs-comment">#   将[docker-ce-test]下方的enabled=0修改为enabled=1</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># 安装指定版本的Docker-CE:</span><br><span class="hljs-comment"># Step 1: 查找Docker-CE的版本:</span><br><span class="hljs-comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span><br><span class="hljs-comment">#   Loading mirror speeds from cached hostfile</span><br><span class="hljs-comment">#   Loaded plugins: branch, fastestmirror, langpacks</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span><br><span class="hljs-comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span><br><span class="hljs-comment">#   Available Packages</span><br><span class="hljs-comment"># Step2: 安装指定版本的Docker-CE: (VERSION例如上面的17.03.0.ce.1-1.el7.centos)</span><br><span class="hljs-comment"># sudo yum -y install docker-ce-[VERSION]</span><br></code></pre></td></tr></table></figure><p>待以上操作完成后需要如下配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /docker<br><br>[root@localhost ~]# sed -i &#x27;s/ExecStart\=\/usr\/bin\/dockerd -H unix:\/\//ExecStart\=\/usr\/bin\/dockerd -H unix:\/\/ --data-root=\/docker --log-level=warn/g&#x27; /usr/lib/systemd/system/docker.service<br></code></pre></td></tr></table></figure><p>说明：由于docker默认使用的日志等级为info、默认的镜像及其相关信息生成在&#x2F;var&#x2F;lib&#x2F;docker下，所以用以上两条命令将日志等级改为warn、将镜像及其相关信息生成的路径指定到&#x2F;docker下</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /etc/docker<br><br>[root@localhost ~]# cat&gt;/etc/docker/daemon.json&lt;&lt;EOF<br>&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;]<br>&#125;<br>EOF<br></code></pre></td></tr></table></figure><p>说明：由于docker参数–config-file的默认值为&#x2F;etc&#x2F;docker&#x2F;docker-daemon.json，所以我们直接创建并修改registry-mirrors为国内加速站点，并且将最大并发下载数由5提高20</p><figure class="highlight perl"><table><tr><td class="code"><pre><code class="hljs perl">[root@localhost ~]<span class="hljs-comment"># yum install -y conntrack ipvsadm ipset jq sysstat curl iptables libseccomp</span><br><br>[root@localhost ~]<span class="hljs-comment"># modprobe br_netfilter</span><br><br>[root@localhost ~]<span class="hljs-comment"># modprobe ip_vs</span><br><br>下载相关依赖包并加载br_netfilter和ip_vs模块<br><br>[root@localhost ~]<span class="hljs-comment"># cat&gt;&gt;/etc/sysctl.d/99-sysctl.conf&lt;&lt;EOF</span><br>net.bridge.bridge-nf-call-iptables=<span class="hljs-number">1</span><br>net.bridge.bridge-nf-call-ip6tables=<span class="hljs-number">1</span><br>net.ipv4.ip_forward=<span class="hljs-number">1</span><br>vm.swappiness=<span class="hljs-number">0</span><br>vm.overcommit_memory=<span class="hljs-number">1</span><br>vm.panic_on_oom=<span class="hljs-number">0</span><br>net.ipv6.conf.all.disable_ipv6=<span class="hljs-number">1</span><br>EOF<br><br>[root@localhost ~]<span class="hljs-comment"># sysctl -p</span><br><br>修改相应内核参数，并使之生效<br><br>[root@localhost ~]<span class="hljs-comment"># iptables -P FORWARD ACCEPT</span><br><br>[root@localhost ~]<span class="hljs-comment"># echo &#x27;/sbin/iptables -P FORWARD ACCEPT&#x27;&gt;&gt;/etc/rc.local</span><br><br>由于Docker默认将iptables的Chain FORWARD设置为drop,我们将其改为<span class="hljs-keyword">accept</span>，允许其转发<br><br>[root@localhost ~]<span class="hljs-comment"># systemctl daemon-reload &amp;&amp; systemctl enable docker &amp;&amp; systemctl restart docker</span><br><br>[root@localhost ~]<span class="hljs-comment"># systemctl status docker</span><br><br>启动并查看Docker服务是否正常<br><br>[root@localhost ~]<span class="hljs-comment"># journalctl -u docker</span><br><br>查看docker日志，会有一些关于文件系统的告警，由于centos7下使用的是overlay2存储驱动，其他存储的驱动的告警可以忽略<br></code></pre></td></tr></table></figure><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><ol><li><p>Docker 启动报错： Error starting daemon: Error initializing network controller: list bridge addresses failed: no available network</p><p>看到这样一句话：</p><p><code>failed to start daemon: Error initializing network controller: list bridge addresses failed: PredefinedLocalScopeDefaultNetworks List: [172.17.0.0/16 172.18.0.0/16 172.19.0.0/16 172.20.0.0/16 172.21.0.0/16 172.22.0.0/16 172.23.0.0/16 172.24.0 May 19 17:21:44 game143 systemd[1]: docker.service: main process exited, code=exited, status=1/FAILURE</code></p><p>查看本地网络：</p></li></ol><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">`[root@game143 export]<span class="hljs-comment"># ip a</span><br><span class="hljs-number">1</span>: lo: <span class="hljs-variable">&lt;LOOPBACK,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">65536</span> qdisc noqueue <span class="hljs-keyword">state</span> UNKNOWN <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/loopback <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> brd <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span><br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/<span class="hljs-number">8</span> scope host lo<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">2</span>: eth0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc mq <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether d4:ae:<span class="hljs-number">52</span>:ae:fc:<span class="hljs-number">57</span> brd ff:ff:ff:ff:ff:ff<br><span class="hljs-number">6</span>: br1: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether d4:ae:<span class="hljs-number">52</span>:ae:fc:<span class="hljs-number">58</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">124.244</span>.<span class="hljs-number">251.11</span>/<span class="hljs-number">25</span> brd <span class="hljs-number">124.244</span>.<span class="hljs-number">251.255</span> scope <span class="hljs-keyword">global</span> br1<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">7</span>: br0: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether d4:ae:<span class="hljs-number">52</span>:ae:fc:<span class="hljs-number">59</span> brd ff:ff:ff:ff:ff:ff<br>    <span class="hljs-keyword">inet</span> <span class="hljs-number">10.154</span>.<span class="hljs-number">21.143</span>/<span class="hljs-number">24</span> brd <span class="hljs-number">10.154</span>.<span class="hljs-number">21.255</span> scope <span class="hljs-keyword">global</span> br0<br>       valid_lft forever preferred_lft forever<br><span class="hljs-number">8</span>: br2: <span class="hljs-variable">&lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt;</span> mtu <span class="hljs-number">1500</span> qdisc noqueue <span class="hljs-keyword">state</span> UP <span class="hljs-keyword">group</span> <span class="hljs-keyword">default</span> qlen <span class="hljs-number">1000</span><br>    link/ether d4:ae:<span class="hljs-number">52</span>:ae:fc:<span class="hljs-number">5</span>a brd ff:ff:ff:ff:ff:ff`<br></code></pre></td></tr></table></figure><p>没有 docker0 的桥接网络, 手动加一个即可</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ip link add name docker0 type bridge<br>ip addr add dev docker0 172.17.0.1/16<br></code></pre></td></tr></table></figure><p>此时多了一个docker0：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">9: docker0: &lt;BROADCAST,MULTICAST&gt; mtu 1500 qdisc noop state DOWN group default qlen 1000<br>    link/ether ee:9a:89:b1:b5:05 brd ff:ff:ff:ff:ff:ff<br>    inet 172.17.0.1/16 scope global docker0<br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure><p>重启docker即可</p><h3 id="安装PMM-Server"><a href="#安装PMM-Server" class="headerlink" title="安装PMM Server"></a>安装PMM Server</h3><p>PMM安装有三种方式：docker、虚拟机和AWS marketplace，推荐使用docker方式安装。pmm server容器镜像发布在<a href="https://hub.docker.com/r/percona/pmm-server/tags/%EF%BC%8Cdocker%E7%89%88%E6%9C%AC%E5%BF%85%E9%A1%BB%E9%AB%98%E4%BA%8E1.12.6%E3%80%82">https://hub.docker.com/r/percona/pmm-server/tags/，docker版本必须高于1.12.6。</a></p><blockquote><p>注意事项：对于每个受监视的数据库节点将数据保留时间设置为一周，PMM大约需要1GB的存储空间。每添加 一个受监视的数据库节点需要的最小内存为2 GB，但是当您添加更多节点时它不是线性增加的。 例如，应使用16 GB轻松处理来自20个节点的数据。</p></blockquote><p>PMM Server部署范围三步：获取镜像，创建持久化的pmm data镜像以及创建启动pmm server镜像。</p><ol><li><p>拉取PMM Server的Docker镜像</p><p>从docker hub拉取最新的镜像版本</p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">docker pull percona/pmm-<span class="hljs-keyword">server</span>:latest<br></code></pre></td></tr></table></figure><blockquote><p>注意：由于某些原因导致速度缓慢，可以修改docker源到国内镜像加速<br><code>curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s [http://396e823a.m.daocloud.io](http://396e823a.m.daocloud.io/) </code></p></blockquote></li><li><p>创建持久化的pmm-data镜像</p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">docker create -v <span class="hljs-regexp">/opt/</span>prometheus<span class="hljs-regexp">/data -v /</span>opt<span class="hljs-regexp">/consul-data -v /</span>var<span class="hljs-regexp">/lib/my</span>sql -v <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/grafana --name pmm-data percona/</span>pmm-server:latest <span class="hljs-regexp">/bin/</span><span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">docker <span class="hljs-keyword">create</span>：该命令指示Docker守护程序从映像创建容器。<br>-v：该选项初始化数据卷的容器。<br><span class="hljs-comment">--name：该选项为你可以用于引用Docker网络中的容器的容器分配一个自定义名称。</span><br>percona/pmm-<span class="hljs-keyword">server</span>:latest ：是导出容器的镜像名称和版本标签。<br>/bin/<span class="hljs-keyword">true</span> ：是容器运行的命令。<br>注：该镜像不启动，只为了保证pmm <span class="hljs-keyword">server</span>的数据持久化以用于版本升级等场景。注意不要移动或者重新创建该镜像，除非确保数据不再需要。<br>注：确保镜像-v的数据卷存在，并最好是单独绑定挂载。<br></code></pre></td></tr></table></figure></li><li><p>创建并启动PMM-Server容器</p></li></ol><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">docker run -d -<span class="hljs-selector-tag">p</span> <span class="hljs-number">80</span>:<span class="hljs-number">80</span> <span class="hljs-attr">--volumes-from</span> pmm-data <span class="hljs-attr">--name</span> pmm-server <span class="hljs-attr">--restart</span> always percona/pmm-server:latest<br></code></pre></td></tr></table></figure><p>此容器不运行，它只是存在，以确保您在升级到较新的pmm-server时保留所有PMM数据。不要删除或重新创建此容器，除非您打算清除所有PMM数据并重新开始。</p><p>下面解释一下docker参数的具体意义：</p><figure class="highlight applescript"><table><tr><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span>：该命令指示守护程序从镜像运行容器。<br>    -d：该选项在分离模式（即后台）中启动容器。<br>    -p：该选项映射用于访问PMM服务器 Web UI的端口。例如-p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span>，如果端口<span class="hljs-number">80</span>不可用，则可以使用登陆页面映射到端口<span class="hljs-number">8080</span> 。<br>    <span class="hljs-comment">--volumes-from：该选项从pmm-date容器中装入卷。</span><br>    <span class="hljs-comment">--name：该选项为你可以用于引用Docker网络中的容器分配一个自定义名称。</span><br>    <span class="hljs-comment">--restart：该选项定义容器的重新启动策略，设置它以always确保Docker守护程序在启动时启动容器，并在容器退出时重新启动它。</span><br></code></pre></td></tr></table></figure><p>其他参数说明：<br>通过docker run的-e参数可以增加pmm-server启动的额外功能</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">启用Orchestrator复制拓扑：<br>docker <span class="hljs-built_in">run</span> <span class="hljs-built_in">..</span>. -e <span class="hljs-attribute">ORCHESTRATOR_ENABLED</span>=<span class="hljs-literal">true</span> <span class="hljs-built_in">..</span>. percona/pmm-server:latest<br>关闭telemetry（pmm server数据每24小时会上报percona.com,包括pmm<span class="hljs-built_in"> server </span>ID、pmm version、操作系统、数据库版本、perl版本等）：<br>docker <span class="hljs-built_in">run</span> <span class="hljs-built_in">..</span>. -e <span class="hljs-attribute">DISABLE_TELEMETRY</span>=<span class="hljs-literal">true</span> <span class="hljs-built_in">..</span>. percona/pmm-server:latest<br>关闭更新，可以通过web界面关闭，也可以通过命令行关闭：<br>docker <span class="hljs-built_in">run</span> <span class="hljs-built_in">..</span>. -e <span class="hljs-attribute">DISABLE_UPDATES</span>=<span class="hljs-literal">true</span> <span class="hljs-built_in">..</span>. percona/pmm-server:latest<br></code></pre></td></tr></table></figure><p>露个脸：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200406150905561.png" alt="image-20200406150905561"></p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200406150943887.png" alt="image-20200406150943887"></p><h3 id="安装PMM-Client"><a href="#安装PMM-Client" class="headerlink" title="安装PMM Client"></a>安装PMM Client</h3><p> PMM Client支持yum安装或者源码安装，方便起见推荐CentOS系统使用yum添加repository安装：</p><ol><li><p>下载安装对应源的rpm包（巨慢，建议翻墙或者上官网直接下RPM包）</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">yum install https:<span class="hljs-regexp">//</span>repo.percona.com<span class="hljs-regexp">/yum/</span>percona-release-latest.noarch.rpm<br></code></pre></td></tr></table></figure><blockquote><p>notes: 如果您以前启用过实验性或测试性Percona存储库，请不要忘记禁用它们并启用原始存储库的发布组件，如下所示：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">sudo percona-<span class="hljs-keyword">release</span> <span class="hljs-keyword">disable</span> <span class="hljs-keyword">all</span><br>sudo percona-<span class="hljs-keyword">release</span> <span class="hljs-keyword">enable</span> original <span class="hljs-keyword">release</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p>安装<code>pmm2-client</code>包</p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">yum install pmm2-<span class="hljs-keyword">client</span><br></code></pre></td></tr></table></figure></li><li><p>一旦PMM Client安装完成后，使用<code>pmm-admin config</code>命令设置你的PMM Sercer IP来把你的client节点注册到对应的PMM Server上</p></li></ol><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">pmm-admin config --<span class="hljs-keyword">server</span>-insecure-tls --<span class="hljs-keyword">server</span>-url=https:<span class="hljs-comment">//admin:admin@&lt;IP Address&gt;:443</span><br></code></pre></td></tr></table></figure><h3 id="安装PMM-Client后的配置"><a href="#安装PMM-Client后的配置" class="headerlink" title="安装PMM Client后的配置"></a>安装PMM Client后的配置</h3><ul><li><p>安装好MySQL后修改监听地址：</p><figure class="highlight abnf"><table><tr><td class="code"><pre><code class="hljs abnf">将bind改为：<br><span class="hljs-attribute">bind-address</span>            <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span><br></code></pre></td></tr></table></figure></li><li><p>开启慢查询</p><figure class="highlight ini"><table><tr><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">slow_query_log</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">long_query_time</span>=<span class="hljs-number">1</span><br><span class="hljs-attr">slow_query_log_file</span>=/var/lib/mysql/mysql-slow.log<br></code></pre></td></tr></table></figure></li><li><p>对root用户做授权，允许远程访问</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">mysql&gt; <span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">on</span> *.* <span class="hljs-keyword">to</span> root@<span class="hljs-string">&#x27;%&#x27;</span> identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;root&#x27;</span>;<br>mysql&gt; flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure></li><li><p>使用pmm-admin config –server命令添加客户端</p><p>参数说明：</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">Usage:<br>  pmm-admin<span class="hljs-built_in"> config </span>[flags]<br><br>Examples:<br>  pmm-admin<span class="hljs-built_in"> config </span>--server 192.168.56.100<br>  pmm-admin<span class="hljs-built_in"> config </span>--server 192.168.56.100:8000<br>  pmm-admin<span class="hljs-built_in"> config </span>--server 192.168.56.100 --server-password abc123<br><br>Flags:<br>      --bind-address string      bind address, also local/private<span class="hljs-built_in"> address </span>that is mapped <span class="hljs-keyword">from</span><span class="hljs-built_in"> client address </span>via NAT<span class="hljs-built_in">/port </span>forwarding (defaults <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> client </span>address)<br>      --client-address string   <span class="hljs-built_in"> client </span>address, also remote/public<span class="hljs-built_in"> address </span><span class="hljs-keyword">for</span> this<span class="hljs-built_in"> system </span>(<span class="hljs-keyword">if</span> omitted it will be automatically detected by asking server)<br>      --client-name string      <span class="hljs-built_in"> client </span>name (defaults <span class="hljs-keyword">to</span> the<span class="hljs-built_in"> system </span>hostname)<br>      --force                    force <span class="hljs-keyword">to</span> <span class="hljs-built_in">set</span><span class="hljs-built_in"> client </span>name on initial setup after uninstall with unreachable<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span>  -h, --help                     help <span class="hljs-keyword">for</span><span class="hljs-built_in"> config</span><br><span class="hljs-built_in"></span>      --server string            PMM<span class="hljs-built_in"> server </span>address, optionally following with the :port (default<span class="hljs-built_in"> port </span>80 <span class="hljs-keyword">or</span> 443 <span class="hljs-keyword">if</span> using SSL)<br>      --server-insecure-ssl      <span class="hljs-built_in">enable</span> insecure SSL (self-signed certificate) <span class="hljs-keyword">to</span> communicate with PMM<span class="hljs-built_in"> Server</span><br><span class="hljs-built_in"></span>      --server-password string   define HTTP password configured on PMM<span class="hljs-built_in"> Server</span><br><span class="hljs-built_in"></span>      --server-ssl               <span class="hljs-built_in">enable</span> SSL <span class="hljs-keyword">to</span> communicate with PMM<span class="hljs-built_in"> Server</span><br><span class="hljs-built_in"></span>      --server-user string       define HTTP<span class="hljs-built_in"> user </span>configured on PMM<span class="hljs-built_in"> Server </span>(default <span class="hljs-string">&quot;pmm&quot;</span>)<br><br>Global Flags:<br>  -c, --config-file string   PMM<span class="hljs-built_in"> config </span>file (default <span class="hljs-string">&quot;/usr/local/percona/pmm-client/pmm.yml&quot;</span>)<br>      --skip-root            skip UID check (experimental)<br>      --timeout duration     timeout (default 5s)<br>      --verbose              verbose output<br><br></code></pre></td></tr></table></figure><p>看到以下输出说明正确连接</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326134530370.png" alt="image-20200326134530370"></p></li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置PMM-Client"><a href="#配置PMM-Client" class="headerlink" title="配置PMM  Client"></a>配置PMM  Client</h3><p>在未添加任何监控的状态下，<code>pmm-admin list</code>应有如下输出: </p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326135222587.png" alt="image-20200326135222587"></p><h4 id="添加监控实例到PMM"><a href="#添加监控实例到PMM" class="headerlink" title="添加监控实例到PMM"></a>添加监控实例到PMM</h4><p>可以在PMM Client端使用命令</p><p><code>pmm-admin add mysql --query-source=slowlog --username=root --password=PASSWORD sl-mysql 127.0.0.1:3306</code></p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326143341547.png" alt="image-20200326143341547"></p><p>此时<code>pmm-admin list</code>输出：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326143433685.png" alt="image-20200326143433685"></p><p>查看dashboard, 可以看到对应client已经添加到PMM Server</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326144006820.png" alt="image-20200326144006820"></p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/pmm/image-20200326143955972.png" alt="image-20200326143955972"></p><h4 id="添加远程MongoDB实例到PMM"><a href="#添加远程MongoDB实例到PMM" class="headerlink" title="添加远程MongoDB实例到PMM"></a>添加远程MongoDB实例到PMM</h4><p><strong>客户端配置</strong></p><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">pmm-admin config --<span class="hljs-keyword">server</span> SERVERIP --<span class="hljs-keyword">server</span>-user SERVERUSER --<span class="hljs-keyword">server</span>-password PASSWORD --<span class="hljs-keyword">client</span>-name HOSTNAME<br></code></pre></td></tr></table></figure><p><strong>mongo服务器配置</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">pmm-admin <span class="hljs-keyword">add</span><span class="language-bash"> mongodb --cluster cluster1 --uri mongodb://root:passwd@localhost:27017/admin</span><br></code></pre></td></tr></table></figure><h4 id="对访问容器IP做限制"><a href="#对访问容器IP做限制" class="headerlink" title="对访问容器IP做限制"></a>对访问容器IP做限制</h4><p>查看Docker对应chain的规则</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim">[root@test sysconfig]# iptables -L DOCKER -n --<span class="hljs-built_in">line</span>-<span class="hljs-keyword">number</span><br>Chain DOCKER (<span class="hljs-number">1</span> references)<br>num  target     prot <span class="hljs-keyword">opt</span> <span class="hljs-keyword">source</span>               destination         <br><span class="hljs-number">1</span>    ACCEPT     tcp  --  <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            <span class="hljs-number">172.17</span>.<span class="hljs-number">0.2</span>           tcp <span class="hljs-keyword">dp</span><span class="hljs-variable">t:443</span><br><span class="hljs-number">2</span>    ACCEPT     tcp  --  <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>/<span class="hljs-number">26</span>     <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            tcp <span class="hljs-keyword">dp</span><span class="hljs-variable">t:80</span><br><span class="hljs-number">3</span>    ACCEPT     tcp  --  <span class="hljs-number">2.2</span>.<span class="hljs-number">2.2</span>       <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>/<span class="hljs-number">0</span>            tcp <span class="hljs-keyword">dp</span><span class="hljs-variable">t:80</span><br></code></pre></td></tr></table></figure><p>默认情况下Docker对应容器是对公网开的，为了安全考虑可以对访问IP做限制，限制不能直接在iptables的INPUT链里面加，需要在对应Docker的chain中做限制</p><p>输入<code>iptables -R DOCKER N</code>（N为规则num）可以修改对应规则</p><figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-attr">[root@test sysconfig]</span># iptables -R DOCKER <span class="hljs-number">1</span> -<span class="hljs-selector-tag">p</span> tcp -s <span class="hljs-number">1.1</span>.<span class="hljs-number">1.1</span>/<span class="hljs-number">26</span> <span class="hljs-attr">--dport</span> <span class="hljs-number">443</span> -j ACCEPT<br></code></pre></td></tr></table></figure><p>，同理<code>iptables -I DOCKER xxx</code>添加规则。</p><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="从文件导入导出镜像"><a href="#从文件导入导出镜像" class="headerlink" title="从文件导入导出镜像"></a>从文件导入导出镜像</h3><p><strong>保存镜像为文件</strong></p><figure class="highlight fortran"><table><tr><td class="code"><pre><code class="hljs fortran">docker <span class="hljs-keyword">save</span> -o 要保存的文件名  要保存的镜像<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[root@iZbp16cdvzk4rhl0vn1gedZ ~]# ls<br>aaa.cap  install.sh  mobile-1.0.0-SNAPSHOT.jar  sa_recovery.log<br>[root@iZbp16cdvzk4rhl0vn1gedZ ~]# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>bb                  v1.0                3b8d26737bcb        10 minutes ago      202MB<br>centos              latest              9f38484d220f        3 weeks ago         202MB<br>java                latest              d23bdf5b1b1b        2 years ago         643MB<br>[root@iZbp16cdvzk4rhl0vn1gedZ ~]# docker save -o cc.tar bb:v1.0<br>[root@iZbp16cdvzk4rhl0vn1gedZ ~]# ls<br>aaa.cap  cc.tar  install.sh  mobile-1.0.0-SNAPSHOT.jar  sa_recovery.log<br></code></pre></td></tr></table></figure><p><strong>导入文件为镜像</strong></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">docker <span class="hljs-built_in">load</span> <span class="hljs-comment">--input 文件</span><br>或者<br>docker <span class="hljs-built_in">load</span> &lt; 文件名<br></code></pre></td></tr></table></figure><h3 id="给镜像打标签"><a href="#给镜像打标签" class="headerlink" title="给镜像打标签"></a>给镜像打标签</h3><p>使用<code>docker tag</code>命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[2020/6/1 16:30:47] [root@game143 export]# docker image ls<br>[2020/6/1 16:30:47] REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>[2020/6/1 16:30:47] &lt;none&gt;              &lt;none&gt;              d48b8d6edded        2 months ago        1.49GB<br>[2020/6/1 16:31:06] [root@game143 export]# docker tag d48b percona/pmm-server:2<br>[2020/6/1 16:31:06] You have new mail in /var/spool/mail/root<br>[2020/6/1 16:31:08] [root@game143 export]# docker image ls<br>[2020/6/1 16:31:08] REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE<br>[2020/6/1 16:31:08] percona/pmm-server   2                   d48b8d6edded        2 months ago        1.49GB<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">PMM数据库性能监控工具调研</summary>
    
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/categories/Ops/"/>
    
    
    <category term="Ops" scheme="http://www.qintianjun.top/tags/Ops/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（五）- Promise和VueX</title>
    <link href="http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%94%EF%BC%89/</id>
    <published>2021-06-24T14:03:46.000Z</published>
    <updated>2023-02-24T08:02:49.911Z</updated>
    
    <content type="html"><![CDATA[<h1 id="5-Promise"><a href="#5-Promise" class="headerlink" title="5 Promise"></a>5 Promise</h1><h2 id="5-1-简介"><a href="#5-1-简介" class="headerlink" title="5.1 简介"></a>5.1 简介</h2><p>ES6中一个非常重要和好用的特性就是Promise，但是初次接触Promise会一脸懵逼,这TM是什么东西?看看官方或者一些文章对它的介绍和用法,也是一头雾水。. Promise到底是做什么的呢?</p><p>Promise是异步编程的一种解决方案。那什么时候我们会来处理异步事件呢?</p><ul><li>一种很常见的场景应该就是网络请求了。</li><li>我们封装一个网络请求的函数,因为不能立即拿到结果,所以不能像简单的3+4&#x3D;7一样将结果返回。</li><li>所以往往我们会传入另外一个函数,在数据请求成功时,将数据通过传入的函数回调出去。</li><li>如果只是一个简单的网络请求,那么这种方案不会给我们带来很大的麻烦。但是,当网络请求非常复杂时,就会出现回调地狱。</li></ul><p>一个简单使用Promise异步多次请求网络资源的例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 链式编程</span><br><span class="hljs-comment">// 参数 -&gt; 函数(resolve, reject)</span><br><span class="hljs-comment">// resolve, reject本身它们又是函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1.第一次网络请求的代码</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>()<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-comment">// 第一次拿到结果的处理代码</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello World!&#x27;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 2. 第二次网络请求的代码</span><br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-title function_">resolve</span>()<br>        &#125;, <span class="hljs-number">1000</span>)<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 第二次拿到结果的处理代码</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello Vuejs!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>            <span class="hljs-comment">// 3.第三次网络请求的代码</span><br>            <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-title function_">resolve</span>()<br>            &#125;, <span class="hljs-number">1000</span>)<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>            <span class="hljs-comment">// 第三次拿到结果的处理代码</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello Python!&#x27;</span>)<br>        &#125;)<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li>Q: 什么情况下会用到Promise？</li><li>A: 一般情况下，有异步操作时，使用Promise对这个异步操作进行封装</li></ul><p>具体参数的一些说明：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// new -&gt; 构造函数（1.保存了一些状态信息 2.执行传入的函数）</span><br><span class="hljs-comment">// 在执行传入的回调函数时， 会传入两个参数，resolve，reject本身又是函数</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-comment">// 此处进行网络请求</span><br>        <span class="hljs-comment">// 成功的时候调用resolve</span><br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;hello world&#x27;</span>)<br>        <span class="hljs-comment">// 失败的时候调用reject</span><br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;error message&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">data</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此处处理网络请求data</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 此处处理失败请求，将reject中的参数传入</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="5-2-Promise的三种状态和另外的处理方式"><a href="#5-2-Promise的三种状态和另外的处理方式" class="headerlink" title="5.2 Promise的三种状态和另外的处理方式"></a>5.2 Promise的三种状态和另外的处理方式</h2><p>首先，当我们开发中有异步操作时，就可以给异步操作包装一个Promise，异步操作之后会有三种状态</p><ul><li>pending: 等待状态，比如正在进行网络请求，或者定时器没有到时间</li><li>fulfill: 满足状态，当我们主动回调了resolve时，就处于该状态，并且会回调<code>.then()</code></li><li>reject: 拒绝状态，当我们主动回调了reject时，就处于该状态，并且会回调<code>.catch()</code></li></ul><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200212225948392.png" alt="Promise的三种状态"></p><p>调用的小例子：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br><span class="hljs-comment">// 这里使用setTimeout模拟异步请求</span><br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;Hello Vue.js&#x27;</span>)<br>        <span class="hljs-title function_">reject</span>(<span class="hljs-string">&#x27;Error Message&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>    <span class="hljs-comment">// 其实.then()可以接收两个参数，一个成功调用的函数和一个失败调用的函数</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求成功，处理data</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求失败，处理error</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>Promise的链式调用</strong></p><p>假设现在有如下需求：</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 网络请求： aaa -&gt; 自己处理（<span class="hljs-number">10</span>行）<br><span class="hljs-regexp">//</span> 处理：aaa111 -&gt; 自己处理（<span class="hljs-number">10</span>行）<br><span class="hljs-regexp">//</span> 处理：aaa111222 -&gt; 自己处理<br></code></pre></td></tr></table></figure><p>用Promise的最原始代码写法如下：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>           <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>               <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>           &#125;, <span class="hljs-number">1000</span>)<br>       &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>           <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第一层的10行处理代码&#x27;</span>)<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;<br>               <span class="hljs-title function_">resolve</span>(res + <span class="hljs-string">&#x27;111&#x27;</span>)<br>           &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>               <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第二层的10行处理代码&#x27;</span>)<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;<br>                   <span class="hljs-title function_">resolve</span>(res + <span class="hljs-string">&#x27;222&#x27;</span>)<br>               &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第三层的10行处理代码&#x27;</span>)<br>               &#125;)<br>           &#125;)<br>       &#125;)<br></code></pre></td></tr></table></figure><p>要知道，Promise是支持直接调用<code>.resolve()</code>方法，故上面的代码可以简写为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Promise支持直接调用resolve，故以上可以简写为</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1.自己处理10行代码</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第一层的10行处理代码&#x27;</span>)<br>    <span class="hljs-comment">// 2.</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res + <span class="hljs-string">&#x27;111&#x27;</span>).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第二层的10行处理代码&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">resolve</span>(res + <span class="hljs-string">&#x27;222&#x27;</span>).<span class="hljs-title function_">then</span>(<br>            <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第三层的10行处理代码&#x27;</span>)<br>        &#125;)<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>事实上，就连Promise.resolve(都可以省略)，直接return数据，es6解释器会在执行时自动加上Promise.resolve，故还可以进一步简写为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// Promise.resolve事实上也可以省略</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-title function_">resolve</span>(<span class="hljs-string">&#x27;aaa&#x27;</span>)<br>    &#125;, <span class="hljs-number">1000</span>)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第一层的10行处理代码&#x27;</span>)<br>    <span class="hljs-keyword">return</span> res + <span class="hljs-string">&#x27;111&#x27;</span>&#125;).<span class="hljs-title function_">then</span>(<br>        <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第二层的10行处理代码&#x27;</span>)<br>            <span class="hljs-keyword">return</span> res + <span class="hljs-string">&#x27;222&#x27;</span>&#125;).<span class="hljs-title function_">then</span>(<br>                <span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res, <span class="hljs-string">&#x27;第三层的10行处理代码&#x27;</span>)<br>                &#125;)<br></code></pre></td></tr></table></figure><h1 id="6-Vuex"><a href="#6-Vuex" class="headerlink" title="6 Vuex"></a>6 Vuex</h1><h2 id="6-1-Vuex简介"><a href="#6-1-Vuex简介" class="headerlink" title="6.1 Vuex简介"></a>6.1 Vuex简介</h2><p><strong>Vuex是做什么的</strong></p><p>Vuex是一个专为Vue.js应用程序开发的状态管理模式</p><ul><li>它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化</li><li>Vuex也集成到Vue的官方调试工具devtools，提供了诸如零配置的time-travel调试，状态快照导入导出等高级调试功能</li></ul><p><strong>状态管理到底是什么</strong></p><ul><li>状态管理模式，集中式存储管理这些名词看起来就非常高大上，让人捉摸不透</li><li>其实，你可以简单的将其看成把需要多个组件共享的全局变量全部存储在一个对象里面</li><li>然后，将这个对象放在顶层的Vue实例中，让其他组件可以使用</li><li>那么，多个组件是不是就可以共享这个对象中的所有变量属性了呢</li></ul><p><strong>为什么需要使用专门的Vuex而不自己写个对象实现呢</strong></p><ul><li>当然可以，但是我们要先想想VueJS带给我们最大的便利是什么？没错，就是响应式</li><li>如果你自己封装实现一个对象能不能保证它里面所有的属性做到响应式呢？当然也可以，只是自己封装可能稍微麻烦一些</li><li>不用怀疑，Vuex就是为了提供这样一个在多个组件间共享状态的插件，用它就可以了</li></ul><p><strong>管理什么状态呢</strong></p><p>如果你做过大型项目开发，你一定遇到过多个状态在多个界面间共享的问题，如：</p><ol><li>用户的登录状态、用户名称、头像、地理位置信息</li><li>商品的收藏，购物车中的物品等</li><li>这些状态信息，我们都可以放在统一的地方，对它进行保存和管理，而且它们还是响应式的</li></ol><h2 id="6-2-页面的状态管理"><a href="#6-2-页面的状态管理" class="headerlink" title="6.2 页面的状态管理"></a>6.2 页面的状态管理</h2><p>我们知道,要在单个组件中进行状态管理是一件非常简单的事情。什么意思呢?我们来看下面的图片。</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/flow.png" alt="VuexFlow"></p><p>这图片中的三种东西,怎么理解呢?</p><ul><li><p>State:不用多说，就是我们的状态。(你姑且可以当做就是data中的属性)</p></li><li><p>View :视图层,可以针对State的变化,显示不的信息。(这个好理解吧? )</p></li><li><p>Actions :这里的Actions主要是用户的各种操作:点击、输入等等,会导致状态的改变。</p></li></ul><p><strong>单页面状态管理的实现</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;test&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>当前计数：&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter+=1&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;counter-=1&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>在这个案例中,我们有木有状态需要管理呢?没错,就是个数counter.</p></li><li><p>counter需要某种方式被记录下来,也就是我们的State.</p></li><li><p>counter目前的值需要被显示在界面中,也就是我们的View部分。</p></li></ul><p>界面发生某些操作时(我们这里是用户的点击,也可以是用户的input),需要去更新状态，也就是我们的Actions.·这不就是上面的流程图了吗?</p><p><strong>多用户状态管理</strong></p><p>Vue已经帮我们做好了单个界面的状态管理,但是如果是多个界面呢?</p><ul><li>多个试图都依赖同一个状态(一个状态改了,多个界面需要进行更新)</li><li>不同界面的Actions都想修改同一个状态( Home.vue需要修改, Profile.vue也需要修改这个状态)也就是说对于某些状态(状态1&#x2F;状态2&#x2F;状态3)来说只属于我们某一个试图,但是也有一些状态(状态a&#x2F;状态b&#x2F;状态c)属于多个试图共同想要维护的</li><li>状态1&#x2F;状态2&#x2F;状态3你放在自己的房间中,你自己管理自己用,没问题</li><li>但是状态a&#x2F;状态b&#x2F;状态c我们希望交给一个大管家来统一帮助我们管理! ! !没错, Vuex就是为我们提供这个大管家的工具。</li></ul><p>全局单例模式(大管家)</p><p>我们现在要做的就是将共享的状态抽取出来,交给我们的大管家,统一进行管理。之后,你们每个试图,按照我规定好的规定,进行访问和修改等操作。这就是Vuex背后的基本思想。</p><p>Vuex状态管理图例</p><p><img src="https://vuex.vuejs.org/vuex.png"></p><blockquote><p>注意：</p><ol><li>不要在组件中直接修改state(组件-&gt;state),需要走组件-&gt; action-&gt; mutations-&gt;state修改state，这样devtools可以跟踪到修改，方便调试</li><li>官方是允许直接修改mutations的（即组件-&gt;mutations-&gt;state）</li><li>但mutations中的修改一般是同步操作，异步操作需要通过actions修改，否则Vue的调试工具devtools没有办法跟踪到，不方便调试</li></ol></blockquote><h2 id="6-3-使用Vuex"><a href="#6-3-使用Vuex" class="headerlink" title="6.3 使用Vuex"></a>6.3 使用Vuex</h2><p>以下是使用Vuex的一个小例子,用于改变count值：</p><p>@&#x2F;store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 1.安装插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 2.创建对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法</span><br>    increment (state) &#123;<br>      state.<span class="hljs-property">counter</span>++<br>    &#125;,<br>    decrement (state) &#123;<br>      state.<span class="hljs-property">counter</span>--<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br><br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br><br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;<br><br>  &#125;<br>&#125;)<br><br><span class="hljs-comment">// 3.导出store对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br></code></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addition&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;subtraction&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;router-view/&gt;--&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;我是App组件&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    count () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-property">state</span>.<span class="hljs-property">counter</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    addition () &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">    subtraction () &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;decrement&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>@&#x2F;main.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./App&#x27;</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br><span class="hljs-keyword">import</span> store <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@/store&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-property">config</span>.<span class="hljs-property">productionTip</span> = <span class="hljs-literal">false</span><br><br><span class="hljs-comment">/* eslint-disable no-new */</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  store,<br>  <span class="hljs-attr">components</span>: &#123; <span class="hljs-title class_">App</span> &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span><br>&#125;)<br><br></code></pre></td></tr></table></figure><p><strong>好的,这就是使用Vuex最简单的方式了。</strong></p><p>做一下简单的小节:</p><ol><li><p>提取出一个公共的store对象,用于保存在多个组件中共享的状态</p></li><li><p>将store对象放置在new Vue对象中,这样可以保证在所有的组件中都可以使用到</p></li><li><p>在其他组件中使用store对象中保存的状态即可</p><p>通过this.Sstore.state.属性的方式来访问状态</p><p>通过this.$store.commit(‘mutation中方法)来修改状态</p></li></ol><blockquote><p> 注意事项：</p><ul><li><p>我们通过提交mutation的方式,而非直接改变<code>store.state.count</code></p></li><li><p>这是因为Vuex可以更明确的追踪状态的变化,所以不要直接改变<code>store.state.count</code>的值。</p></li></ul></blockquote><h2 id="6-4-Vuex核心概念"><a href="#6-4-Vuex核心概念" class="headerlink" title="6.4 Vuex核心概念"></a>6.4 Vuex核心概念</h2><h3 id="6-4-1-State及Getters"><a href="#6-4-1-State及Getters" class="headerlink" title="6.4.1 State及Getters"></a>6.4.1 State及Getters</h3><p><strong>State单一状态树</strong></p><p>Vuex提出使用单一状态树，什么是单一状态树呢？</p><ul><li>英文名称是single Source of Truth ,也可以翻译成单一数据源。</li></ul><p>但是,它是什么呢?我们来看一个生活中的例子。</p><ul><li><p>OK,我用一个生活中的例子做一个简单的类比。</p></li><li><p>我们知道,在国内我们有很多的信息需要被记录,比如上学时的个人档案,工作后的社保记录,公积金记录,结婚后的婚姻信息,以及其他相关的户口、医疗、文凭、房产记录等等(还有很多信息)。</p></li><li><p>这些信息被分散在很多地方进行管理,有一天你需要办某个业务时(比如入户某个城市),你会发现你需要到各个对应的工作地点去打印、盖章各种资料信息,最后到一个地方提交证明你的信息无误。</p></li><li><p>这种保存信息的方案,不仅仅低效,而且不方便管理,以及日后的维护也是一个庞大的工作(需要大量的各个部门的人力来维护,当然国家目前已经在完善我们的这个系统了)。</p></li></ul><p>这个和我们在应用开发中比较类似：</p><ul><li>如果你的状态信息是保存到多个Store对象中的, 那么管理和维护将会变得非常困难</li><li>所以Vuex也使用了单一状态树来管理应用层级的全部状态</li><li>单一状态树能够让我们最直接的方式找到某个状态片段，而且在之后的维护和调试中，也可以方便的管理和维护</li></ul><p>关于state和getters一个例子：</p><p>@store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vuex</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br><br><span class="hljs-comment">// 1.安装插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">Vuex</span>)<br><br><span class="hljs-comment">// 2.创建对象</span><br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">students</span>: [<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;kobe&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">37</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;James&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">34</span> &#125;,<br>      &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Nash&#x27;</span>, <span class="hljs-attr">age</span>: <span class="hljs-number">33</span> &#125;<br>    ]<br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;&#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    more20stu (state) &#123; <span class="hljs-comment">// getters内函数第一个参数固定为state，用以从state内获取值</span><br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">students</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">s</span> =&gt;</span> s.<span class="hljs-property">age</span> &gt; <span class="hljs-number">20</span>)<br>    &#125;,<br>    more20stuLength (state, getters) &#123; <span class="hljs-comment">// getters内除了state,第二个可选参数为getters，意味着它可以访问其它getters的数据</span><br>      <span class="hljs-keyword">return</span> getters.<span class="hljs-property">more20stu</span>.<span class="hljs-property">length</span>  <span class="hljs-comment">// 访问另一个getters的数据，并返回其长度</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">modules</span>: &#123;&#125;<br>&#125;)<br><br><span class="hljs-comment">// 3.导出store对象</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> store<br><br></code></pre></td></tr></table></figure><p>@App.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.getters.more20stu&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.getters.more20stuLength&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-2-Mutations"><a href="#6-4-2-Mutations" class="headerlink" title="6.4.2 Mutations"></a>6.4.2 Mutations</h3><p><strong>Mutations</strong></p><p>Vuex的store状态的更新的唯一方式： 提交Mutation</p><p>Mutation主要包括两部分：</p><ul><li><p>字符串事件类型（type）</p></li><li><p>一个回调函数（handler），该回调函数的第一个参数就是state</p></li><li><p>mutation的定义方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-attr">mutations</span>: &#123;<br><span class="hljs-title function_">increment</span>(<span class="hljs-params">state</span>) &#123;<br>state.<span class="hljs-property">count</span>++<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>通过mutation更新</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;addition&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">......</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    addition () &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>) <span class="hljs-comment">// 透过调用mutation中的方法更新</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>Mutation传递参数</strong></p><p>在通过mutation更新数据的时候，有可能我们希望携带一些额外的参数，这些参数被称为是mutation的载荷（payload）</p><p>Mutation中的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">decrement</span>(<span class="hljs-params">state, n</span>) &#123;<br>state.<span class="hljs-property">count</span> -= n<br>&#125;<br>。。。。<br><span class="hljs-attr">decreament</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;decrement&#x27;</span>, <span class="hljs-number">2</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果参数不是一个呢？</p><ul><li><p>比如我们有很多参数需要传递</p></li><li><p>这个时候，我们通常会以对象的形式传递，也就是payload是一个对象</p></li><li><p>这个时候可以再从对象中取出相关的信息</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">changeCount</span>(<span class="hljs-params">state, payload</span>) &#123;<br>state.<span class="hljs-property">count</span> = payload.<span class="hljs-property">count</span><br>&#125;<br><br><span class="hljs-attr">changeCount</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;changeCount&#x27;</span>, &#123; <span class="hljs-title class_">Count</span>: <span class="hljs-number">0</span> &#125;)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>Mutation提交风格</strong></p><p>上面的通过commit进行提交是一种普通的方式，Vue还提供了另外一种风格， 它是一个包含type属性的对象</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(&#123;<br><span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;changeCount&#x27;</span>,<br><span class="hljs-attr">count</span>: <span class="hljs-number">100</span><br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// methods中    </span><br>addCount (count) &#123;<br>      <span class="hljs-comment">// 1.普通的提交对象</span><br>      <span class="hljs-comment">// this.$store.commit(&#x27;incrementCount&#x27;, count)</span><br>      <span class="hljs-comment">// 2. 特殊的提交封装</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(&#123;<br>        <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;incrementCount&#x27;</span>,<br>    payload <span class="hljs-comment">// 此处payload为一个对象</span><br>      &#125;)<br>    &#125;<br><br><span class="hljs-comment">// Mutation中</span><br><span class="hljs-comment">// Mutation中的处理方式是将整个commit的对象作为payload使用，所以代码没有改变，依然如下</span><br><span class="hljs-title function_">changeCount</span>(<span class="hljs-params">state, payload</span>) &#123;<br>    state.<span class="hljs-property">count</span> = payload.<span class="hljs-property">count</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>Mutation的响应规则</strong></p><p>Vuex的store中的state是响应式的，当state中的数据发生改变时，Vue组件会自动更新，这就要求我们必须遵守一些Vuex对应的规则：</p><ul><li><p>提前在store中初始化好所需的属性</p></li><li><p>当给state中的对象新属性时，使用下面的方式：</p><ol><li><p>使用Vue.set(obj, ‘newProp’, 123)</p></li><li><p>用新对象给旧对象重新赋值</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">state.<span class="hljs-property">obj</span> = &#123; ...state.<span class="hljs-property">obj</span>, <span class="hljs-attr">newProp</span>: <span class="hljs-number">123</span> &#125;<br></code></pre></td></tr></table></figure></li></ol></li></ul><p>通过这种方式添加元素，是不能在页面上做到实时响应式的：</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">state</span>.info[&#x27;address&#x27;] = <span class="hljs-string">&quot;Los Angeles&quot;</span><br></code></pre></td></tr></table></figure><p>如果要做到响应式，需要通过这种方式：</p><figure class="highlight pf"><table><tr><td class="code"><pre><code class="hljs pf">// 添加<br>Vue.<span class="hljs-built_in">set</span>(<span class="hljs-keyword">state</span>.info, &#x27;address&#x27;, &#x27;L<span class="hljs-keyword">os</span> Angeles&#x27;)<br>// 删除<br>Vue.delete(<span class="hljs-keyword">state</span>.info, &#x27;age&#x27;)<br></code></pre></td></tr></table></figure><p>通常情况下，Vuex要求我们mutation中的方法必须是同步方法</p><ul><li>主要的原因是当我们使用devtools时，devtools可以帮助我们不做mutation的快照</li><li>但是如果是异步操作，那么devtools将不能很好的最终这个操作什么时候完成</li></ul><p>我们强调，不要在mutation中进行异步操作</p><ul><li>但是某些情况，我们确实希望在Vuex中进行一些异步操作，比如网络请求</li><li>这事就需要使用action来代替mutation进行异步操作</li></ul><h3 id="6-4-3-Actions"><a href="#6-4-3-Actions" class="headerlink" title="6.4.3 Actions"></a>6.4.3 Actions</h3><p>来一段代码的例子吧：</p><p>@&#x2F;store&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">...<br><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">info</span>: <span class="hljs-string">&#x27;kobe&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法</span><br>    updateInfo (state) &#123;<br>      state.<span class="hljs-property">info</span> = <span class="hljs-string">&#x27;James&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    <span class="hljs-comment">// context: 上下文</span><br>    aUpdateInfo (context, payload) &#123;<br>      <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(payload)<br>        context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateInfo&#x27;</span>)<br>      &#125;)<br>    &#125;<br>  &#125;<br>  ...<br></code></pre></td></tr></table></figure><p>@&#x2F;app.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.state.info&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateInfo&quot;</span>&gt;</span>change<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;我是App组件&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    updateInfo () &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;aUpdateInfo&#x27;</span>, <span class="hljs-string">&#x27;我是payload&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="6-4-4-Module"><a href="#6-4-4-Module" class="headerlink" title="6.4.4 Module"></a>6.4.4 Module</h3><p>Module是模块的意思,为什么在Vuex中我们要使用模块呢？</p><ul><li>Vue使用单一状态树,那么也意味着很多状态都会交给Vuex来管理.</li><li>当应用变得非常复杂时,store对象就有可能变得相当壁肿.</li></ul><p>为了解决这个问题, Vuex允许我们将store分割成模块(Module),而每个模块拥有自己的state, mutation.action, getters等</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuex</span>.<span class="hljs-title class_">Store</span>(&#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">info</span>: <span class="hljs-string">&#x27;kobe&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    <span class="hljs-comment">// 方法</span><br>    increment (state) &#123;<br>      state.<span class="hljs-property">counter</span>++<br>    &#125;,<br>    decrement (state) &#123;<br>      state.<span class="hljs-property">counter</span>--<br>    &#125;,<br>    incrementCount (state, count) &#123;<br>      state.<span class="hljs-property">counter</span> += count<br>    &#125;,<br>    updateInfo (state) &#123;<br>      state.<span class="hljs-property">info</span> = <span class="hljs-string">&#x27;James&#x27;</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;&#125;,<br>  <span class="hljs-attr">getters</span>: &#123;&#125;,<br>  <span class="hljs-attr">modules</span>: &#123; <span class="hljs-comment">// 将一部分代码才分至moduleA中，在store中引入</span><br>    <span class="hljs-attr">a</span>: moduleA<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// moduleA代码</span><br><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-attr">state</span>: &#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Allen&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">mutations</span>: &#123;<br>    updateName (state, payload) &#123;<br>      state.<span class="hljs-property">name</span> = payload<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">actions</span>: &#123;<br>    aUpdateName (context) &#123; <span class="hljs-comment">// 使用moduleA中的updateName方法</span><br>      context.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateName&#x27;</span>, <span class="hljs-string">&#x27;Yao&#x27;</span>)<br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">getters</span>: &#123;<br>    fullName (state) &#123; <span class="hljs-comment">// moduleA中的getters</span><br>      <span class="hljs-keyword">return</span> state.<span class="hljs-property">name</span> + <span class="hljs-string">&#x27; Team&#x27;</span><br>    &#125;,<br>    fullName2 (state, getters) &#123; <span class="hljs-comment">// 和store一样，moduleA中也可以getter套娃getters</span><br>      <span class="hljs-keyword">return</span> getters.<span class="hljs-property">fullName</span> + <span class="hljs-string">&#x27; has win &#x27;</span><br>    &#125;,<br>    fullName3 (state, getters, rootState) &#123; <span class="hljs-comment">// 可以接收一个额外的rootState参数，用于获取root中的state值</span><br>      <span class="hljs-keyword">return</span> getters.<span class="hljs-property">fullName2</span> + rootState.<span class="hljs-property">counter</span> + <span class="hljs-string">&#x27; times&#x27;</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>----------------App内容: modules中的内容--------<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;$store.state.a.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  # Allen<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.getters.fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  # Allen Team<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.getters.fullName2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  # Allen Team has win<br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$store.getters.fullName3&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>  # Allen Team has win 0 times<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;updateName&quot;</span>&gt;</span>修改名字<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;App&#x27;</span>,</span><br><span class="language-javascript">  data () &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;我是App组件&#x27;</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    updateName () &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">this</span>.<span class="hljs-property">$store</span>.<span class="hljs-title function_">commit</span>(<span class="hljs-string">&#x27;updateName&#x27;</span>, <span class="hljs-string">&#x27;Curry&#x27;</span>)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>notes:</p><p>此处需要注意，当需要访问子模块state中的name时，需要使用<code>$store.state.a.name</code>这种形式，因为实际上，Vuex会把子模块的state作为一个对象放入root的state中，类似｛a: {子模块state内容}｝这种形式</p></blockquote><h3 id="6-4-5-补：Vuex的项目结构"><a href="#6-4-5-补：Vuex的项目结构" class="headerlink" title="6.4.5 补：Vuex的项目结构"></a>6.4.5 补：Vuex的项目结构</h3><p>当我们的Vuex帮助我们管理过多的内容时，好的项目结构可以让我们的代码更清晰：</p><figure class="highlight 1c"><table><tr><td class="code"><pre><code class="hljs 1c">store<br><span class="hljs-string">| index.js  # 我们组装模块并导出store的地方</span><br><span class="hljs-string">| actions.js  # 根级别的action</span><br><span class="hljs-string">| mutation.js  # 根级别的mutation</span><br><span class="hljs-string">| modules</span><br>    <span class="hljs-string">| cart.js  # 购物车模块</span><br>    <span class="hljs-string">| products.js  # 产品模块</span><br></code></pre></td></tr></table></figure><h1 id="7-Axios"><a href="#7-Axios" class="headerlink" title="7 Axios"></a>7 Axios</h1><p><strong>几种方式的对比</strong><br> ajax：<br> 【<strong>优点</strong>：局部更新；原生支持】<br> 【<strong>缺点</strong>：可能破坏浏览器后退功能；嵌套回调】<br> jqueryAjax：<br> 【在原生的ajax的基础上进行了封装；支持jsonp】<br> fetch：<br> 【<strong>优点</strong>：解决回调地狱】<br> 【<strong>缺点</strong>：API 偏底层，需要封装;默认不带Cookie，需要手动添加; 浏览器支持情况不是很友好，需要第三方的ployfill】<br> axios：<br> 【几乎完美】</p><p><strong><code>axios</code>的特点</strong><br> 支持浏览器和node.js<br> 支持promise<br> 能<strong>拦截</strong>请求和响应<br> 能转换请求和响应数据<br> 能<strong>取消</strong>请求<br> 自动转换JSON数据<br> 浏览器端支持<strong>防止CSRF</strong>(跨站请求伪造)</p><p><strong>发送get请求演示</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axois&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,<br>created () &#123;<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://httpbin.org&#x27;</span>).<span class="hljs-title function_">then</span>(<br><span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;<br>).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>发送并发请求</strong></p><p>有时候我们可能需要同时发送两个请求，使用axios.all, 可以放入多个请求的数组</p><p>axios.all([])返回的结果是一个数组，使用axios.spreed可将数组[res1, res2] 展开为res1, res2</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br><span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;app&#x27;</span>,<br><span class="hljs-title function_">created</span>(<span class="hljs-params"></span>) &#123;<br>axios.<span class="hljs-title function_">all</span>(<br>[<br>axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://123.207.32.32:8000/category&#x27;</span>),<br>                  axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,<br>                           &#123;<span class="hljs-attr">params</span>: &#123;<span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;sell&#x27;</span>, <span class="hljs-attr">page</span>: <span class="hljs-number">1</span>&#125;&#125;)<br>              ]<br>         ).<span class="hljs-title function_">then</span>(axios.<span class="hljs-title function_">spread</span>(res1, res2) =&gt; &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res1)<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res2)<br>        &#125;)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>全局配置</strong></p><p>在上面的示例中，我们的BaseURL是固定的</p><ul><li>事实上，在开发中可能很多参数都是固定的</li><li>这个时候我们可以进行一些抽取，也可以利用axios全局配置</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.baseURL</span> = <span class="hljs-string">&#x27;123.207.32.32:8000&#x27;</span><br>axios<span class="hljs-selector-class">.defaults</span><span class="hljs-selector-class">.header</span><span class="hljs-selector-class">.post</span><span class="hljs-selector-attr">[<span class="hljs-string">&#x27;Content-Type&#x27;</span>]</span> = <span class="hljs-string">&#x27;application/x-www-form-urlencoded&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>常见的配置选项</strong></p><ul><li><p>请求地址：url: ‘&#x2F;user’</p></li><li><p>请求类型: method: ‘get’</p></li><li><p>请求路径：baseURL: ‘<a href="http://www.mt.com/api&#39;">http://www.mt.com/api&#39;</a></p></li><li><p>请求前的数据处理: transformRequestL [function(data) {}]</p></li><li><p>请求后的数据处理: transformResponse: [function(data){}]</p></li><li><p>自定义的请求头: headers: [‘x-Requested-With: ‘XMLHttpRequest’]</p></li><li><p>URL查询对象: params: { id: 12 }</p></li><li><p>查询对象序列化的函数： paramsSerializer: function(params) {}</p></li><li><p>request body: data: {key: ‘aa’}</p></li><li><p>超时设置s: timeout: 1000</p></li><li><p>跨域是否带Token: withCredentials: false</p></li><li><p>自定义请求处理: adapter: function(resolve, reject, config){}</p></li><li><p>身份验证信息: auth: { uname: ‘’, pwd: ‘12’ }</p></li><li><p>响应的数据格式json&#x2F;blob&#x2F;document&#x2F;arraybuffer&#x2F;text&#x2F;stream</p><p>responseType: ‘json’</p></li></ul><p><strong>封装axios实例</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><br><span class="hljs-comment">// 基础封装</span><br> <span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span> (config, success, failure) &#123;<br>   <span class="hljs-comment">// 1.创建axios实例</span><br>   <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>     <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>  &#125;)<br><br>  <span class="hljs-comment">// 发送真正的网络请求</span><br>  <span class="hljs-title function_">instance</span>(config).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">success</span>(res)<br>   &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-title function_">failure</span>(err)<br>   &#125;)<br> &#125;<br><br><span class="hljs-comment">// 使用Promise方式封装</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span> (config) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-comment">// 1. 创建axios的实例</span><br>    <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>      <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>       <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>    &#125;)<br>     <span class="hljs-comment">// 发送真正的网络请求</span><br>    <span class="hljs-title function_">instance</span>(config).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(res)<br>    &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>      <span class="hljs-title function_">reject</span>(err)<br>     &#125;)<br>  &#125;)<br>&#125;<br><br><span class="hljs-comment">// 进一步简化</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span> (config) &#123;<br>  <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>  &#125;)<br><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">instance</span>(config)<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">request</span>(&#123;<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/home/multidata&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>拦截器</strong></p><p>axios提供了拦截器，用于我们在发送每次请求或者得到响应后，进行对应的处理</p><p>如何使用呢？</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">request</span> (config) &#123;<br>  <span class="hljs-comment">// 1. 创建axios实例</span><br>  <span class="hljs-keyword">const</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-string">&#x27;http://123.207.32.32:8000&#x27;</span>,<br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">5000</span><br>  &#125;)<br>  <span class="hljs-comment">// 2.拦截器</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">config</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// 请求拦截</span><br>    <span class="hljs-comment">// 1.比如config中的请求不符合服务器要求</span><br>    <span class="hljs-comment">// 2.比如每次发送网络请求时，都希望在界面中显示一个请求图标</span><br>    <span class="hljs-comment">// 3.比如登录时需要携带token</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(config)<br>    <span class="hljs-keyword">return</span> config <span class="hljs-comment">// 请求成功, 记得一定要把数据return出去</span><br>  &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err) <span class="hljs-comment">// 请求失败</span><br>  &#125;)<br>  <span class="hljs-comment">// 响应拦截</span><br>  instance.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res) <span class="hljs-comment">// 响应成功，记得一定要把数据return出去</span><br>    <span class="hljs-keyword">return</span> res.<span class="hljs-property">data</span><br>  &#125;, <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err) <span class="hljs-comment">// 响应失败</span><br>  &#125;)<br><br>  <span class="hljs-comment">// 3. 发送真正的网络请求</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">instance</span>(config)<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Promise及vuex学习</summary>
    
    
    
    <category term="前端" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://www.qintianjun.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（四）- Vue Router</title>
    <link href="http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89/</id>
    <published>2021-06-24T14:03:01.000Z</published>
    <updated>2023-02-24T08:02:43.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="4-Vue-Router"><a href="#4-Vue-Router" class="headerlink" title="4 Vue Router"></a>4 Vue Router</h1><h2 id="4-1-认识路由"><a href="#4-1-认识路由" class="headerlink" title="4.1 认识路由"></a>4.1 认识路由</h2><ul><li><p>说起路由你想起了什么?</p><ul><li>路由是一个网络工程里面的术语。</li><li>路由( routing )就是通过互联的网络把信息从源地址传输到目的地址的活动. –维基百科额</li></ul></li><li><p>啥玩意?没听懂</p><ul><li><p>在生活中,我们有没有听说过路由的概念呢?当然了,路由器嘛.口路由器是做什么的?你有想过吗?</p></li><li><p>路由器提供了两种机制:路由和转送</p><ul><li>路由是决定数据包从来源到目的地的路径</li><li>转送将输入端的数据转移到合适的输出端.</li></ul></li><li><p>路由中有一个非常重要的概念叫路由表.</p><ul><li>路由表本质上就是一个映射表,决定了数据包的指向</li></ul></li></ul></li></ul><p><strong>后端路由阶段</strong></p><ul><li><p>早期的网站开发整个HTML是由服务器进行渲染的</p><ul><li>服务器直接生产渲染好对应的HTML页面，返回给客户端进行展示</li></ul></li><li><p>但是，一个网站，这么多页面服务器如何处理呢?</p><ul><li>一个页面有自己对应的网址，也就是URL</li><li>URL会发送到服务器，服务器会通过正则对该URL进行匹配，并且最后交给一个controller进行处理</li><li>controller进行各种处理， 最终生成HTML或者数据， 返回给前端</li><li>这就完成了一个IO操作</li></ul></li><li><p>上面的这种操作，就是后端路由</p><ul><li>当我们页面中需要请求不同的路径内容时，交给服务器来进行处理，服务器渲染好整个页面，并且将页面返回给客户端</li><li>这种情况下渲染好页面， 不需要单独加载任何的js和css, 可以直接交给浏览器展示，这样也有利于SEO的优化</li></ul></li><li><p>后端路由的缺点</p><ul><li>这个页面的编写都是由后端人员来编写维护的</li><li>另一种情况是前端开发人员想要开发页面，需要学习一门后端语言</li><li>通常情况下HTML代码和后端逻辑代码混在一起，非常混乱</li></ul></li></ul><p><strong>前端路由阶段</strong></p><ul><li>随着Ajax的出现,有了前后端分离的开发模式.</li><li>后端只提供API来返回数据,前端通过Ajax获取数据,并且可以通过JavaScript将数据渲染到页面中.</li><li>这样做最大的优点就是前后端责任的清晰,后端专注于数据上,前端专注于交互和可视化上口并且当移动端(iOS&#x2F;Android)出现后,后端不需要进行任何处理,依然使用之前的一套API即可.</li><li>目前很多的网站依然采用这种模式开发.</li></ul><p><strong>单页面富应用阶段</strong></p><ul><li>其实SPA应用最主要的特点就是在前后端分离的基础上加了一层前端路由</li><li>也就是前端来维护一套路由规则</li><li>前端路由的核心是什么呢？改变URL，但是页面不进行整体的刷新</li></ul><h2 id="4-2-认识vue-router"><a href="#4-2-认识vue-router" class="headerlink" title="4.2 认识vue-router"></a>4.2 认识vue-router</h2><ul><li><p>目前前端流行的三大框架，都有自己的路由实现： Angular的ngRouter,  React的ReactRouter, Vue的vue-router</p></li><li><p>当然，我们的重点是vue-router</p><ul><li>vue-router是vue.js的官方路由插件，它和vue.js是深度集成的，适合用于构建单页面应用</li><li>我们可以访问其<a href="https://router.vurjs.org/zh/">官方网站</a>对齐进行学习</li></ul></li><li><p>vue-router是基于路由和组件的</p><ul><li>路由用于设定访问路径，将路径和组件映射起来</li><li>在vue-router的单页面应用中，页面的路径的改变就是组件的切换</li></ul></li></ul><h2 id="4-3-安装vue-router"><a href="#4-3-安装vue-router" class="headerlink" title="4.3 安装vue-router"></a>4.3 安装vue-router</h2><p>安装和使用vue-router主要有以下步骤:</p><p>因为我们已经学习了webpack,后续开发中我们主要是通过工程化的方式进行开发的.所以在后续,我们直接使用npm来安装路由即可.</p><hr><ul><li><p>步骤一:安装vue-router</p><p><code>npm install vue-router --save</code></p></li><li><p>步骤二:在模块化工程中使用它(因为是一个插件,所以可以通过Vue.use)来安装路由功能</p><ul><li>第一步:导入路由对象,并且调用Vue.use(VueRouter)</li><li>第二步:创建路由实例,并且传入路由映射配置</li><li>第三步:在Vue实例中挂载创建的路由实例</li></ul></li></ul><p>router&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 配置路由相关信息</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">VueRouter</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><br><span class="hljs-comment">// 1. 通过Vue.use(插件)，安装插件</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-comment">// 2. 创建VueRouter对象</span><br><span class="hljs-keyword">const</span> routes = [<br><br>]<br><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> <span class="hljs-title class_">VueRouter</span>(&#123;<br>  <span class="hljs-comment">// 配置路由和组件之间的映射关系</span><br>  routes<br>&#125;)<br><br><span class="hljs-comment">// 3.将router对象传入到Vue实例</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router<br></code></pre></td></tr></table></figure><p>main.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./router&#x27;</span><br>。。。<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  router,<br>  store,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> <span class="hljs-title function_">h</span>(<span class="hljs-title class_">App</span>)<br>&#125;).$mount(<span class="hljs-string">&#x27;#app&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="4-4-使用vue-router的步骤"><a href="#4-4-使用vue-router的步骤" class="headerlink" title="4.4 使用vue-router的步骤"></a>4.4 使用vue-router的步骤</h2><ol><li><p>创建路由组件</p><p>home.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是首页内容，嘿嘿嘿<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;home&quot;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>about.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;about&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是关于<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是关于内容，哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;about&quot;</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置路由映射：组件和路径映射关系</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Home</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/Home&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">About</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;../components/About&#x27;</span><br><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(<span class="hljs-title class_">VueRouter</span>)<br><br><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure></li><li><p>使用路由：通过<router-link>和<router-view></p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/about&quot;</span>&gt;</span>关于<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><code>router-link</code>：该标签是一个vue-router中已经内置的组件，它会被渲染成一个<a>标签</li><li><code>router-view</code>： 该标签会根据当前的路径，动态渲染出不同的组件</li></ul><p>在路由切换时，切换的是<code>&lt;router-view&gt;</code>挂载的组件，其他内容不会发生改变</p><p><strong>将默认的hash模式改为history模式</strong></p><p>我们前面说过改变路径的方式有两种:</p><ul><li>URL的hash</li><li>HTML5的history</li><li>默认情况下，路径改变使用的是URL的hash</li></ul><p>如果希望使用HTML的history模式，在vue-router的配置中加入如下配置即可：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs ejavascript">// router/index.js<br>const router = new VueRouter(&#123;<br>  // 配置路由和组件之间的映射关系<br>  routes,<br>  mode: &#x27;history&#x27;  // 指定使用history模式<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>router-link的补充</strong></p><ul><li>在前面的<code>&lt;router-link&gt;</code>中，我们只用了一个属性：<code>to</code>,  用于跳转的路径</li><li><code>&lt;router-link&gt;</code>还有一些其他属性:<ul><li>tag: tag可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件，比如上面的代码会被渲染成一个<code>&lt;li&gt;</code>，而不是<code>&lt;a&gt;</code></li><li>replace: replace不会留下history记录， 所以指定replace的情况下，后退键不能反悔到上一个页面中</li><li>active-class： 当<code>&lt;router-link&gt;</code>对应的路由匹配成功时，会自动给当前元素设置一个router-link-active的class, 设置active-class可以修改默认的名称<ul><li>在进行高亮显示的导航菜单或者底部tabbar时，会使用到该类</li><li>但是通常不会修改类的属性，会直接使用默认的<code>router-link-active</code>即可</li></ul></li></ul></li></ul><h2 id="4-5-动态路由"><a href="#4-5-动态路由" class="headerlink" title="4.5 动态路由"></a>4.5 动态路由</h2><p>在某些情况下，一个页面的path路径可能是不确定的，比如我们进入用户界面时，希望是如下的路径：</p><ul><li>&#x2F;user&#x2F;aaaa 或 &#x2F;user&#x2F;bbbb</li><li>除了有前面的&#x2F;user之外，后面还跟上了用户的ID</li><li>这种path和component的匹配关系，我们称之为动态路由（也是路由传递数据的一种方式）</li></ul><p>router&#x2F;index.js</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>&#125;<br></code></pre></td></tr></table></figure><p>app.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;/user/ + userId&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure><p>user.vue</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用户界面<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是用户的相关信息，嘿嘿嘿<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>userId: &#123;&#123;userId&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    userId () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">userId</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>显示效果：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200212220917826.png" alt="image-20200212220917826"></p><h2 id="4-6-vue-router打包文件及路由懒加载"><a href="#4-6-vue-router打包文件及路由懒加载" class="headerlink" title="4.6 vue-router打包文件及路由懒加载"></a>4.6 vue-router打包文件及路由懒加载</h2><p><strong>vue-router打包文件解析</strong></p><p>使用<code>npm run build</code>命令可以使文件打包，打包完成后会在当前目录下生成一个dist目录</p><p>在dist目录下有一个js目录，内容如下：</p><figure class="highlight dts"><table><tr><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">appXXX:</span> 当前应用程序开发的所有代码（业务代码）<br><span class="hljs-symbol">manifestXXX:</span> 为了打包的代码做底层支撑<br>vendorXXX： 第三方提供的包，比如vue<span class="hljs-keyword">/vue-router/</span>axios<br></code></pre></td></tr></table></figure><p><strong>路由懒加载</strong></p><p>官方解释：</p><ul><li>当打包构建应用时，JavaScript包会变得非常大，影响页面加载</li><li>如果我们能把不同的路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就更加高效了</li></ul><p>官方在说什么呢：</p><ul><li>首先我们知道路由中通常会定义很多不同的页面</li><li>这个页面最后被打包在哪里呢？一般情况下是放在一个js文件中</li><li>但是，页面这么多，放在一个js文件中，必然会造成这个页面非常的哒</li><li>如果我们一次性从服务器请求下来这个页面，可能需要花费一定的时间，甚至用户的电脑上海出现了短暂的空白情况</li><li>如何避免这种情况呢？使用路由懒加载就可以了</li></ul><p>路由懒加载做了什么？</p><ul><li>路由懒加载主要作用个就是将路由对应的组件打包成一个个的js代码块</li><li>只有在这个路由被访问到的时候，才加载对应文件</li></ul><p><strong>路由懒加载的效果</strong></p><p>在使用懒加载之前，引用后直接使用：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">Home</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">About</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-title class_">User</span><br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>打包出来的文件：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200212225125036.png" alt="image-20200212225125036"></p><p>采用懒加载方式编写：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> routes = [<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>,<br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;/home&#x27;</span><br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Home&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/about&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/About&#x27;</span>)<br>  &#125;,<br>  &#123;<br>    <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>    <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/User&#x27;</span>)<br>  &#125;<br>]<br></code></pre></td></tr></table></figure><p>打包出来的文件：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200212225838940.png" alt="image-20200212225838940"></p><p><strong>懒加载的几种方式</strong></p><p>方式一：结合Vue的异步组件和Webpack的代码分析：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = resolve =&gt; &#123; <span class="hljs-built_in">require</span>.<span class="hljs-title function_">ensure</span>([<span class="hljs-string">&#x27;../componts/Home.vue&#x27;</span>], <span class="hljs-function">() =&gt;</span> <br>&#123; <span class="hljs-title function_">resolve</span>(<span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../components/Home.Vue&#x27;</span>)) &#125;) &#125;;<br></code></pre></td></tr></table></figure><p>（代码冗长繁琐不推荐）</p><p>方式二： AMD写法</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">About</span> = resolve =&gt; <span class="hljs-built_in">require</span>([<span class="hljs-string">&#x27;../components/About.vue&#x27;</span>], resolve);<br></code></pre></td></tr></table></figure><p>方式三：在ES6中，我们可以有更加简单的写法来组织Vue异步组件和WebPack的代码分割</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">Home</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Home.vue&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="4-7-路由嵌套"><a href="#4-7-路由嵌套" class="headerlink" title="4.7 路由嵌套"></a>4.7 路由嵌套</h2><p>嵌套路由是一个很常见的功能</p><ul><li>比如在home中，我们希望通过<code>/home/news</code>和<code>/home/message</code>访问一些内容</li><li>一个路径映射一个组件，访问这两个路径也会分别渲染两个组件</li></ul><p><strong>实现嵌套路由的两个步骤</strong></p><ul><li><p>创建对应的子组件，并且在路由映射中配置对应的子路由</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/home&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Home&#x27;</span>),<br>  <span class="hljs-attr">children</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;news&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/HomeNews&#x27;</span>)<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;message&#x27;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/HomeMessage&#x27;</span>)<br>    &#125;<br>  ]<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在组件内部使用<code>&lt;router-view&gt;</code>标签</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;home&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是首页<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是首页内容，嘿嘿嘿<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/news&quot;</span>&gt;</span>新闻<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">&quot;/home/message&quot;</span>&gt;</span>消息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-8-vue-router路由的参数传递"><a href="#4-8-vue-router路由的参数传递" class="headerlink" title="4.8 vue-router路由的参数传递"></a>4.8 vue-router路由的参数传递</h2><p><strong>传递参数的方式</strong></p><p>传递参数主要有两种类型：params和query</p><p><em><strong>params的类型</strong></em></p><ul><li><p>配置路由格式： <code>/router/:id</code></p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/User&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递的方式： 在path后面跟上对应的值</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;/user/ + userId&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>用户<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>传递后形成的路径：<code>/route/123</code>, <code>/router/abc</code></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是用户界面<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是用户的相关信息，嘿嘿嘿<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>userId: &#123;&#123;userId&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;User&#x27;</span>,</span><br><span class="language-javascript">  <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">    userId () &#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">$route</span>.<span class="hljs-property">params</span>.<span class="hljs-property">userId</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><em><strong>query的类型</strong></em></p><ul><li><p>配置路由格式：<code>/router</code>，也就是普通配置</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/profile&#x27;</span>,<br>  <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Profile&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>传递的方式：对象中使用query的key作为传递方式</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">:to</span>=<span class="hljs-string">&quot;&#123;path: &#x27;profile&#x27;, query: &#123;name: &#x27;freedom&#x27;, age: 18&#125;&#125;&quot;</span> <span class="hljs-attr">tag</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>档案<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>传递后形成的路径：<code>/router?id=123,/router?id=abc</code></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我的档案<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$route.query.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;$route.query.age&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>$route和$router的区别</strong></p><ul><li>$router为VueRouter实例，想要导航到不同URL，则使用$router.push方法</li><li>$route为当前router跳转对象，里面可以获取name、path、query、params等</li></ul><h2 id="4-9-导航守卫"><a href="#4-9-导航守卫" class="headerlink" title="4.9 导航守卫"></a>4.9 导航守卫</h2><p>我们来考虑一个需求:在一个SPA应用中,如何改变网页的标题呢?</p><ul><li>网页标题是通过<title>来显示的,但是SPA只有一个固定的HTML,切换不同的页面时,标题并不会改变</li><li>但是我们可以通过JavaScript来修改<title>的内容.window.document.title &#x3D;新的标题.</li><li>那么在Vue项目中,在哪里修改?什么时候修改比较合适呢?</li></ul><p>普通的修改方式:</p><ul><li><p>我们比较容易想到的修改标题的位置是每一个路由对应的组件vue文件中.</p></li><li><p>通过mounted声明周期函数,执行对应的代码进行修改即可.</p></li><li><p>但是当页面比较多时,这种方式不容易维护(因为需要在多个页面执行类似的代码).</p></li></ul><p>有没有更好的办法呢？使用导航守卫即可</p><ul><li>vue-router提供的导航守卫主要用来监听监听路由的进入和离开的</li><li>vue-router提供了beforeEach和afterEach的钩子函数，他们会在路由即将改变钱和改变后触发</li></ul><p>我们可以利用beforeEach来完成标题的修改</p><ul><li><p>首先，我们可以在钩子当中定义一些标题，可以利用meta来定义</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>   <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/user/:userId&#x27;</span>,<br>   <span class="hljs-attr">meta</span>: &#123;<br>     <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;用户&#x27;</span><br>   &#125;,<br>   <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/User&#x27;</span>)<br> &#125;,<br> &#123;<br>   <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/profile&#x27;</span>,<br>   <span class="hljs-attr">meta</span>: &#123;<br>     <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;档案&#x27;</span><br>   &#125;,<br>   <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&#x27;../components/Profile&#x27;</span>)<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>其次，利用个导航守卫修改我们的标题</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">router.<span class="hljs-title function_">beforeEach</span>(<span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = to.<span class="hljs-property">meta</span>.<span class="hljs-property">title</span><br>  <span class="hljs-title function_">next</span>()<br>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p>notes: 导航钩子的三个参数解析</p><ul><li>to: 即将要进入的目标的路由对象</li><li>from: 当前导航即将要离开的路由对象</li><li>next：调用该方法后，才能进入下一个钩子</li></ul></blockquote></li></ul><p><strong>导航守卫补充</strong></p><p>补充一： 如果是后置钩子，也就是afterEach，不需要主动调用next()</p><p>补充二： 上面我们使用的导航守卫，被称之为全局守卫，除此之外还有：</p><ul><li>路由独享的守卫</li><li>组件内的守卫</li></ul><p>具体内容详见官网说明：<a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#%E7%BB%84%E4%BB%B6%E5%86%85%E7%9A%84%E5%AE%88%E5%8D%AB">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html#组件内的守卫</a></p><h2 id="4-9-keep-alive相关问题"><a href="#4-9-keep-alive相关问题" class="headerlink" title="4.9 keep-alive相关问题"></a>4.9 keep-alive相关问题</h2><p><code>keep-alive</code>是Vue的一个内置组件，可以保留组件的状态，当组件被切换时不被销毁，避免重新渲染</p><p><code>router-view</code>也是一个组件，如果直接被包在keep-alive里面，所有路径匹配到的视图组件都会被缓存</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">keep-alive</span> <span class="hljs-attr">exclude</span>=<span class="hljs-string">&quot;profile,user&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">keep-alive</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p> 注：如果想排除某些组件，可以在keep-alive后面加上exclude参数，这样对应的组件就不会被缓存了</p></blockquote><p>keep-alive两个非常重要的属性：</p><ul><li>include: 字符串或者正则表达式，只有匹配的组件会被缓存</li><li>exclude： 字符串或正则表达式，任何匹配的组件都不会被缓存</li></ul><h2 id="4-10-TabBar的实现"><a href="#4-10-TabBar的实现" class="headerlink" title="4.10 TabBar的实现"></a>4.10 TabBar的实现</h2><h3 id="4-10-1-大致实现思路"><a href="#4-10-1-大致实现思路" class="headerlink" title="4.10.1 大致实现思路"></a>4.10.1 大致实现思路</h3><ol><li>如果在下方有一个单独的TabBar组件,你如何封装</li></ol><ul><li><p>自定义TabBar组件,在APP中使用</p></li><li><p>让TabBar出于底部,并且设置相关的样式</p></li></ul><ol start="2"><li>TabBar中显示的内容由外界决定</li></ol><ul><li><p>定义插槽</p></li><li><p>flex布局平分TabBar</p></li></ul><ol start="3"><li>自定义TabBarltem ,可以传入图片和文字</li></ol><ul><li><p>定义TabBarltem ,并且定义两个插槽:图片、文字。</p></li><li><p>给两个插槽外层包装div,用于设置样式。</p></li><li><p>填充插槽,实现底部TabBar的效果</p></li></ul>]]></content>
    
    
    <summary type="html">Vue Router相关知识整理</summary>
    
    
    
    <category term="前端" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://www.qintianjun.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（三）-前端模块化</title>
    <link href="http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2021-06-24T14:02:08.000Z</published>
    <updated>2023-02-24T08:02:28.643Z</updated>
    
    <content type="html"><![CDATA[<h1 id="3-前端模块化"><a href="#3-前端模块化" class="headerlink" title="3 前端模块化"></a>3 前端模块化</h1><h2 id="3-1-ES模块化的导入和导出"><a href="#3-1-ES模块化的导入和导出" class="headerlink" title="3.1 ES模块化的导入和导出"></a>3.1 ES模块化的导入和导出</h2><p><strong>export基本使用</strong></p><p>export指令用于导出变量，比如下面的代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;freedom&#x27;</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">let</span> height = <span class="hljs-number">1.88</span><br></code></pre></td></tr></table></figure><p>上面的代码还有另一种写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// info.js</span><br><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;freedom&#x27;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">let</span> height = <span class="hljs-number">1.88</span><br><br><span class="hljs-keyword">export</span> &#123;name, age, height&#125;<br></code></pre></td></tr></table></figure><p>在需要使用的地方导入：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;name, age, height&#125; <span class="hljs-keyword">from</span>  <span class="hljs-string">&#x27;./info.js&#x27;</span><br></code></pre></td></tr></table></figure><p><strong>export default</strong></p><p>某些情况下，一个模块中包含某个功能，我们并不希望给这个功能命名，而且让导入者自己来命名</p><ul><li><p>这个时候就可以使用export default</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// info.js</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;default function&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>我们来到main.js中，这样使用就可以了</p><ul><li>这里myFunc是我自己命名的，你可以根据需要命名它对应的名字</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> myFunc <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br><br><span class="hljs-title function_">myFunc</span>()<br></code></pre></td></tr></table></figure><ul><li><p>另外要注意：</p><ul><li><p>export default在同一个模块中，不允许同时存在多个。</p></li><li><p>但是通常情况下我们需要给*起一个别名，方便后续使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> info <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(info.<span class="hljs-property">name</span>, info.<span class="hljs-property">age</span>, info.<span class="hljs-property">height</span>);<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="3-2-WebPack"><a href="#3-2-WebPack" class="headerlink" title="3.2 WebPack"></a>3.2 WebPack</h2><h3 id="3-2-1-前模块化"><a href="#3-2-1-前模块化" class="headerlink" title="3.2.1 前模块化"></a>3.2.1 前模块化</h3><ul><li>在前面学习中,我已经用了大量的篇幅解释了为什么前端需更模块化。而且也提到了目前使用前端模块化的一些方案: AMD. CMD. CommonJs, ES6.</li><li>在ES6之前,我们要想进行模块化开发,就必须借助于其他的工具,让我们可以进行模块化开发,并且在通过模块化开发完成了项目后,还需要处理模块间的各种依赖,并且将其进行整合打包。</li><li>而webpack其中一个核心就是让我们可能进行模块化开发,并且会帮助我们处理模块间的依赖关系,而且不仅仅是JavaScript文件,我们的CSS,图片、json文件等等在webpack中都可以被当做模块来使用(在后续我们会看到)。</li></ul><p>这就是webpack中模块化的概念</p><p><strong>打包如何理解呢</strong></p><ul><li>理解了webpack可以帮助我们进行模块化,并且处理模块间的各种复杂关系后,打包的概念就非常好理解了.</li><li>就是将webpack中的各种资源模块进行打包合并成一个或多个包(Bundle).</li><li>并且在打包的过程中,还可以对资源进行处理比如压缩图片,将scss转成css,将ES6语法转成ES5语法,将TypeScript转成JavaScript等等操作。</li><li>但是打包的操作似乎grunt&#x2F;gulpt可以帮助我们完成,它们有什么不高呢</li></ul><p><strong>WebPack模块打包</strong></p><p>WebPack为了可以正常运行，必须依赖node环境，node环境为了可以正常执行很多代码，必须包含各种各样依赖的包，npm工具是node的包管理工具。</p><h3 id="3-2-2-WebPack安装"><a href="#3-2-2-WebPack安装" class="headerlink" title="3.2.2 WebPack安装"></a>3.2.2 WebPack安装</h3><p>安装WebPack首先需要安装Node.js,Node.js自带了软件包管理工具npm</p><p>查看自己的node版本：<code>node -v</code></p><p>全局安装WebPack（这里我们先指定3.6版本）</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install webpack@<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">9</span> -g<br></code></pre></td></tr></table></figure><p>局部安装WebPack(后续才需要)</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cd</span> 对应的目录<br><span class="hljs-attribute">npm</span> install webpack@<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span> --save-dev<br></code></pre></td></tr></table></figure><p>–save-dev 是开发时依赖，项目打包后不需要继续使用的</p><p>为什么全局安装后，还需要局部安装呢？</p><ul><li>在终端直接执行WebPack命令，使用的全局安装的WebPack</li><li>当在package.json中定义了scripts时，其中包含了WebPack命令，那么使用的是局部WebPack</li></ul><h3 id="3-2-3-WebPack简单使用"><a href="#3-2-3-WebPack简单使用" class="headerlink" title="3.2.3 WebPack简单使用"></a>3.2.3 WebPack简单使用</h3><p>目录结构如下：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200206145331311.png" alt="image-20200206145331311"></p><p>文件内容如下：</p><p>info.js:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;freedom&#x27;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> age = <span class="hljs-number">18</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> height = <span class="hljs-number">1.80</span>;<br><br></code></pre></td></tr></table></figure><p>mathUtils.js:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> num1 + num2<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">num1, num2</span>) &#123;<br>    <span class="hljs-keyword">return</span> num1 * num2<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    add,<br>    mul<br>&#125;<br><br></code></pre></td></tr></table></figure><p>在main.js中使用上述两个文件中内容：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> &#123;add, mul&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./mathUtils.js&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">add</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">mul</span>(<span class="hljs-number">20</span>, <span class="hljs-number">30</span>));<br><br><span class="hljs-keyword">import</span> &#123;name, age, height&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./info.js&#x27;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(height);<br></code></pre></td></tr></table></figure><p>此时在命令行使用<code>webpack ./src/main.js ./dist/bundle.js</code>命令，将上述文件打包到dist目录下的bundle.js文件中</p><figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">D:\vue\vue_learning\webpack&gt;webpack ./src/main.js ./dist/bundle.js<br>Hash: 259c6b56d630dacf141e<br>Version: webpack 3.6.0<br><span class="hljs-keyword">Time:</span> 60ms<br>    Asset     Size  Chunks             Chunk Names<br>bundle.js  3.58 kB       0  [emitted]  main<br></code></pre></td></tr></table></figure><p>如上所示，表明打包成功。</p><p>在index.html中引入bundle.js:</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>。。。。。。<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以在页面控制台看到之前main.js中引入的代码已经正确执行：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200206150133931.png" alt="image-20200206150133931"></p><p><strong>JS文件打包</strong></p><p>现在的js文件中使用了模块化的方式进行开发,他们可以直接使用吗?不可以。</p><ul><li>因为如果直接在index.htmlsl入这两个js文件,浏览器并不识别其中的模块化代码。</li><li>另外,在真实项目中当有许多这样的js文件时,我们一个个引用非常麻烦,并且后期非常不方便对它们进行管理。</li></ul><p>我们应该怎么做呢?使用webpack工具,对多个js文件进行打包。</p><ul><li>我们知道, webpack就是一个模块化的打包工具,所以它支持我们代码中写模块化,可以对模块化的代码进行处理。(如何处理的,待会儿在原理中,我会讲解)</li><li>另外,如果在处理完所有模块之间的关系后,将多个js打包到一个js文件中,引入时就变得非常方便了。OK,如何打包呢?使用webpack的指令即可</li></ul><p><strong>局部安装WebPack</strong></p><p>目前,我们使用的webpack是全局的webpack,如果我们想使用局部来打包呢?</p><ul><li><p>因为一个项目往往依赖特定的webpack版本,全局的版本可能很这个项目的webpack版本不一致,导出打包出现问题。</p><p>所以通常一个项目,都有自己局部的webpack.</p></li></ul><p>第一步, 项目中需要安装自己局部的webpack</p><ul><li><p>这里我们让局部安装webpack3.6.0</p></li><li><p>Vue CL13中已经升级到webpack4 ,但是它将配置文件隐藏了起来,所以查看起来不是很方便</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install webpack@<span class="hljs-number">3</span>.<span class="hljs-number">6</span>.<span class="hljs-number">0</span> --save-dev<br></code></pre></td></tr></table></figure></li></ul><p>第二步，通过<code>node_moduels/.bin/webpack</code>启动WebPack打包</p><figure class="highlight subunit"><table><tr><td class="code"><pre><code class="hljs subunit">D:\vue\vue_learning\webpack&gt;node_modules\.bin\webpack<br>Hash: 259c6b56d630dacf141e<br>Version: webpack 3.6.0<br><span class="hljs-keyword">Time:</span> 54ms<br>    Asset     Size  Chunks             Chunk Names<br>bundle.js  3.58 kB       0  [emitted]  main<br>   [0] ./src/main.js 212 bytes &#123;0&#125; [built]<br>   [1] ./src/mathUtils.js 156 bytes &#123;0&#125; [built]<br>   [2] ./src/info.js 85 bytes &#123;0&#125; [built]<br><br></code></pre></td></tr></table></figure><p><strong>package.json中定义启动</strong></p><p>但是,每次执行都敲这么一长串有没有觉得不方便呢?</p><ul><li>ок,我们可以在package.json的scripts中定义自己的执行脚本。</li></ul><p>package.json中的scripts的脚本在执行时,会按照一定的顺序寻找命令对应的位置。</p><ul><li>首先,会寻找本地的node_modules&#x2F;.bin路径中对应的命令。</li><li>如果没有找到,会去全局的环境变量中寻找。</li><li>如何执行我们的build指令呢?<code>npm run build</code></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;meet_webpack&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1.0.0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;index.js&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;test&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;webpack&quot;</span> # 这里，npm会在scripts找build对应的命令<br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ISC&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;devDependencies&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;webpack&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.6.0&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="3-2-4-loader"><a href="#3-2-4-loader" class="headerlink" title="3.2.4 loader"></a>3.2.4 loader</h3><p><strong>什么是loader</strong></p><p>loader是webpack中一个非常核心的概念。</p><ul><li>webpack用来做什么呢?<ul><li>在我们之前的实例中,我们主要是用webpack来处理我们写的js代码,并且webpack会自动处理js之间相关的依赖。</li><li>但是,在开发中我们不仅仅有基本的js代码处理,我们也需要加载css、图片,也包括一些高级的将ES6转成ES5代码,将TypeScript转成ES5代码,将scss, less转成css ,将jsx. .vue文件转成js文件等等</li><li>对于webpack本身的能力来说,对于这些转化是不支持的</li></ul></li></ul><p>那怎么办呢?给webpack扩展对应的loader就可以啦。</p><p><strong>loader使用过程</strong></p><ul><li><p>步骤一:通过npm安装需要使用的loader</p></li><li><p>步骤二:在webpack.config.js中的modules关键字下进行配置</p></li></ul><p>大部分loader我们都可以在webpack的官网中找到,并且学习对应的用法</p><p><strong>css文件处理— style-loader</strong></p><p>我们来安装style-loader：</p><p><code>npm instatt -save-dev style-loader</code></p><p>注意: style-loader需要放在css-loader的前面。</p><ul><li>疑惑:不对吧?按照我们的逻辑,在处理css文件过程中，应该是css-loader先加载css文件,再由style-oader来进行进一步的处理,为什么会将style-loader放在前面呢?</li></ul><ul><li>答案:这次因为webpack在读取使用的loader的过程中,是按照从右向左的顺序读取的。</li></ul><p>目前, <code>webpack.config.js</code>的全部配置如下:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-comment">// 入口: 可以是字符串/数组/对象，这里我们的入口只有一个，</span><br>    <span class="hljs-comment">// 所以写一个字符串即可</span><br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/main.js&#x27;</span>,<br>    <span class="hljs-comment">// 出口：通常是一个对象，里面至少要包含两个重要属性, path 和filename</span><br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;dist&#x27;</span>),<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.css$/</span>,<br>                <span class="hljs-comment">// css-loader只负责将css文件进行加载</span><br>                <span class="hljs-comment">// style-loader负责将样式加载到DOM中</span><br>                <span class="hljs-comment">// 使用多个loader时，是从右向左读的</span><br>                <span class="hljs-attr">use</span>: [<span class="hljs-string">&#x27;style-loader&#x27;</span>, <span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>less文件处理</strong></p><p>继续在官方中查找,我们会找到ess-loader相关的使用说明.和css文件类似：</p><ul><li><p>首先,还是需要安装对应的loader</p><ul><li><p>注意:我们这里还安装了less ,因为webpack会使用less对less文件进行编译</p><p><code>npe install -save-dev less-loader tess</code></p></li></ul></li><li><p>其次,修改对应的配置文件</p><ul><li>添加一个rules选项,用于处理less文件</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>......<br>        &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.less$/</span>,<br>            <span class="hljs-attr">use</span>: [<br>                &#123;<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;style-loader&quot;</span> <span class="hljs-comment">// creates style nodes from JS strings</span><br>                &#125;, <br>                &#123;<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;css-loader&quot;</span> <span class="hljs-comment">// translates CSS into CommonJS</span><br>                &#125;, <br>                &#123;<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;less-loader&quot;</span> <span class="hljs-comment">// compiles Less to CSS</span><br>                &#125;<br>            ]<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>图片文件处理</strong></p><p>和上面类似，使用npm命令安装相关包：</p><figure class="highlight q"><table><tr><td class="code"><pre><code class="hljs q">npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> url-loader <span class="hljs-comment">//对于小于指定大小的会由url-loader编译为base64字符串，后有说明</span><br>npm install --<span class="hljs-built_in">save</span>-<span class="hljs-built_in">dev</span> file-loader <span class="hljs-comment">//对于大于指定大小的会由file-loader作为文件引入</span><br></code></pre></td></tr></table></figure><p>只有在<code>webpack.config.js</code>中新增配置:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">output</span>: &#123;<br>。。。。。。<br>        <span class="hljs-attr">publicPath</span>: <span class="hljs-string">&#x27;dist/&#x27;</span>  # 指定文件相对路径的起始目录<br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [<br>            。。。。。。<br>            &#123;<br>                <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,<br>                <span class="hljs-attr">use</span>: [<br>                    &#123;<br>                        <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>                        <span class="hljs-attr">options</span>: &#123;<br>                            <span class="hljs-comment">// 当加载的图片小于limit时，会将图片编译成base64字符串形式</span><br>                            <span class="hljs-comment">// 当加载的图片大于limit时，需要使用file-loader模块进行处理</span><br>                            <span class="hljs-attr">limit</span>: <span class="hljs-number">8192</span><br>                        &#125;<br>                    &#125;<br>                ]<br>            &#125;<br>        ]<br>    &#125;<br></code></pre></td></tr></table></figure><ul><li><p>我们发现webpack自动帮助我们生成一个非常长的名字</p><ul><li><p>这是一个32位hash值,目的是防止名字重复</p></li><li><p>但是,真实开发中,我们可能对打包的图片名字有一定的要求</p></li><li><p>比如,将所有的图片放在一个文件夹中,跟上图片原来的名称,同时也防止重复</p><p>最终正确配置：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(png|jpg|gif)$/</span>,<br>    <span class="hljs-attr">use</span>: [<br>        &#123;<br>            <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;url-loader&#x27;</span>,<br>            <span class="hljs-attr">options</span>: &#123;<br>                <span class="hljs-comment">// 当加载的图片小于limit时，会将图片编译成base64字符串形式</span><br>                <span class="hljs-comment">// 当加载的图片大于limit时，需要使用file-loader模块进行处理</span><br>                <span class="hljs-attr">limit</span>: <span class="hljs-number">8192</span>,<br>                <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;img/[name].[hash:8].[ext]&#x27;</span> <span class="hljs-comment">//定义命名规则</span><br>            &#125;<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li><li><p>所以,我们可以在options中添加上如下选项:</p><ul><li>img :文件要打包到的文件夹</li><li>name :获取图片原来的名字,放在该位置</li><li>hash:8:为了防止图片名称中突,依然使用hash ,但是我们只保留8位Dext:使用图片原来的扩展名</li></ul></li><li><p>但是,我们发现图片并没有显示出来,这是因为图片使用的路径不正确</p><ul><li>默认情况下, webpack会将生成的路径直接返回给使用者</li><li>但是,我们整个程序是打包在dist文件夹下的,所以这里我们需要在路径下再添加一个<code>dist/</code></li></ul></li></ul><p><strong>ES6转ES5</strong></p><p>如果你仔细阅读webpack打包的js文件,发现写的ES6语法并没有转成ES5 ,那么就意味着可能一些对ES6还不支持的浏览器没有办法很好的运行我们的代码</p><ul><li><p>在前面我们说过,如果希望将ES6的语法转成ES5 ,那么就需要使用babel.</p><ul><li><p>而在webpack中,我们直接使用babel对应的loader就可以了</p><p><code>npm install babel-loader babel-core babel-preset-env webpack</code></p></li></ul></li><li><p>之后同样修改<code>webpack.config.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br><span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.js$/</span>,<br><span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/(node_modules|bower_components)/</span>,<br><span class="hljs-attr">use</span>: &#123;<br><span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;babel-loader&#x27;</span>,<br><span class="hljs-attr">options</span>: &#123;<br><span class="hljs-attr">presets</span>: [<span class="hljs-string">&#x27;es2015&#x27;</span>]<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p>之后重新编译即可</p><h2 id="3-3-Vue-Cli"><a href="#3-3-Vue-Cli" class="headerlink" title="3.3 Vue Cli"></a>3.3 Vue Cli</h2><h3 id="3-3-1-介绍"><a href="#3-3-1-介绍" class="headerlink" title="3.3.1 介绍"></a>3.3.1 介绍</h3><p>如果你只是简单写几个Vue的demo程序，那么你不需要Vue Cli</p><p>如果你在开发大型项目，那么你需要并且必然需要使用Vue Cli</p><ul><li>使用Vue.js开发大型应用时，我们需要考虑代码目录结构、项目结构和部署、热加载、代码单元测试等事情</li><li>如果每个项目都要手动完成这些工作，那无疑效率比较低，所以通常我们会使用一些脚手架工具来帮助完成这些事情</li></ul><p><strong>cli是什么意思？</strong></p><ul><li>cli是Command-Line-Interface，翻译为命令行界面，但是俗称脚手架</li><li>Vue Cli是一个官方发布vue.js项目脚手架</li><li>使用vue-cli 可以快速搭建Vue开发环境以及对应的webpack配置</li></ul><p><strong>Vue-cli使用前提</strong></p><ol><li>安装NodeJS</li><li>检测安装的版本<ul><li>默认情况下自动安装Node和NPM</li><li>Node环境要求8.9以上或者更高版本<code>node -v</code></li></ul></li></ol><blockquote><p>notes： 由于国内直接使用npm官方镜像是非常慢的，这里推荐使用淘宝NPM镜像</p><p>你可以使用淘宝定制的cnpm（gzip压缩支持）命令行工具代替默认的npm:</p><p><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>这样就可以使用cnpm命令来安装模块了：<code>cnpm install [name]</code></p></blockquote><ol start="3"><li><p>WebPack</p><ul><li><p>Vue.js官方脚手架工具就使用了webpack模板</p><ul><li>对所有的资源会压缩等优化操作</li><li>它在开发过程中提供了一套完整的功能，能够使得我们开发过程中变得高效</li></ul></li><li><p>webpack全局安装：<code>npm install webpack -gs</code></p></li></ul></li></ol><p><strong>什么是NPM呢？</strong></p><ul><li>NPM的全称是Node Package Manager</li><li>是一个NodeJS包管理和分发工具，已经成为了非官方的发布Node模块（包）的标准</li><li>后续我们会经常使用NPM来安装一些开发过程中依赖包</li></ul><h3 id="3-3-2-Vue-Cli的使用"><a href="#3-3-2-Vue-Cli的使用" class="headerlink" title="3.3.2 Vue Cli的使用"></a>3.3.2 Vue Cli的使用</h3><p>安装Vue脚手架</p><p><code>npm install -g @vue/cli</code></p><p>注意： 上面安装的是Vue Cli 3的版本，如果需要安装Vue Cli 2的方式初始化项目是不可以的</p><blockquote><p>notes: 注意3版本是不能直接兼容2版本的，需要使用如下命令拉取2版本的模板：<code>npm install @vue/cli-init -g</code>，</p><p>vue cli 2初始化项目: <code>vue init wepack [my-project]</code></p><p>vue cli 3初始化项目： <code>vue create [my-project]</code></p></blockquote><p><strong>vue-cli3 与 2的区别</strong></p><ul><li>vue-cli3 是基于webpack 4打造，vue-cli2 还是基于webpack 3</li><li>vue-cli3的设计原则是“0配置”， 移除了配置文件的<code>.build</code>和<code>config</code>等目录</li><li>vue-cli3提供了vue ui命令，提供了可视化配置，更加人性化</li><li>移除了static文件夹，新增了public文件夹，并且index.html移动到public中</li></ul><p><strong>Runtime-Compiler和Runtime-only的区别</strong></p><ul><li><p>如果你需要在客户端编译模板（例如，向template选项传入一个子模板中的非dom和HTML挂载到一个元素），你需要带有编译器的版本</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 这种情况需要编译器（compiler）</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br><span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123; hi &#125;&#125;&lt;/div&gt;&#x27;</span><br>&#125;)<br><br><span class="hljs-comment">// 这种情况不需要编译</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>render (h) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_">h</span>(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">hi</span>)<br>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在使用vue-loader或vueify时, *.vue文件中的模板会在构建时(build time)预编译(precompilet为Javascript,最终生成的bundle中你不再需要编译器(compilen),因此可以直接使用只含有进行时的构建版本runtime ontyl.</p><p>由于只含有运行时构建版本runtime-only)t完整构建版本full-bulil轻大约30%,你应该尽可能使用只含有运行时的构建版本,如果你还是希望使用完整构建版本,则常要在打包器中配置名</p><p>由于运行时版本的构建比其全面版本的重量轻约30%,因此你可以随时使用它,如果你仍然希望使用完整版本,则需要在期M程序中配置别名:</p></li></ul><p><em><strong>vue 3目录结构详解</strong></em></p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">public/ 相当于CLI2中的static目录<br><span class="hljs-attribute">src</span>/ 源代码目录<br><span class="hljs-selector-class">.browserslistrc</span> 浏览器相关支持情况<br><span class="hljs-selector-class">.gitignore</span> git忽略的文件<br>babel<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span> ES语法转换<br>postcss<span class="hljs-selector-class">.config</span><span class="hljs-selector-class">.js</span> CSS相关转换<br></code></pre></td></tr></table></figure><h3 id="3-3-3-补：匿名函数"><a href="#3-3-3-补：匿名函数" class="headerlink" title="3.3.3 补：匿名函数"></a>3.3.3 补：匿名函数</h3><p>ES5函数写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = <span class="hljs-keyword">function</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><p>匿名函数的写法：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">obj</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">100</span><br>&#125;<br></code></pre></td></tr></table></figure><p>放入一个参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">power</span> = num =&gt; &#123;<br><span class="hljs-keyword">return</span> num * num<br>&#125;<br></code></pre></td></tr></table></figure><p>放入两个参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> num1 + num2<br>&#125;<br></code></pre></td></tr></table></figure><p>函数中</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数代码块中有多行代码时</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">test</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-comment">// 1.打印hello world</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Hello World&quot;</span>);<br><span class="hljs-comment">// 2.打印Hello Vuejs</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello Vuejs&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 函数代码块中只有一行代码</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">sum</span> = (<span class="hljs-params">num1, num2</span>) =&gt; &#123;<br><span class="hljs-keyword">return</span> num1 * num2<br>&#125;<br><span class="hljs-comment">// 可以简写为</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">mul</span> = (<span class="hljs-params">num1, num2</span>) =&gt; num1 * num2<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 只有一行打印时</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">demo</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello Demo&#x27;</span>);<br>&#125;<br><span class="hljs-comment">// 可以简写为</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">demo</span> = (<span class="hljs-params"></span>) =&gt; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Hello Demo&#x27;</span>)<br></code></pre></td></tr></table></figure><p> <strong>箭头函数的this使用</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 什么时候使用箭头</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;, <span class="hljs-number">1000</span>)<br><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&#125;, <span class="hljs-number">1000</span>)<br><span class="hljs-comment">// 问题: 箭头函数中的this是如何查找的</span><br><span class="hljs-comment">// 结论：向外层作用域中，一层层查找this, 直到有this的定义</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>    <span class="hljs-title function_">aaa</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// window</span><br>        &#125;)<br>    &#125;<br>    <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>); <span class="hljs-comment">// obj对象</span><br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">前端模块化知识整理</summary>
    
    
    
    <category term="前端" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://www.qintianjun.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（二）-组件</title>
    <link href="http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2021-06-24T14:00:45.000Z</published>
    <updated>2023-02-24T08:02:19.846Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2-Vue组件"><a href="#2-Vue组件" class="headerlink" title="2 Vue组件"></a>2 Vue组件</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><p>人面对复杂问题的处理方式:</p><ul><li>任何一个人处理信息的逻辑能力都是有限的</li><li>所以,当面对一个非常复杂的问题时,我们不太可能一次性搞定一大堆的内容</li><li>但是,我们人有一种天生的能力,就是将问题进行拆解。口如果将一个复杂的问题，拆分成很多个可以处理的小问题，再将其放在整体当中,你会发现大的问题也会迎刃而解。</li></ul><p>组件也是似的思想:</p><ul><li>如果我们将一个页面中所有的处理逻辑全部放在一起，处理起来就会变得非常复杂，而且不利于后续的管理以及扩展。</li><li>但如果,我们讲一个页面拆分成一个个小的功能块,每个功能块完成属于自己这部分独立的功能,那么之后整个页面的管理和维护就变得非常容易了。</li></ul><p>组件化是Vue.js中的重要思想：</p><ul><li>它提供了一种抽象，让我们可以开发出一个个独立可复用的小组件来构造我们的应用</li><li>任何的应用都会被抽象成一棵组件树</li></ul><p><img src="https://cn.vuejs.org/images/components.png" alt="components"></p><p>组件化思想的应用：</p><ul><li>尽可能的将页面拆分成一个个小的、可复用的组件</li><li>让我们的代码更加方便组织和管理，并且扩展性也更强</li></ul><h2 id="2-2-组件开发的步骤"><a href="#2-2-组件开发的步骤" class="headerlink" title="2.2 组件开发的步骤"></a>2.2 组件开发的步骤</h2><p>组件的使用分成三步：</p><ul><li>创建组件构造器</li><li>注册组件</li><li>使用组件</li></ul><p>即：</p><ol><li>调用Vue.extend() 方法，创建组件构造器</li><li>调用Vue.component() 方法，注册组件</li><li>在Vue实例的作用范围内使用组件</li></ol><p>示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 3.使用组件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">my-cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">my-cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 1. 创建组件构造器对象</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> cpnC = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">           &lt;div&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;h2&gt;我是标题&lt;/h2&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;p&gt;我是内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">                &lt;p&gt;我是内容&lt;/p&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">            &lt;/div&gt;`</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">// 2. 注册组件</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-cpn&#x27;</span>, cpnC)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li>Vue.extend:</li></ol><ul><li><p>调用Vue.extend)创建的是一个组件构造器。</p></li><li><p>通常在创建组件构造器时,传入template代表我们自定义组件的模板。</p></li><li><p>该模板就是在使用到组件的地方,要显示的HTML代码。</p></li><li><p>事实上,这种写法在Vue2.x的文档中几乎已经看不到了,它会直接使用下面我们会讲到的语法糖,但是在很多资料还是会是到这种方式,而且这种方式是学习后面方式的基础</p></li></ul><p> 2.Vue.component</p><ul><li>调用Vue.component()是将刚才的组件构造器注册为一个组件,并且给它起一个组件的标签名称。</li><li>所以需要传递两个参数:1、注册组件的标签名2、组件构造器</li></ul><p>3.组件必须挂载在某个Vue实例下,否则它不会生效</p><p>如果需要使组件只能局部使用而非全局使用，则在对应的vue实例中注册它即可：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">components</span>: &#123;<br>        <span class="hljs-attr">cpn</span>: cpnC  <span class="hljs-comment">// 局部注册组件</span><br>    &#125;,<br>    <span class="hljs-attr">data</span>: &#123;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="2-3-父子组件"><a href="#2-3-父子组件" class="headerlink" title="2.3 父子组件"></a>2.3 父子组件</h2><p>前面我们看到了组件树：</p><ul><li>组件和组件之间存在层级关系</li><li>而其中一种非常重要的关系就是父子组件的关系</li></ul><p>父子组件错误用法:以子标签的形式在Vue实例中使用</p><ul><li>因为当子组件注册到父组件的components时, Vue会编译好父组件的模块</li><li>该模板的内容已经决定了父组件将要渲染的HTML (相当于父组件中已经有了子组件中的内容了）</li><li><child-cpn> </child-cpn>是只能在父组件中被识别的</li><li>类似这种用法, <child-cpn> </child-cpn>是会被浏览器忽略的</li></ul><p><strong>注册组件语法糖写法</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 1. 创建组件构造器对象并使用语法糖形式注册</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;cpn1&#x27;</span>, &#123;    <br><span class="hljs-attr">template</span>: <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div&gt;</span><br><span class="hljs-string">&lt;h2&gt;我是标题1&lt;/h2&gt;            </span><br><span class="hljs-string">&lt;p&gt;我是内容1&lt;/p&gt;</span><br><span class="hljs-string">&lt;p&gt;我是内容1&lt;/p&gt;</span><br><span class="hljs-string">     &lt;/div&gt;`</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>组件模板抽离写法</strong></p><p>直接上代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件使用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 一个写好的组件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/x-template&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars"></span></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 全局引用这个组件</span></span><br><span class="language-javascript">    <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;cpn&#x27;</span>, &#123;  <span class="hljs-comment">// 语法糖写法</span></span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>  <span class="hljs-comment">// 使用对应id名挂载</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>template写法（最常见）</strong></p><p>其实和前面一样，只是用<code>template</code>标签包裹对应组件内容</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;cpn&#x27;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>之后像前面那样注册挂载即可</p><h2 id="2-4-组件可以访问Vue实例数据吗"><a href="#2-4-组件可以访问Vue实例数据吗" class="headerlink" title="2.4 组件可以访问Vue实例数据吗"></a>2.4 组件可以访问Vue实例数据吗</h2><p>组件时一个单独功能模块的封装：</p><ul><li>这个模块有属于自己的HTML模板，也应该有属性自己的数据data</li></ul><p>组件中的数据是保存在哪里呢？顶层的Vue实例中吗？</p><ul><li><p>我们先来测试一下组件中能不能直接访问Vue实例中的data：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>消息： &#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">let</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;hello world&quot;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-string">&#x27;my-cpn&#x27;</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;myCpn&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>解析</p><p>组件去访问message，message定义在Vue，我们发现最终并没有显示结果</p><p>结论： 组件不能直接访问Vue实例中的data数据</p></li><li><p>我们发现不能访问，而且即使可以访问，如果将所有的数据都放在Vue实例中，Vue实例就会变得非常臃肿</p></li><li><p><strong>结论: Vue组件应该有自己保存数据的地方</strong></p></li></ul><h2 id="2-5-组件中的data为什么必须是函数"><a href="#2-5-组件中的data为什么必须是函数" class="headerlink" title="2.5 组件中的data为什么必须是函数"></a>2.5 组件中的data为什么必须是函数</h2><p>（待补充）</p><h2 id="2-6-父子组件间传值"><a href="#2-6-父子组件间传值" class="headerlink" title="2.6 父子组件间传值"></a>2.6 父子组件间传值</h2><p>在前面我们提到了子组件是不能引用父组件或者Vue实例的数据的</p><p>但是在开发中，往往一些数据确实需要从上层传递到下层</p><ul><li>比如一个页面中，我们从服务器请求到了很多的数据</li><li>其中一部分数据，并非是我们整个页面的大组件来展示的，而是需要下马的子组件进行展示</li><li>这个时候，并不会让子组件再次发送一个网络请求，而是直接让大组件（父组件）将数据传递给小组件（子组件）</li></ul><p>如何进行父子组件见进行通信呢？Vue官方提到：</p><ol><li>通过props向子组件传递数据</li><li>通过事件向父组件发送消息</li></ol><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200131121652504.png" alt="image-20200131121652504"></p><p>在下面代码中，我们将Vue实例当做父组件，并且其中包含子组件来简化代码</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件实例, 注意此处要使用v-bind语法绑定变量 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">:child-movies</span>=<span class="hljs-string">&quot;movies&quot;</span> <span class="hljs-attr">:child-message</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;childMovies&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;childMessage&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &lt;!-- 父传子使用props --&gt;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">props</span>: [<span class="hljs-string">&#x27;childMovies&#x27;</span>, <span class="hljs-string">&#x27;childMessage&#x27;</span>],</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;&#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;  <span class="hljs-comment">// 定义数据</span></span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;你好啊&quot;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">movies</span>: [<span class="hljs-string">&quot;海王&quot;</span>, <span class="hljs-string">&quot;海贼王&quot;</span>, <span class="hljs-string">&quot;上海贼王&quot;</span>]</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="props基本用法"><a href="#props基本用法" class="headerlink" title="props基本用法"></a>props基本用法</h3><p>在组件中，使用选项props来声明需要从父级接收到的数据</p><p>props的值有两种方式：</p><ol><li>字符串数组，数组中的字符串就是传递时的名称</li><li>对象，对象可以设置传递时的类型，也可以设置默认值等</li></ol><h3 id="props数据验证"><a href="#props数据验证" class="headerlink" title="props数据验证"></a>props数据验证</h3><p>在前面的示例中，我们的props选项是使用一个数组；我们说过，除了数组之外，我们也可以使用对象，当需要<strong>对props进行类型验证</strong>时，就需要对象写法了</p><p>验证都支持哪些数据类型呢？</p><p><code>type</code> 可以是下列原生构造函数中的一个：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Array</code></li><li><code>Object</code></li><li><code>Date</code></li><li><code>Function</code></li><li><code>Symbol</code></li></ul><p>你可以为 <code>props</code> 中的值提供一个带有验证需求的对象，而不是一个字符串数组。例如：</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;my-component&#x27;</span>, &#123;<br>  <span class="hljs-attr">props</span>: &#123;<br>    <span class="hljs-comment">// 基础的类型检查 (`null` 和 `undefined` 会通过任何类型验证)</span><br>    <span class="hljs-attr">propA</span>: <span class="hljs-title class_">Number</span>,<br>    <span class="hljs-comment">// 多个可能的类型</span><br>    <span class="hljs-attr">propB</span>: [<span class="hljs-title class_">String</span>, <span class="hljs-title class_">Number</span>],<br>    <span class="hljs-comment">// 必填的字符串</span><br>    <span class="hljs-attr">propC</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">String</span>,<br>      <span class="hljs-attr">required</span>: <span class="hljs-literal">true</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的数字</span><br>    <span class="hljs-attr">propD</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Number</span>,<br>      <span class="hljs-attr">default</span>: <span class="hljs-number">100</span><br>    &#125;,<br>    <span class="hljs-comment">// 带有默认值的对象</span><br>    <span class="hljs-attr">propE</span>: &#123;<br>      <span class="hljs-attr">type</span>: <span class="hljs-title class_">Object</span>,<br>      <span class="hljs-comment">// 对象或数组默认值必须从一个工厂函数获取</span><br>      <span class="hljs-attr">default</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123; <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello&#x27;</span> &#125;<br>      &#125;<br>    &#125;,<br>    <span class="hljs-comment">// 自定义验证函数</span><br>    <span class="hljs-attr">propF</span>: &#123;<br>      <span class="hljs-attr">validator</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-comment">// 这个值必须匹配下列字符串中的一个</span><br>        <span class="hljs-keyword">return</span> [<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-string">&#x27;warning&#x27;</span>, <span class="hljs-string">&#x27;danger&#x27;</span>].<span class="hljs-title function_">indexOf</span>(value) !== -<span class="hljs-number">1</span><br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="子级向父级传递事件"><a href="#子级向父级传递事件" class="headerlink" title="子级向父级传递事件"></a>子级向父级传递事件</h3><p>props用于父组件向子组件传递数据，还有一种比较常见的是子组件传递数据或事件到父组件中，这个时候我们需要使用<strong>自定义事件</strong>来完成</p><p><em>什么时候需要自定义事件呢</em></p><ul><li>当子组件需要向父组件传递数据时，就要用到自定义事件了</li><li>我们之前学习的v-on不仅可以用于监听DOM事件，也可以用于组件间自定义事件</li></ul><p><em>自定义事件的流程</em></p><ul><li>在子组件中，通过$emit()来触发事件</li><li>在父组件中，通过v-on来监听子组件事件</li></ul><p>来看一个简单的例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> @<span class="hljs-attr">item-click</span>=<span class="hljs-string">&quot;cpnClick&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in categories&quot;</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick(item)&quot;</span>&gt;</span><br>            &#123;&#123;item.id&#125;&#125;-&#123;&#123;item.name&#125;&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &lt;!-- 父传子使用props --&gt;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">categories</span>: [</span><br><span class="language-javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;亚洲高清&quot;</span> &#125;,</span><br><span class="language-javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;欧美经典&quot;</span> &#125;,</span><br><span class="language-javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;国产自拍&quot;</span> &#125;,</span><br><span class="language-javascript">                    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;日语学习&quot;</span> &#125;</span><br><span class="language-javascript">                ]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)</span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.$emit(<span class="hljs-string">&#x27;item-click&#x27;</span>, item) <span class="hljs-comment">//item-click是要向父组件传递事件的名称，后面的item是向父组件传递的参数</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;  <span class="hljs-comment">// 定义数据</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">cpnClick</span>(<span class="hljs-params">item</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;button clicked&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-7-父子组件的访问方式"><a href="#2-7-父子组件的访问方式" class="headerlink" title="2.7 父子组件的访问方式"></a>2.7 父子组件的访问方式</h2><h3 id="children"><a href="#children" class="headerlink" title="$children"></a>$children</h3><p>有时候我们需要父组件直接访问子组件, 子组件直接访问父组件，或者是子组件访问根组件</p><ul><li>父组件访问子组件： 使用$children 或 $refs</li><li>我们先来看下$children的访问<ul><li>this.$children是一个数组类型，它包含所有子组件对象</li><li>我们这里通过一个遍历，取出所有子组件的message状态</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ccc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span> # 给组件创建一个ref命名<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是子组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &lt;!-- 父传子使用props --&gt;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">showMessage</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;show message&#x27;</span>)</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好呀&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-comment">// 1. $children方式</span></span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(this.$children)</span></span><br><span class="language-javascript">                <span class="hljs-comment">// for (let i in this.$children) &#123;</span></span><br><span class="language-javascript">                <span class="hljs-comment">//     console.log(i)</span></span><br><span class="language-javascript">                <span class="hljs-comment">//     this.$children[i].showMessage()</span></span><br><span class="language-javascript">                <span class="hljs-comment">// &#125;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 2.$refs =&gt; 对象类型，默认是一个空的对象</span></span><br><span class="language-javascript">                <span class="hljs-comment">// console.log(this.$refs.ccc)</span></span><br><span class="language-javascript">                <span class="hljs-comment">// this.$refs.ccc.showMessage()</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p>在日常的开发中一般使用refs方式较多</p><h2 id="2-8-子组件访问父组件（或根组件）"><a href="#2-8-子组件访问父组件（或根组件）" class="headerlink" title="2.8 子组件访问父组件（或根组件）"></a>2.8 子组件访问父组件（或根组件）</h2><p>直接看代码吧(一般很少用)：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">components</span>: &#123;<br>    <span class="hljs-attr">ccpn</span>: &#123;<br>        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>,<br>        <span class="hljs-attr">methods</span>: &#123;<br>            <span class="hljs-title function_">btnClick</span>(<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>) <span class="hljs-comment">//访问父组件，一般不建议这样使用，会导致耦合性增强，当组件复用等情况下会出现难以预料的问题</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$parent</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// 访问父组件的name属性</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">$root</span>) <span class="hljs-comment">// 访问根组件的Vue实例</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-9-Slot插槽"><a href="#2-9-Slot插槽" class="headerlink" title="2.9 Slot插槽"></a>2.9 Slot插槽</h2><p><strong>slot翻译为插槽</strong></p><ul><li>在生活中很多地方都有插槽，比如USB插槽等</li><li>插槽的目的是让我们原来的设备具备更多的扩展性</li><li>比如电脑的USB插槽可以让我们插入U盘、硬盘、手机等等</li></ul><p><strong>组件的插槽</strong></p><ul><li>组件的插槽也是为了让我妈封装的组件更加具有扩展性</li><li>让使用者可以决定组件内部的一些内容到底展示什么</li></ul><p><strong>例子：移动网站中的导航栏</strong></p><ul><li>移动开发中，几乎每个页面都有导航栏</li><li>导航栏我们必然会封装成一个插件，比如nav-bar组件</li><li>一旦有了这个组件，我们就可以在多个页面复用了</li></ul><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200201222644659.png" alt="image-20200201222644659"></p><p><strong>如何封装这类组件呢？</strong></p><ul><li>它们有很多区别，但也有很多共性</li><li>如果，我们每一个单独去封装一个组件显然不合适；比如每个页面都返回，这部分内容我们就要重复去封装</li><li>但是，如果我们封装成一个好像也不合理：有些左侧是菜单，有些是返回，有些中间是搜索，有些事文字等等</li></ul><p><strong>具体如何封装呢？</strong></p><p>核心思想是抽取共性，保留不同</p><ul><li>最好的封装方式就是将共性抽取到组件总，将不同暴露为插槽</li><li>一旦我们预留了插槽，就可以让使用者根据自己的需求，决定插槽中插入什么内容</li><li>是搜索框，还是文字，菜单，有调用者自己来决定</li></ul><p>这就是我们为什么要学习组件插槽的原因</p><h3 id="2-9-1-插槽的基本使用"><a href="#2-9-1-插槽的基本使用" class="headerlink" title="2.9.1 插槽的基本使用"></a>2.9.1 插槽的基本使用</h3><p>插槽的基本使用非常简单：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是组件<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是组件的内容，哈哈哈<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在组件中预留<code>&lt;slot&gt;</code>标签</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是插槽中按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  # 插槽中放入button<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是插槽中span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  # 插槽中放入span<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>插槽中通过插入不同的功能，实现不同的需求</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200202223754164.png" alt="image-20200202223754164"></p><p>如果插槽中有某个功能是经常重复使用的时候，可以给插槽设置默认值：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">slot</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是插槽中的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样如果使用插槽时不覆盖，则显示的是默认内容</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span>&gt;</span>我是插槽中按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>  # 显示按钮<br><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>我是插槽中span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>  # 显示span<br><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span>  # 显示默认的<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>标签<br></code></pre></td></tr></table></figure><h3 id="2-9-2-具名插槽"><a href="#2-9-2-具名插槽" class="headerlink" title="2.9.2 具名插槽"></a>2.9.2 具名插槽</h3><p>有时候一个组件中不止一个插槽，可以通过给插槽命名的方式，来指定修改哪一个插槽的内容：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 组件实例 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span>左边被我改了<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span>右边被我改了<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;left&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是插槽中左边的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是插槽中中间的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;right&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我是插槽中右边的默认内容<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上，通过指定slot的name，可以修改指定插槽的内容，避免混乱。效果：</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200202230145397.png" alt="image-20200202230145397"></p><h3 id="2-9-3-编译作用域"><a href="#2-9-3-编译作用域" class="headerlink" title="2.9.3 编译作用域"></a>2.9.3 编译作用域</h3><p>在进一步学习插槽之前，我们需要先理解一个概念：编译作用域</p><p>官方对于编译的作用域解析比较简单，我们通过一个例子来理解：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;isShow&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我能不能显示出来呢<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    &lt;!-- 父传子使用props --&gt;</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> cpn = &#123;</span><br><span class="language-javascript">        <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;#cpn&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">isShow</span>: <span class="hljs-literal">false</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">        <span class="hljs-attr">components</span>: &#123;</span><br><span class="language-javascript">            cpn</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;你好呀&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">isShow</span>: <span class="hljs-literal">true</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在Vue实例中的isShow为true，而子组件的isShow为false，那么组件最终是否会被渲染呢？ 答案是最终可以被渲染出来，也就是说v-show使用的是Vue实例中的isShow属性，而非子组件中的isShow属性。</p><p>为什么呢？</p><p>官方给出了一条准则： <strong>父组件模板的所有东西都会在父级作用域内编译；子组件模板的所有东西都会在子级作用域内编译</strong></p><p>而我们在使用<code>&lt;cpn v-show=&quot;isShow&quot;&gt;&lt;/cpn&gt;</code>的时候，整个组件的使用过程相当于在父组件中出现的</p><p>那么它的作用域就是父组件，使用的属性也是父组件的属性</p><p>因此，isShow使用的是Vue实例中的属性，而不是子组件的属性</p><h3 id="2-9-4-作用域插槽"><a href="#2-9-4-作用域插槽" class="headerlink" title="2.9.4 作用域插槽"></a>2.9.4 作用域插槽</h3><p>作用域插槽是slot一个比较难以理解的点 ，官方文档说的也不十分清晰</p><p>这里，我们用一句话对其做一个总结，然后我们在后续的案例中来体会：</p><ul><li>父组件替换插槽的标签，但是内容由子组件来提供</li></ul><p>我们先提一个需求：</p><ul><li>子组件中包括一组数据，比如：[‘JavaScript’, ‘Python’, ‘Go’, ‘Java’]</li><li>需要在多个界面展示：<ul><li>某些界面是以水平方向展示的</li><li>某些界面是以列表形式展示的</li><li>某些界面直接展示一个数组</li></ul></li></ul><p>内容在子组件，希望父组件告诉我们如何展示，怎么办呢</p><ul><li>利用slot作用域插槽就可以了</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 以slot默认的列表形式展示 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span> <br>    <span class="hljs-comment">&lt;!-- 父组件想要获得子组件的language, 并以字符串形式展示 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">cpn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">&quot;slot&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;slot.data.join(&#x27; - &#x27;)&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">cpn</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cpn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">slot</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">&quot;language&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in language&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">slot</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span><br><span class="language-xml"><span class="language-handlebars">    <span class="hljs-comment">&lt;!-- 父传子使用props --&gt;</span></span></span><br><span class="language-xml"><span class="language-handlebars">    const cpn = &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">        template: &#x27;#cpn&#x27;,</span></span><br><span class="language-xml"><span class="language-handlebars">        data() &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">            return &#123;</span></span><br><span class="language-xml"><span class="language-handlebars">                language: [&#x27;JavaScript&#x27;, &#x27;Python&#x27;, &#x27;Go&#x27;, &#x27;C&#x27;]</span></span><br><span class="language-xml"><span class="language-handlebars">            &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">        &#125;</span></span><br><span class="language-xml"><span class="language-handlebars">    &#125;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">组件及相关知识整理</summary>
    
    
    
    <category term="前端" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://www.qintianjun.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue学习笔记（一）-初识Vue</title>
    <link href="http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/24/Vue%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2021-06-24T13:55:48.000Z</published>
    <updated>2023-02-24T08:02:10.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-初识Vue"><a href="#1-初识Vue" class="headerlink" title="1 初识Vue"></a>1 初识Vue</h1><h2 id="1-1-Vue安装"><a href="#1-1-Vue安装" class="headerlink" title="1.1 Vue安装"></a>1.1 Vue安装</h2><p>安装Vue的方式有很多：</p><ul><li><p>方法一： 直接CDN引入</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!--开发环境版本,包含了有帮助的命令行警告--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--生产环境版本,优化了尺寸和速度-&gt;</span><br><span class="hljs-comment">&lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue&quot;&gt;&lt;/script&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>方法二：下载和引入<br>开发环境 <a href="https://vuejs.org/is/vue.js">https://vuejs.org/is/vue.js</a><br>生产环境 <a href="https://vueis.org/is/vue.min.js">https://vueis.org/is/vue.min.js</a></p></li><li><p>方式三： NPM安装</p><p>稍后详细说明</p></li></ul><h2 id="1-2-Hello-Vue"><a href="#1-2-Hello-Vue" class="headerlink" title="1.2 Hello Vue"></a>1.2 Hello Vue</h2><p>我们来做第一个Vue程序，体验一下Vue的响应式</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;  <span class="hljs-comment">// 定义数据</span></span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, World!&#x27;</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>代码做了什么事情？</strong></p><ul><li><p>我们创建了一个Vue对象： app</p></li><li><p>创建Vue对象的时候，传入了一些options: {}</p><ul><li>{}中包含了el属性，该属性决定了这个Vue对象挂载到哪个元素上，很明显我们这里是挂载到了id为app的元素上</li><li>{}中包含了data属性： 该属性会存储一些数据<br>- [x] 这些数据可以是我们直接定义出来的，比如上面这样<br>- [x] 也可能是来自于网络，从服务器端加载的</li></ul></li><li><p>浏览器执行代码的流程：<br>- [x] 执行到HTML中<div>部分显示出对应的HTML<br>- [x] 执行到let app &#x3D; new Vue创建Vue实例，并且对原HTML进行解析和修改</p></li><li><p>并且我们的代码是响应式的</p></li></ul><h2 id="1-3-Vue列表显示"><a href="#1-3-Vue列表显示" class="headerlink" title="1.3 Vue列表显示"></a>1.3 Vue列表显示</h2><p>现在我们展示一个更加复杂的数据: 数据列表</p><p>比如我们现在从服务器请求过来一个列表，希望展示到HTML中, 直接上代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;movie in movies&quot;</span>&gt;</span> // 使用v-for指令<br>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>&#123;&#123;movie&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">            <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">            <span class="hljs-attr">data</span>: &#123;  <span class="hljs-comment">// 定义数据</span></span><br><span class="language-javascript">                <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, World!&#x27;</span>,</span><br><span class="language-javascript">                <span class="hljs-attr">movies</span>: [<span class="hljs-string">&#x27;霸王别姬&#x27;</span>, <span class="hljs-string">&#x27;肖申克的救赎&#x27;</span>, <span class="hljs-string">&#x27;阿甘正传&#x27;</span>, <span class="hljs-string">&#x27;星际穿越&#x27;</span>, <span class="hljs-string">&#x27;大话西游&#x27;</span>]</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用v-for指令可以简化代码，我们不需要在JavaScript代码中拼接DOM了</p><p>而且更重要的是，它还是响应式的。</p><p>1.4 v-on指令和methods属性</p><p>现在我们实现一个小计数器，点击+计数器j+1，点击-计数器-1</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>当前计数: &#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span>+<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;sub&quot;</span>&gt;</span>-<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">       <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>, <span class="hljs-comment">// 用于挂载要管理的元素</span></span><br><span class="language-javascript">           <span class="hljs-attr">data</span>: &#123;  <span class="hljs-comment">// 定义数据</span></span><br><span class="language-javascript">               <span class="hljs-attr">counter</span>: <span class="hljs-number">0</span></span><br><span class="language-javascript">           &#125;,</span><br><span class="language-javascript">           <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">               <span class="hljs-title function_">add</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>++</span><br><span class="language-javascript">               &#125;,</span><br><span class="language-javascript">               <span class="hljs-title function_">sub</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                   <span class="hljs-variable language_">this</span>.<span class="hljs-property">counter</span>--</span><br><span class="language-javascript">               &#125;</span><br><span class="language-javascript">           &#125;</span><br><span class="language-javascript">       &#125;)</span><br><span class="language-javascript">   </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>新的属性: methods，该属性用于在Vue对象中定义方法</li><li>新的指令：@click(v-on:click的简写)用于监听某个元素的点击事件，并且制定当发生点击时，执行的方法（通常是methods中定义的方法）</li></ul><p>到目前为止我们掌握了这些选项：</p><ul><li><p>el</p><ul><li>类型： string| HTMLElement</li><li>作用：决定之后Vue实例会管理哪个DOM</li></ul></li><li><p>data:<br>* 类型： Object| Function<br>* 作用： Vue实例对象对应的数据对象</p></li><li><p>methods:<br>* 类型：{ [key: string]: Function }<br>* 作用：定义属于Vue的一些方法，可以在其他地方调用， 也可以在指令中使用</p></li></ul><h2 id="1-4-v-bind动态绑定style"><a href="#1-4-v-bind动态绑定style" class="headerlink" title="1.4 v-bind动态绑定style"></a>1.4 v-bind动态绑定style</h2><p>操作元素的 class 列表和内联样式是数据绑定的一个常见需求。因为它们都是属性，所以我们可以用 <code>v-bind</code> 处理它们：只需要通过表达式计算出字符串结果即可。不过，字符串拼接麻烦且易错。因此，在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组。 </p><p>我们可以传给 <code>v-bind:class</code> 一个对象，以动态地切换 class：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive &#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上面的语法表示 <code>active</code> 这个 class 存在与否将取决于数据属性 <code>isActive</code> 的 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy">truthiness</a>。</p><p>你可以在对象中传入更多属性来动态切换多个 class。此外，<code>v-bind:class</code> 指令也可以与普通的 class 属性共存。当有如下模板:</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span></span><br><span class="hljs-tag">  <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static&quot;</span></span><br><span class="hljs-tag">  <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span><br><span class="hljs-tag">&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>和如下 data：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>  <span class="hljs-attr">hasError</span>: <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果渲染为：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;static active&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当 <code>isActive</code> 或者 <code>hasError</code> 变化时，class 列表将相应地更新。例如，如果 <code>hasError</code> 的值为 <code>true</code>，class 列表将变为 <code>&quot;static active text-danger&quot;</code>。</p><p>绑定的数据对象不必内联定义在模板里：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:class</span>=<span class="hljs-string">&quot;classObject&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>data: &#123;<br>  classObject: &#123;<br>    active: true,<br>    &#x27;text-danger&#x27;: false<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意，在模板渲染时vue可能会把固定值解析为变量：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;&#123; fontSize: finalSize + &#x27;px&#x27;, backgroundColor: &#x27;blue&#x27; &#125;&quot;</span>&gt;</span> &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;aaaaa&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">finalSize</span>: <span class="hljs-number">50</span></span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p>如<code>px</code>,默认情况下会被解析为一个变量；如果想确保其被解析为50px，需要在<code>px</code>前后用单引号括起。</p><h2 id="1-5-计算属性"><a href="#1-5-计算属性" class="headerlink" title="1.5  计算属性"></a>1.5  计算属性</h2><h3 id="1-5-1-使用场景"><a href="#1-5-1-使用场景" class="headerlink" title="1.5.1 使用场景"></a>1.5.1 使用场景</h3><p>我们在模板中可以直接通过差值语法显示一些data数据，但是某些情况下，我们可能需要对数据进行一些转化后再显示</p><ul><li>比如我们有firstName和lastName两个变量，我们需要展示完整名称</li><li>但是如果有多个地方都需要显示完整名称，我们就需要写多个 </li></ul><p>此时我们可以将上面代码转换成计算属性，如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>  <span class="hljs-comment">&lt;!--此处fullName已经作为一个属性值存在--&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Kobe&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Briant&#x27;</span></span><br><span class="language-javascript">        &#125;,<span class="hljs-comment">//计算属性</span></span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另一个案例，将books中书的总价格动态显示出来：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(book, index) in books&quot;</span>&gt;</span>&#123;&#123;index+1&#125;&#125;-&#123;&#123;book.name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>总价格：&#123;&#123;totalPrice&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">books</span>: [</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">110</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;深入理解计算机系统&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">98</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">110</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Unix网络编程&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">98</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">110</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Python学习手册&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">98</span>&#125;,</span><br><span class="language-javascript">                &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">110</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Vue实战指南&#x27;</span>, <span class="hljs-attr">price</span>: <span class="hljs-number">98</span>&#125;</span><br><span class="language-javascript">            ]</span><br><span class="language-javascript">        &#125;,<span class="hljs-comment">//计算属性</span></span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">totalPrice</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-keyword">let</span> result = <span class="hljs-number">0</span></span><br><span class="language-javascript">                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i=<span class="hljs-number">0</span>; i &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">                    result += <span class="hljs-variable language_">this</span>.<span class="hljs-property">books</span>[i].<span class="hljs-property">price</span></span><br><span class="language-javascript">                &#125;</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> result</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="1-5-2-set及get方法"><a href="#1-5-2-set及get方法" class="headerlink" title="1.5.2 set及get方法"></a>1.5.2 set及get方法</h3><p>计算属性一般是没有set方法的，是只读属性（只有get方法）</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Kobe&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Bryant&#x27;</span><br>&#125;,<br><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性一般没有set方法，是只读属性</span><br>    <span class="hljs-attr">fullName</span>: &#123;<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>亦可简写成：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 在调用计算属性fullName时，实际上调用的就是fullName的get方法</span><br>    <span class="hljs-attr">fullName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在某些情况下需要对计算属性的结果重新赋值，则需要手工实现计算属性的<code>set</code>方法:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Kobe&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Bryant&#x27;</span><br>&#125;,<br><span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-comment">// 计算属性一般没有set方法，是只读属性</span><br>    <span class="hljs-attr">fullName</span>: &#123;<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">newName</span>)&#123; <span class="hljs-comment">// 通过set方法将计算属性的显示改成James Lebron: app.fullName=&#x27;James Lebron&#x27;</span><br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;-------&#x27;</span>)<br>            <span class="hljs-keyword">const</span> names = newName.<span class="hljs-title function_">split</span>(<span class="hljs-string">&#x27; &#x27;</span>);<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> = names[<span class="hljs-number">0</span>]<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span> = names[<span class="hljs-number">1</span>]<br>        &#125;,<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 默认显示Kobe Bryant</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-3-计算属性和methods对比"><a href="#1-5-3-计算属性和methods对比" class="headerlink" title="1.5.3 计算属性和methods对比"></a>1.5.3 计算属性和methods对比</h3><p>在下面案例中，我们分别用计算属性和methods方法打印fullName, 并且每调用一次打印一条记录，看看分别使用计算属性和methods方法分别要调用相应函数几次：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--通过定义methods--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;getFullName()&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--通过计算属性--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Kobe&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Bryant&#x27;</span></span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-title function_">getFullName</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;getFullName&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;,</span><br><span class="language-javascript">        <span class="hljs-attr">computed</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fullName</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;fullName&#x27;</span>)</span><br><span class="language-javascript">                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">firstName</span> + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span></span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br></code></pre></td></tr></table></figure><p>得到输出如下：</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">getFullName</span><br><span class="hljs-attribute">getFullName</span><br><span class="hljs-attribute">getFullName</span><br><span class="hljs-attribute">getFullName</span><br><span class="hljs-attribute">fullName</span><br></code></pre></td></tr></table></figure><p>可以看到同样是显示4次fullname,methods方法调用了4次，而计算属性只调用了一次。</p><ul><li>两种方式的最终结果确实是完全相同的。</li><li>不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。</li><li>这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code>计算属性会立即返回之前的计算结果，而<strong>不必再次执行函数</strong>。</li></ul><h2 id="1-6-事件监听"><a href="#1-6-事件监听" class="headerlink" title="1.6 事件监听"></a>1.6 事件监听</h2><p>在前端开发中，我们常常和用户交互。</p><ul><li>在这个时候，我们就必须监听用户发生的事件，比如点击、拖拽、键盘事件等</li><li>在Vue中如何监听事件呢？我们使用v-on指令</li></ul><p><em><strong>v-on介绍</strong></em></p><ul><li>作用：绑定事件监听器</li><li>缩写：@<ul><li>预期：Function | Inline Statement | Object</li></ul></li><li>参数: event</li></ul><p>下面我们就具体来学习v-on的使用</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>点击次数：&#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter++&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">v-on:click</span>=<span class="hljs-string">&quot;counter--&quot;</span>&gt;</span>-1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如上，我们可以使用v-on实现了对点击事件的响应</p><blockquote><p>注：v-on有其简写形式，称作语法糖，v-on:click可以简写为***@click***</p></blockquote><p><em><strong>v-on参数</strong></em></p><p>当通过methods中定义方法，以供**@click**调用的时候，需要注意参数问题：</p><ul><li>情况一： 如果该方法不需要额外参数，那么方法后的()可以不添加<ul><li>但是注意，如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</li></ul></li><li>情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>点击次数: &#123;&#123;counter&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleAdd&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">handleAddTen(10,</span> $<span class="hljs-attr">event</span>)&gt;</span>+10<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>methods: &#123;<br>handleAdd(event) &#123;<br>console.log(event);<br>this.counter++;<br>&#125;,<br>handleAddTen(count, event) &#123;<br>console.log(event);<br>this.counter += 10;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><em><strong>.stop修饰符的使用</strong></em></p><p>在某些情况下，我们拿到event的目的可能是进行一些事件的处理</p><p>Vue提供了修饰符来帮助我们方便的处理一些事件：</p><ul><li>.stop - 调用event.stopPropagation()</li><li>.prevent - 调用event.preventDefault()</li><li>.(keyCode | keyAlias) - 只当时间是从特定键触发时才触发回调</li><li>.native - 监听组件根元素的原生事件</li><li>.once - 只触发一次的回调</li></ul><p>例子：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 1.stop修饰符的使用 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;divclick&quot;</span>&gt;</span><br>    aaaaaa<br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 2.prevent修饰符的使用（阻止默认行为）  --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;www.baidu.com&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span> @<span class="hljs-attr">click</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 3.监听某个键盘的事件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;keyUp&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 4.once修饰符的使用（只会触发一次） --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.once</span>=<span class="hljs-string">&quot;doThis&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span> <br></code></pre></td></tr></table></figure><h2 id="1-7-条件判断"><a href="#1-7-条件判断" class="headerlink" title="1.7 条件判断"></a>1.7 条件判断</h2><p>没啥说的直接代码示例：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;score&gt;=90&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;score&gt;=80&quot;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;score&gt;=60&quot;</span>&gt;</span>优秀<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">v-else</span>&gt;</span>不及格<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em><strong>一个小案例</strong></em></p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;isUser&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>用户账号:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;用户账号&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">v-else</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>邮箱地址: <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;email&quot;</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot;邮箱地址&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;handleToggle&quot;</span>&gt;</span>切换类型<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p>如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前输入的内容</p></li><li><p>但是按道理， 我们应该切换到另外一个input元素中了</p></li><li><p>在另一个input元素中，我们并没有输入内容</p></li><li><p>为什么会出现这个问题呢</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200104152849954.png" alt="image-20200104152849954"></p></li></ul><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200104152919080.png" alt="image-20200104152919080"></p><pre><code>                            （如图，点击切换类型后输入框中的内容一直存在）</code></pre><p><strong>问题解答</strong></p><ul><li>这是因为Vue在进行DOM渲染时，出于性能考虑，会尽可能的复用已经存在的元素， 而不是重新创建新的元素</li><li>在上面的案例中，Vue内部会发现原来的input元素不再使用，直接作为else中的input来使用了</li></ul><p><strong>解决方案</strong></p><ul><li>如果我们不希望Vue出现类似重复利用的问题，可以给对应的input添加key</li><li>并且我们需要保证key是不同的</li></ul><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200104153538625.png" alt="image-20200104153538625"></p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/image-20200104153549253.png" alt="image-20200104153549253"></p><pre><code>                    (如图，在添加不同key后再次点击切换类型，此时原本input元素中的内容就不会保留了)</code></pre><blockquote><p>v-if 和 v-show在控制元素显示时的区别：</p><p>v-if: 当条件为false时，包含v-if指令的元素，根本不会存在于dom中</p><p>v-show: 当条件为false时，v-show并不删除元素，只是给我们的元素增加一个行内样式: display: none</p></blockquote><h2 id="1-8-v-for遍历"><a href="#1-8-v-for遍历" class="headerlink" title="1.8 v-for遍历"></a>1.8 v-for遍历</h2><p><strong>v-for遍历数组</strong></p><p>当我们有一组数据需要进行渲染时，我们就可以使用v-for来完成</p><ul><li>v-for的语法类似于JavaScript中的for循环</li><li>格式如下： item in items的形式</li></ul><p>我们来看一个简单的案例：</p><ul><li>如果在遍历的过程中不需要使用索引值<ul><li>v-for&#x3D;”movie in movies”</li><li>依次从movies中取出movie,并在元素内容中，我们可以使用Mustache语法，来使用movie</li></ul></li><li>如果在遍历的过程中，我们需要拿到元素在数组中的索引值呢<ul><li>语法格式： v-for&#x3D;(item, index) in items</li><li>其中的index就代表了取出的item在原数组的索引值</li></ul></li></ul><p><strong>专题：哪些数组的方法是响应式的</strong></p><ul><li><p>push方法：在数组后面增加元素</p><p>this.letters.push()</p></li><li><p>pop方法：内删除数组中最后一个元素</p><p>this.letters.pop()</p></li><li><p>shift方法：删除数组中第一个元素</p><p>this.letters.shift()</p></li><li><p>unshift方法：在数组最前面添加元素</p></li><li><p>splice方法：删除元素&#x2F;插入元素&#x2F;替换元素</p><ul><li><p>删除元素：第二个参数传入要删除几个元素（如果没有传则删除后面所有元素）</p><p>this.letters.splice(1, 3)  # 删除第一个元素后三个元素</p></li><li><p>替换元素：从第几个元素开始，替换几个元素，分别是什么</p><p>this.letters.splice(1, 3,  ‘m’, ‘n’, ‘o’)</p></li><li><p>插入元素：第二个参数，传入0， 并且后面跟上要插入的元素</p><p>this.letters.splice(1, 0, ‘x’, ‘y’, ‘z’)  # 在第一个元素后面插入x, y, z</p></li></ul></li><li><p>sort方法</p><p>this.letters.sort()</p></li><li><p>reverse方法</p><p>this.letters.reverse()</p></li></ul><h2 id="1-9-补充：高阶函数"><a href="#1-9-补充：高阶函数" class="headerlink" title="1.9 补充：高阶函数"></a>1.9 补充：高阶函数</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><br></code></pre></td></tr></table></figure><p>三种高阶函数：</p><ul><li>filter: filter中的回调函数有一个要求，必须返回一个boolean值， <ul><li>当返回true时， 函数内部自动将这次回调的n加入到新的数组中</li><li>当返回false时，函数内部会过滤掉这次的n</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> nums = [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">111</span>, <span class="hljs-number">222</span>, <span class="hljs-number">333</span>, <span class="hljs-number">40</span>, <span class="hljs-number">50</span>]<br><span class="hljs-keyword">let</span> newNums = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">100</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newNums)<br>newNums2 = nums.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">n</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> n &lt; <span class="hljs-number">100</span><br>&#125;)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newNums2)<br></code></pre></td></tr></table></figure><ul><li>map: 对原数组中所有元素执行操作组成一个新的数组</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> newNums = nums.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">n</span>) &#123;<br><span class="hljs-keyword">return</span> n * <span class="hljs-number">2</span><br>&#125;)<br></code></pre></td></tr></table></figure><ul><li>reduce: reduce会对数组中所有的内容进程汇总，返回一个值</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> total = nums.<span class="hljs-title function_">reduce</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">preValue, n</span>) &#123;  <span class="hljs-comment">// 前值，当前值</span><br><span class="hljs-keyword">return</span> preValue + n<br>&#125;, <span class="hljs-number">0</span>)  <span class="hljs-comment">// 第二个参数是初始值</span><br></code></pre></td></tr></table></figure><h2 id="1-10-v-model"><a href="#1-10-v-model" class="headerlink" title="1.10 v-model"></a>1.10 v-model</h2><p><strong>表单绑定v-model</strong></p><ul><li>表单控件在实际开发中是非常常见的，特别是对于用户信息的提交，需要大量的表单</li><li>Vue中使用v-model指令来实现表单元素和数据的双向绑定</li><li>案例解析<ul><li>当我们在输入框输入内容时，因为input中v-model绑定了message，所以会实时将输入的内容传递给message，message发生改变</li><li>当message发生改变时，因为上面我们使用Mustache语法，将message的值插入到DOM中，所以DOM会发生相应的改变</li><li>所以v-model实现了数据的双向绑定</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">message</span>: <span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="language-javascript">        &#125;</span><br></code></pre></td></tr></table></figure><p><strong>v-model原理</strong></p><p>v-model其实是一个语法糖，它背后本质上包含两个操作：</p><ol><li>v-bind绑定一个value属性</li><li>v-on指令给当前元素绑定input事件</li></ol><p>也可以使用v-bind和v-on实现v-model的功能：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;message&quot;</span>&gt;</span><br>等同于<br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;message&quot;</span> <span class="hljs-attr">v-on:input</span>=<span class="hljs-string">&quot;message = $event.target.value&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-model用于radio</strong></p><p>设想这样一个场景，在表单提交的过程中需要选择性别，要么男要么女</p><p>首先要使两个选项互斥，需要给两个选项指定相同的name：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sex&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>选择的性别是：&#123;&#123; sex &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当两个radio指定了相同的name&#x3D;“sex”时，浏览器认为这两个radio是互斥的，这样在页面上这两个选项只能被选中一个</p><p>如果<em><strong>使用v-model处理互斥选项</strong></em><em><strong>，则不需要指定相同的name&#x3D;”sex”, 而只需要让这两个radio绑定相同的data即可</strong></em>：</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>男<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>选择的性别是：&#123;&#123; sex &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span></span><br><span class="language-javascript">        &#125;</span><br></code></pre></td></tr></table></figure><p>如上，只需要将两个radio都指定v-model&#x3D;”sex”，那么在页面上他们就是互斥的；同时还可以在data中指定初始值sex: ‘male’, 这样在页面上默认的性别值就是male， 体现了Vue数据驱动的特点。</p><p><strong>v-model用于checkbox</strong></p><p>复选框分为两种情况：单选框和多选框</p><p>单个勾选框:</p><ul><li>v-model即为bool值</li><li>吃屎input的value并不影响v-model的值</li></ul><p>多个复选框</p><ul><li>当是多个复选框时，因为可以选中多个，所以对应的data中的属性时一个数组</li><li>当选中某一个时。就会将input的value添加到数组中</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 单选框 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;license&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;license&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;isAgree&quot;</span>&gt;</span>同意协议<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您选择的是：&#123;&#123; isAgree &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">:disabled</span>=<span class="hljs-string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--多选框--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;唱&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span>唱<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;跳&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span>跳<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;rap&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span>rap<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;篮球&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;hobbies&quot;</span>&gt;</span>篮球<br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您的爱好是： &#123;&#123; hobbies &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">isAgree</span>: <span class="hljs-literal">false</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">hobbies</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>v-model用于select</strong></p><p>和checkbox一样，select也分为单选和多选的情况</p><ul><li>单选：只能选中一个值<ul><li>v-model绑定的是一个值</li><li>当我们选中option中的一个时，会将它对应的value赋值到mySelect中</li></ul></li><li>多选：可以选中多个值<ul><li>v-model绑定的是一个数组</li><li>当选中多个值时，就会将选中的option对应的value添加到数组中</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!-- select 选中一个--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruits&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fruit&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;apple&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;orange&quot;</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;peach&quot;</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您选择的水果是：&#123;&#123; fruit &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- select选中多个 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;fruits&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;fruits&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;apple&quot;</span>&gt;</span>苹果<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;banana&quot;</span>&gt;</span>香蕉<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;orange&quot;</span>&gt;</span>橘子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;peach&quot;</span>&gt;</span>桃子<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您选择的水果分别是：&#123;&#123; fruits &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">fruit</span>: <span class="hljs-string">&#x27;&#x27;</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">fruits</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>也可以用值绑定的方式，直接代码:</p><figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in balls&quot;</span> <span class="hljs-attr">:for</span>=<span class="hljs-string">&quot;item&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectBalls&quot;</span> &gt;</span>&#123;&#123; item &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>您选择的球有: &#123;&#123; selectBalls &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/vue.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;</span><br><span class="language-javascript">        <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,</span><br><span class="language-javascript">        <span class="hljs-attr">data</span>: &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">balls</span>: [<span class="hljs-string">&#x27;篮球&#x27;</span>, <span class="hljs-string">&#x27;足球&#x27;</span>, <span class="hljs-string">&#x27;羽毛球&#x27;</span>, <span class="hljs-string">&#x27;弹珠球&#x27;</span>],</span><br><span class="language-javascript">            <span class="hljs-attr">selectBalls</span>: []</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>修饰符</strong></p><p><strong>lazy修饰符</strong>:</p><ul><li>默认情况下, v-model默认是在input事件中同步输入框的数据的。</li><li>也就是说，一旦有数据发生改变对应的data 的数据就会自动发生改变。</li><li>lazy修饰符可以让数据在失去焦点或者回车时才会更新:</li></ul><p><strong>number修饰符:</strong></p><ul><li><p>默认情况下,在输入框中无论我们输入的是字母还是数字,都会被当做字符串类型进行处理。</p></li><li><p>但是如果我们希望处理的是数字类型,那么最好直接将内容当做数字处理。</p></li><li><p>number修饰符可以让在输入框中输入的内容自动转成数字类型</p></li></ul><p><strong>trim修饰符:</strong></p><ul><li><p>如果输入的内容首尾有很多空格,通常我们希望将其去除</p></li><li><p>trim修饰符可以过滤内容左右两边的空格</p></li></ul>]]></content>
    
    
    <summary type="html">Vue学习笔记，vue安装，vue基础概念入门</summary>
    
    
    
    <category term="前端" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/categories/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
    <category term="前端" scheme="http://www.qintianjun.top/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="Vue" scheme="http://www.qintianjun.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer题的部分python实现</title>
    <link href="http://www.qintianjun.top/2021/06/14/%E5%89%91%E6%8C%87offer-%E9%A2%98%E7%9A%84%E9%83%A8%E5%88%86python%E5%AE%9E%E7%8E%B0/"/>
    <id>http://www.qintianjun.top/2021/06/14/%E5%89%91%E6%8C%87offer-%E9%A2%98%E7%9A%84%E9%83%A8%E5%88%86python%E5%AE%9E%E7%8E%B0/</id>
    <published>2021-06-14T13:47:52.000Z</published>
    <updated>2022-04-20T03:07:53.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h2><p>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项（从0开始，第0项为0）。</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Fibonacci</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-comment"># write code here</span><br>        a=<span class="hljs-number">0</span><br>        b=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            a,b = b,a+b <br>        <span class="hljs-keyword">return</span> a <br></code></pre></td></tr></table></figure><p>不要用递归，会超过限制导致超时通不过</p><h2 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h2><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><p>不要用递归，会超时：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">jumpFloor</span>(<span class="hljs-params">self, number</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> number == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> number == <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> self.jumpFloor(number - <span class="hljs-number">1</span>) + self.jumpFloor(number - <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>正确解法：</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">jumpFloor</span>(<span class="hljs-params">self, number</span>):<br>    <span class="hljs-comment"># write code here</span><br>    <span class="hljs-keyword">if</span> number == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> number == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    a, b = <span class="hljs-number">1</span>, <span class="hljs-number">2</span><br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt; number:<br>        a, b = b, a + b<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> b<br></code></pre></td></tr></table></figure><h2 id="两个栈实现一个队列"><a href="#两个栈实现一个队列" class="headerlink" title="两个栈实现一个队列"></a>两个栈实现一个队列</h2><p>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><ul><li>栈A用来作入队列</li><li>栈B用来出队列，当栈B为空时，栈A全部出栈到栈B,栈B再出栈（即出队列）</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.stackA = []<br>        self.stackB = []<br>         <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, node</span>):<br>        <span class="hljs-comment"># write code here</span><br>        self.stackA.append(node)<br>         <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># return xx</span><br>        <span class="hljs-keyword">if</span> self.stackB:<br>            <span class="hljs-keyword">return</span> self.stackB.pop()<br>        <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> self.stackA:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">while</span> self.stackA:<br>                self.stackB.append(self.stackA.pop())<br>            <span class="hljs-keyword">return</span> self.stackB.pop()<br></code></pre></td></tr></table></figure><h2 id="链表中倒数第K个节点"><a href="#链表中倒数第K个节点" class="headerlink" title="链表中倒数第K个节点"></a>链表中倒数第K个节点</h2><p>输入一个链表，输出该链表中倒数第k个结点。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>Python 设置两个指针，p1，p2，先让p2走k-1步，然后再一起走，直到p2为最后一个 时，p1即为倒数第k个节点 </p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">FindKthToTail</span>(<span class="hljs-params">self, head, k</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> head==<span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> k&lt;=<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment">#设置两个指针，p2指针先走（k-1）步，然后再一起走，当p2为最后一个时，p1就为倒数第k个 数</span><br>        p2=head<br>        p1=head<br>        <span class="hljs-comment">#p2先走，走k-1步，如果k大于链表长度则返回 空，否则的话继续走</span><br>        <span class="hljs-keyword">while</span> k&gt;<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> p2.<span class="hljs-built_in">next</span>!=<span class="hljs-literal">None</span>:<br>                p2=p2.<span class="hljs-built_in">next</span><br>                k-=<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        <span class="hljs-comment">#两个指针一起 走，一直到p2为最后一个,p1即为所求</span><br>        <span class="hljs-keyword">while</span> p2.<span class="hljs-built_in">next</span>!=<span class="hljs-literal">None</span>:<br>            p1=p1.<span class="hljs-built_in">next</span><br>            p2=p2.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> p1<br></code></pre></td></tr></table></figure><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h2><p>输入一个链表，反转链表后，输出新链表的表头。</p><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>遍历链表，把1的next置为None，2的next置为1，以此类推，5的next置为4。得到反转链表。需要考虑链表只有1个元素的情况。图中有具体的每步迭代的思路，最后输出pre而不是cur是因为最后一次迭代后cur已经指向None了，而pre是完整的反向链表。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回ListNode</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">ReverseList</span>(<span class="hljs-params">self, pHead</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> pHead <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> pHead.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> pHead<br>        <br>        prev = <span class="hljs-literal">None</span><br>        cur = pHead<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            tmp = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = prev<br>            prev = cur<br>            cur = tmp<br>        <span class="hljs-keyword">return</span> prev<br></code></pre></td></tr></table></figure><h2 id="合并两个有序的链表"><a href="#合并两个有序的链表" class="headerlink" title="合并两个有序的链表"></a>合并两个有序的链表</h2><p>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><ul><li>比较两个链表的首结点，哪个小的的结点则合并到第三个链表尾结点，并向前移动一个结点。</li><li>步骤一结果会有一个链表先遍历结束，或者没有</li><li>第三个链表尾结点指向剩余未遍历结束的链表</li><li>返回第三个链表首结点</li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回合并后列表</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Merge</span>(<span class="hljs-params">self, pHead1, pHead2</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-comment">#初始化</span><br>        tmp = ListNode(<span class="hljs-number">0</span>)<br>        pHead = tmp        <br>        <span class="hljs-keyword">while</span> pHead1 <span class="hljs-keyword">and</span> pHead2:<br>            <span class="hljs-keyword">if</span> pHead1.val &lt; pHead2.val:<br>                tmp.<span class="hljs-built_in">next</span> = pHead1<br>                pHead1 = pHead1.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">else</span>:<br>                tmp.<span class="hljs-built_in">next</span> = pHead2<br>                pHead2 = pHead2.<span class="hljs-built_in">next</span><br>            tmp = tmp.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pHead1:<br>            tmp.<span class="hljs-built_in">next</span> = pHead2<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> pHead2:<br>            tmp.<span class="hljs-built_in">next</span> = pHead1<br>        <span class="hljs-keyword">return</span> pHead.<span class="hljs-built_in">next</span><br></code></pre></td></tr></table></figure><h2 id="找数组中出现次数超过一半的数字"><a href="#找数组中出现次数超过一半的数字" class="headerlink" title="找数组中出现次数超过一半的数字"></a>找数组中出现次数超过一半的数字</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>第一个数字作为第一个士兵，守阵地；count &#x3D; 1；<br>遇到相同元素，count++;<br>遇到不相同元素，即为敌人，同归于尽,count–；当遇到count为0的情况，又以新的i值作为守阵地的士兵，继续下去，到最后还留在阵地上的士兵，有可能是主元素。<br>再加一次循环，记录这个士兵的个数看是否大于数组一半即可。</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-string">&quot;&quot;&quot;第二种，假设有这个数字，那么它的数量一定比其它所有数字之和还要多，按照这个思路得出num，然后验证</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">MoreThanHalfNum_Solution</span>(<span class="hljs-params">self, numbers</span>):<br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> numbers:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        num = numbers[<span class="hljs-number">0</span>]<br>        count = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(numbers)):<br>            <span class="hljs-keyword">if</span> numbers[i] == num:<br>                count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                count -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> count == <span class="hljs-number">0</span>:<br>                num = numbers[i]<br>                count = <span class="hljs-number">1</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-keyword">if</span> i == num:<br>                count += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> num <span class="hljs-keyword">if</span> count &gt; <span class="hljs-built_in">len</span>(numbers) / <span class="hljs-number">2.0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">MoreThanHalfNum_Solution</span>(<span class="hljs-params">self, numbers</span>):<br>        <span class="hljs-comment"># write code here</span><br>        last = <span class="hljs-number">0</span><br>        last_count = <span class="hljs-number">0</span><br>        <br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>            <span class="hljs-keyword">if</span> last_count == <span class="hljs-number">0</span>:<br>                last = num<br>                last_count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> num == last:<br>                    last_count += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">else</span>:<br>                    last_count -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> last_count == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            last_count = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> numbers:<br>                <span class="hljs-keyword">if</span> num == last:<br>                    last_count += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">return</span> last <span class="hljs-keyword">if</span> last_count &gt; <span class="hljs-built_in">len</span>(numbers) // <span class="hljs-number">2</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h2><p>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><h3 id="分析-amp-代码"><a href="#分析-amp-代码" class="headerlink" title="分析&amp;代码"></a>分析&amp;代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 层次遍历</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">levelOrder</span>(<span class="hljs-params">self, root</span>):<br>        <span class="hljs-comment"># write your code here</span><br>        <span class="hljs-comment"># 存储最后层次遍历的结果</span><br>        res = []<br>        <span class="hljs-comment"># 层数</span><br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-comment"># 如果根节点为空，则返回空列表</span><br>        <span class="hljs-keyword">if</span> root <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> count<br>        <span class="hljs-comment"># 模拟一个队列储存节点</span><br>        q = []<br>        <span class="hljs-comment"># 首先将根节点入队</span><br>        q.append(root)<br>        <span class="hljs-comment"># 列表为空时，循环终止</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(q) != <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># 使用列表存储同层节点</span><br>            tmp = []<br>            <span class="hljs-comment"># 记录同层节点的个数</span><br>            length = <span class="hljs-built_in">len</span>(q)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(length):<br>                <span class="hljs-comment"># 将同层节点依次出队</span><br>                r = q.pop(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">if</span> r.left <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    <span class="hljs-comment"># 非空左孩子入队</span><br>                    q.append(r.left)<br>                <span class="hljs-keyword">if</span> r.right <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    <span class="hljs-comment"># 非空右孩子入队</span><br>                    q.append(r.right)<br>                tmp.append(r.val)<br>            <span class="hljs-keyword">if</span> tmp:<br>                count += <span class="hljs-number">1</span>  <span class="hljs-comment"># 统计层数</span><br>            res.append(tmp)<br>        <span class="hljs-keyword">return</span> count<br></code></pre></td></tr></table></figure><h2 id="二叉搜索树的第k个结点"><a href="#二叉搜索树的第k个结点" class="headerlink" title="二叉搜索树的第k个结点"></a>二叉搜索树的第k个结点</h2><p>给定一棵二叉搜索树，请找出其中的第k小的结点。例如， （5，3，7，2，4，6，8）  中，按结点数值大小顺序第三小结点的值为4。</p><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>中序遍历的结果就是有序序列</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-comment"># 返回对应节点TreeNode</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">KthNode</span>(<span class="hljs-params">self, pRoot, k</span>):<br>        self.res=[]<br>        self.dfs(pRoot)<br>        <span class="hljs-keyword">return</span> self.res[k-<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> <span class="hljs-number">0</span>&lt;k&lt;=<span class="hljs-built_in">len</span>(self.res) <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">self,root</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<span class="hljs-keyword">return</span><br>        self.dfs(root.left)<br>        self.res.append(root)<br>        self.dfs(root.right)<br></code></pre></td></tr></table></figure><h2 id="单链表去重"><a href="#单链表去重" class="headerlink" title="单链表去重"></a>单链表去重</h2><p>给定一个单链表，对其中元素进行去重</p><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><ul><li>给定一个头结点，把当前元素指针cur指向它</li><li>依次遍历啊链表中所有元素，如果有重复则删除对应节点</li><li>将cur指针后移一位，重复上面的过程直到链表尾</li></ul><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_repeat</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># head指向头节点</span><br>    <span class="hljs-keyword">if</span> self.is_empty():<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">elif</span> self.length() &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        node = self.head<br>        <span class="hljs-keyword">while</span> node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            prev_node = node<br>            cmp_node = node.<span class="hljs-built_in">next</span><br>            <span class="hljs-keyword">while</span> cmp_node.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">if</span> node.val == cmp_node.val:  <span class="hljs-comment"># 找到重复节点</span><br>                        prev_node.<span class="hljs-built_in">next</span> = cmp_node.<span class="hljs-built_in">next</span><br>                        cmp_node = cmp_node.<span class="hljs-built_in">next</span><br>                <span class="hljs-keyword">else</span>:<br>                    cmp_node = cmp_node.<span class="hljs-built_in">next</span><br>                    prev_node = prev_node.<span class="hljs-built_in">next</span><br>            node = node.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">if</span> cmp_node.val == node.val:<br>            prev_node.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">题目出自牛客网《剑指offer》，均使用Python实现，刷了三天脑子要炸，我尽量吸收理解更新到博客吧, 算法基本功不行啊...</summary>
    
    
    
    <category term="Python" scheme="http://www.qintianjun.top/categories/Python/"/>
    
    <category term="Basic" scheme="http://www.qintianjun.top/categories/Python/Basic/"/>
    
    
    <category term="Python" scheme="http://www.qintianjun.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>常见数据结构及算法（python实现）</title>
    <link href="http://www.qintianjun.top/2021/06/14/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/14/%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%8F%8A%E7%AE%97%E6%B3%95%EF%BC%88python%E5%AE%9E%E7%8E%B0%EF%BC%89/</id>
    <published>2021-06-14T13:41:54.000Z</published>
    <updated>2022-04-20T03:08:29.932Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-线性结构"><a href="#1-线性结构" class="headerlink" title="1 线性结构"></a>1 线性结构</h1><p>特点：内存连续，可根据下标访问</p><h2 id="1-1-链表"><a href="#1-1-链表" class="headerlink" title="1.1 链表"></a>1.1 链表</h2><h3 id="1-1-1-单链表"><a href="#1-1-1-单链表" class="headerlink" title="1.1.1 单链表"></a>1.1.1 单链表</h3><p>单向链表也叫单链表，是链表中最简单的一种形式，它的每个节点包含两个域，一个信息域（元素域）和一个链接域。这个链接指向链表中的下一个节点，而最后一个节点的链接域则指向一个空值。</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/data_structure/%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E8%8A%82%E7%82%B9%E5%92%8C%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="img"></p><ul><li>表元素域elem用来存放具体的数据。</li><li>链接域next用来存放下一个节点的位置（python中的标识）</li><li>变量p指向链表的头节点（首节点）的位置，从p出发能找到表中的任意节点。</li></ul><p><em><strong>综上所述，单链表的实现主要包含两个部分：1. 单链表的实现 2. 单链表中每一个节点的实现</strong></em></p><p><strong>节点实现</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleNode</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;单链表的结点&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-comment"># _item存放数据元素</span><br>        self.item = item<br>        <span class="hljs-comment"># _next是下一个节点的标识</span><br>        self.<span class="hljs-built_in">next</span> = <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure><p><strong>单链表的操作</strong></p><ul><li>is_empty() 链表是否为空</li><li>length() 链表长度</li><li>travel() 遍历整个链表</li><li>add(item) 链表头部添加元素</li><li>append(item) 链表尾部添加元素</li><li>insert(pos, item) 指定位置添加元素</li><li>remove(item) 删除节点</li><li>search(item) 查找节点是否存在</li></ul><p><strong>链表的实现</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SingleLinkList</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, node=<span class="hljs-literal">None</span></span>):<br>        self.__head = node<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;链表是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">length</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;链表长度&quot;&quot;&quot;</span><br>        cur = self.__head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            cur = cur.<span class="hljs-built_in">next</span><br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">travel</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;遍历整个链表&quot;&quot;&quot;</span><br>        cur = self.__head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(cur.item, end=<span class="hljs-string">&quot; &quot;</span>)<br>            cur = cur.<span class="hljs-built_in">next</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">append</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;尾部插入节点&quot;&quot;&quot;</span><br>        node = SingleNode(item)<br>        <span class="hljs-keyword">if</span> self.is_empty():<br>            self.__head = node  <span class="hljs-comment"># 如果是空链表，那么直接把头指针只向node</span><br>        <span class="hljs-keyword">else</span>:<br>            cur = self.__head<br>            <span class="hljs-keyword">while</span> cur.<span class="hljs-built_in">next</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                cur = cur.<span class="hljs-built_in">next</span><br>            cur.<span class="hljs-built_in">next</span> = node<br></code></pre></td></tr></table></figure><h2 id="1-2-栈"><a href="#1-2-栈" class="headerlink" title="1.2 栈"></a>1.2 栈</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>栈（stack），有些地方称为堆栈，是一种容器，可存入数据元素、访问元素、删除元素，它的特点在于只能允许在容器的一端（称为栈顶端指标，英语：top）进行加入数据（英语：push）和输出数据（英语：pop）的运算。没有了位置概念，保证任何时候可以访问、删除的元素都是此前最后存入的那个元素，确定了一种默认的访问顺序。</p><p>由于栈数据结构只允许在一端进行操作，因而按照后进先出（LIFO, Last In First Out）的原理运作。</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/data_structure/%E6%A0%88.png" alt="img"></p><h3 id="栈的操作"><a href="#栈的操作" class="headerlink" title="栈的操作"></a>栈的操作</h3><ul><li>Stack() 创建一个新的空栈</li><li>push(item) 添加一个新的元素item到栈顶</li><li>pop() 弹出栈顶元素</li><li>peek() 返回栈顶元素</li><li>is_empty() 判断栈是否为空</li><li>size() 返回栈的元素个数</li></ul><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf8-*-</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__<span class="hljs-built_in">list</span> = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">push</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;添加一个新的元素item到栈顶&quot;&quot;&quot;</span><br>        self.__<span class="hljs-built_in">list</span>.append(item)<br>        <span class="hljs-comment"># 使用顺序表的时候从尾部操作，</span><br>        <span class="hljs-comment"># 因为顺序表对尾部操作的时间复杂度为o(1), 对头部操作的时间</span><br>        <span class="hljs-comment"># 复杂度为o(n)</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;弹出栈顶元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">peek</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回栈顶元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self.__<span class="hljs-built_in">list</span>:<br>            <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断栈是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.__<span class="hljs-built_in">list</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回栈的元素的个数&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.__<span class="hljs-built_in">list</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Stack()<br>    s.push(<span class="hljs-number">1</span>)<br>    s.push(<span class="hljs-number">2</span>)<br>    s.push(<span class="hljs-number">3</span>)<br>    s.push(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(s.pop())<br>    <span class="hljs-built_in">print</span>(s.pop())<br>    <span class="hljs-built_in">print</span>(s.pop())<br>    <span class="hljs-built_in">print</span>(s.pop())<br><br></code></pre></td></tr></table></figure><h2 id="1-3-队列"><a href="#1-3-队列" class="headerlink" title="1.3 队列"></a>1.3 队列</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>队列（queue）是只允许在一端进行插入操作，而在另一端进行删除操作的线性表。</p><p>队列是一种先进先出的（First In First Out）的线性表，简称FIFO。允许插入的一端为队尾，允许删除的一端为队头。队列不允许在中间部位进行操作！假设队列是q&#x3D;（a1，a2，……，an），那么a1就是队头元素，而an是队尾元素。这样我们就可以删除时，总是从a1开始，而插入时，总是在队列最后。这也比较符合我们通常生活中的习惯，排在第一个的优先出列，最后来的当然排在队伍最后。</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/data_structure/%E9%98%9F%E5%88%97%E6%A8%A1%E5%9E%8B.png" alt="img"></p><h3 id="队列操作"><a href="#队列操作" class="headerlink" title="队列操作"></a>队列操作</h3><ul><li>Queue() 创建一个空的队列</li><li>enqueue(item) 往队列中添加一个item元素</li><li>dequeue() 从队列头部删除一个元素</li><li>is_empty() 判断一个队列是否为空</li><li>size() 返回队列的大小</li></ul><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf8-*-</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;队列&quot;&quot;&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__<span class="hljs-built_in">list</span> = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">enqueue</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;往队列中添加一个item元素&quot;&quot;&quot;</span><br>        self.__<span class="hljs-built_in">list</span>.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dequeue</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从队列头部删除元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>.pop(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.__<span class="hljs-built_in">list</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回队列的大小&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.__<span class="hljs-built_in">list</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    s = Queue()<br>    s.enqueue(<span class="hljs-number">1</span>)<br>    s.enqueue(<span class="hljs-number">2</span>)<br>    s.enqueue(<span class="hljs-number">3</span>)<br>    s.enqueue(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(s.dequeue())<br>    <span class="hljs-built_in">print</span>(s.dequeue())<br>    <span class="hljs-built_in">print</span>(s.dequeue())<br>    <span class="hljs-built_in">print</span>(s.dequeue())<br><br></code></pre></td></tr></table></figure><h2 id="1-4-双端队列"><a href="#1-4-双端队列" class="headerlink" title="1.4 双端队列"></a>1.4 双端队列</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>双端队列（deque，全名double-ended queue），是一种具有队列和栈的性质的数据结构。</p><p>双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。双端队列可以在队列任意一端入队和出队。</p><p><img src="https://awsbucketforqtj.s3.ap-east-1.amazonaws.com/img/data_structure/%E5%8F%8C%E7%AB%AF%E9%98%9F%E5%88%97.png" alt="img"></p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><ul><li>Deque() 创建一个空的双端队列</li><li>add_front(item) 从队头加入一个item元素</li><li>add_rear(item) 从队尾加入一个item元素</li><li>remove_front() 从队头删除一个item元素</li><li>remove_rear() 从队尾删除一个item元素</li><li>is_empty() 判断双端队列是否为空</li><li>size() 返回队列的大小</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf8-*-</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dequeue</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.__<span class="hljs-built_in">list</span> = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_front</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从头部往队列中添加元素&quot;&quot;&quot;</span><br>        self.__<span class="hljs-built_in">list</span>.insert(<span class="hljs-number">0</span>, item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add_end</span>(<span class="hljs-params">self, item</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从尾部往队列中添加元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>.append(item)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop_front</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从头部取元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>.pop(<span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop_end</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;从尾部取元素&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.__<span class="hljs-built_in">list</span>.pop()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_empty</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;判断是否为空&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> self.__<span class="hljs-built_in">list</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;返回队列的大小&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(self.__<span class="hljs-built_in">list</span>)<br><br></code></pre></td></tr></table></figure><h1 id="2-常见排序算法"><a href="#2-常见排序算法" class="headerlink" title="2. 常见排序算法"></a>2. 常见排序算法</h1><h2 id="2-1-冒泡排序"><a href="#2-1-冒泡排序" class="headerlink" title="2.1 冒泡排序"></a>2.1 冒泡排序</h2><figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">def bubble_sort(<span class="hljs-keyword">array</span>):<br>    for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>) - 1):<br>        for j <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>) - i - 1):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">array</span>[j] &gt; <span class="hljs-keyword">array</span>[j + 1]:<br>                <span class="hljs-keyword">array</span>[j], <span class="hljs-keyword">array</span>[j + 1] = <span class="hljs-keyword">array</span>[j + 1], <span class="hljs-keyword">array</span>[j]<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span><br></code></pre></td></tr></table></figure><h2 id="2-2-选择排序"><a href="#2-2-选择排序" class="headerlink" title="2.2 选择排序"></a>2.2 选择排序</h2><figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">def select_sort(<span class="hljs-keyword">array</span>):<br>    for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>) - 1):<br>        min_index = i<br>        for j <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(i + 1, le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>)):<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">array</span>[j] &lt; <span class="hljs-keyword">array</span>[min_index]:<br>                min_index = j<br>        <span class="hljs-keyword">array</span>[i], <span class="hljs-keyword">array</span>[min_index] = <span class="hljs-keyword">array</span>[min_index], <span class="hljs-keyword">array</span>[i]<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span><br></code></pre></td></tr></table></figure><h2 id="2-3-插入排序"><a href="#2-3-插入排序" class="headerlink" title="2.3 插入排序"></a>2.3 插入排序</h2><figure class="highlight sas"><table><tr><td class="code"><pre><code class="hljs sas">def insert_sort(<span class="hljs-keyword">array</span>):<br>    <span class="hljs-keyword">if</span> le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>) &lt; 2:<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span><br>    for i <span class="hljs-keyword">in</span> <span class="hljs-meta">range</span>(1, le<span class="hljs-meta">n</span>(<span class="hljs-keyword">array</span>)):<br>        <span class="hljs-keyword">key</span> = <span class="hljs-keyword">array</span>[i]<br>        j = i - 1<br>        <span class="hljs-keyword">while</span> j &gt;= 0 <span class="hljs-keyword">and</span> <span class="hljs-keyword">array</span>[j] &gt; <span class="hljs-keyword">key</span>:<br>            <span class="hljs-keyword">array</span>[j+1] = <span class="hljs-keyword">array</span>[j]<br>            j -= 1<br>        <span class="hljs-keyword">array</span>[j + 1] = <span class="hljs-keyword">key</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span><br></code></pre></td></tr></table></figure><h2 id="2-4-归并排序"><a href="#2-4-归并排序" class="headerlink" title="2.4 归并排序"></a>2.4 归并排序</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">def merge_sort(array):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-literal">return</span> array<br>    <span class="hljs-keyword">mid</span> = <span class="hljs-built_in">len</span>(array)<span class="hljs-comment"> // 2</span><br>    left_li = merge_sort(array[:<span class="hljs-keyword">mid</span>])<br>    right_li = merge_sort(array[<span class="hljs-keyword">mid</span>:])<br><br>    l_pointer, r_pointer = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>    <span class="hljs-built_in">result</span> = []<br>    <span class="hljs-keyword">while</span> l_pointer &lt; <span class="hljs-built_in">len</span>(left_li) <span class="hljs-keyword">and</span> r_pointer &lt; <span class="hljs-built_in">len</span>(right_li):<br>        <span class="hljs-keyword">if</span> left_li[l_pointer] &lt; right_li[r_pointer]:<br>            <span class="hljs-built_in">result</span>.append(left_li[l_pointer])<br>            l_pointer += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">result</span>.append(right_li[r_pointer])<br>            r_pointer += <span class="hljs-number">1</span><br>    <span class="hljs-built_in">result</span> += left_li[l_pointer:]<br>    <span class="hljs-built_in">result</span> += right_li[r_pointer:]<br>    <span class="hljs-literal">return</span> <span class="hljs-built_in">result</span><br></code></pre></td></tr></table></figure><h2 id="2-5-快速排序"><a href="#2-5-快速排序" class="headerlink" title="2.5 快速排序"></a>2.5 快速排序</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">def quick_sort(array):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(array) &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-literal">return</span> array<br>    <span class="hljs-keyword">mid</span> = array[<span class="hljs-number">0</span>]<br>    left, <span class="hljs-literal">right</span> = list(), list()<br>    array.pop(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">for</span> <span class="hljs-keyword">item</span> <span class="hljs-keyword">in</span> array:<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">item</span> &lt; <span class="hljs-keyword">mid</span>:<br>            left.append(<span class="hljs-keyword">item</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-literal">right</span>.append(<span class="hljs-keyword">item</span>)<br>    <span class="hljs-literal">return</span> quick_sort(left) + [<span class="hljs-keyword">mid</span>] + quick_sort(<span class="hljs-literal">right</span>)<br></code></pre></td></tr></table></figure><h2 id="2-6-排序算法复杂度比较"><a href="#2-6-排序算法复杂度比较" class="headerlink" title="2.6 排序算法复杂度比较"></a>2.6 排序算法复杂度比较</h2><table><thead><tr><th>排序方法</th><th>平均情况</th><th>最好情况</th><th>最坏情况</th><th>辅助空间</th><th>稳定性</th></tr></thead><tbody><tr><td>冒泡排序</td><td>o(n^2)</td><td>o(n)</td><td>o(n^2)</td><td>o(l)</td><td>稳定</td></tr><tr><td>选择排序</td><td>o(n^2)</td><td>o(n^2)</td><td>o(n^2)</td><td>o(l)</td><td>不稳定</td></tr><tr><td>插入排序</td><td>o(n^2)</td><td>o(n)</td><td>o(n^2)</td><td>o(l)</td><td>稳定</td></tr><tr><td>希尔排序</td><td>o(nlogn) ~ o(n^2)</td><td>o(n^1.3)</td><td>o(n^2)</td><td>o(l)</td><td>不稳定</td></tr><tr><td>堆排序</td><td>o(nlogn)</td><td>o(nlogn)</td><td>o(nlogn)</td><td>o(l)</td><td>不稳定</td></tr><tr><td>归并排序</td><td>o(nlogn)</td><td>o(nlogn)</td><td>o(nlog)</td><td>o(n)</td><td>稳定</td></tr><tr><td>快速排序</td><td>o(nlogn)</td><td>o(nlogn)</td><td>o(n^2)</td><td>o(logn) ~ o(n)</td><td>不稳定</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">基本功不行啊...</summary>
    
    
    
    <category term="Python" scheme="http://www.qintianjun.top/categories/Python/"/>
    
    <category term="Basic" scheme="http://www.qintianjun.top/categories/Python/Basic/"/>
    
    
    <category term="Python" scheme="http://www.qintianjun.top/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>学习Django rest framework中遇到的一些问题及解决办法（持续更新）</title>
    <link href="http://www.qintianjun.top/2021/06/14/%E5%AD%A6%E4%B9%A0Django-rest-framework%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>http://www.qintianjun.top/2021/06/14/%E5%AD%A6%E4%B9%A0Django-rest-framework%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</id>
    <published>2021-06-14T12:51:36.000Z</published>
    <updated>2022-04-20T03:01:45.561Z</updated>
    
    <content type="html"><![CDATA[<p><strong>问题一: yum update后挂载不了项目目录</strong></p><p><em><strong>解决办法</strong></em><br>virtualbox和vagrant我都下的最新版，下的centos7.2box，添加box，初始化，启动，配置python和django环境都没问题，然后我更新了系统yum update，重启后就挂载不了项目目录了。需要按装插件vagrant plugin install vagrant-vbguest，然后vagrant reload就可以了。</p><p><strong>问题二: 升级过python版本后pip安装提示SSL证书问题</strong></p><p><em><strong>解决办法</strong></em></p><p>ubuntu下</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install openssl<br>apt-<span class="hljs-built_in">get</span> libssl-dev<br></code></pre></td></tr></table></figure><p>其他系统有用yum的，一起把yum的也贴一下把</p><figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> openssl<br>yum <span class="hljs-keyword">install</span> openssl-devel -y<br></code></pre></td></tr></table></figure><p>下面就是重点了，更改安装文件Moudles&#x2F;Setup里面的代码<br>下面代码执行的前提是当前路径是python3文件路径 </p><p>vi Modules&#x2F;Setup</p><p>然后更改里面的部分代码如下：</p><figure class="highlight crystal"><table><tr><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># Socket module helper for socket(2)</span><br>_socket socketmodule.c <br><span class="hljs-comment"># Socket module helper for SSL support; you must comment out the other</span><br><span class="hljs-comment"># socket line above, and possibly edit the SSL variable:</span><br><span class="hljs-comment">#SSL=/usr/local/ssl</span><br>_ssl _ssl.c \<br>-DUSE_SSL -I<span class="hljs-variable">$(</span>SSL)/<span class="hljs-keyword">include</span> -I<span class="hljs-variable">$(</span>SSL)/<span class="hljs-keyword">include</span>/openssl \<br>-L<span class="hljs-variable">$(</span>SSL)/<span class="hljs-class"><span class="hljs-keyword">lib</span> -<span class="hljs-title">lssl</span> -<span class="hljs-title">lcrypto</span></span><br></code></pre></td></tr></table></figure><p>之后就进行一系列的更新就行了</p><p><strong>问题三: 升级过python后pip安装的命令无法在命令行使用</strong></p><p><em><strong>解决办法</strong></em><br>把升级过的python目录加入PATH中</p><p><strong>问题四: vagrant目录中创建虚拟环境出错</strong><br>提示</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">Traceback (most recent call last):<br>  File <span class="hljs-string">&quot;/usr/local/python3/bin/virtualenv&quot;</span>, line <span class="hljs-number">11</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br>    sys.<span class="hljs-keyword">exit</span>(main())<br>  File <span class="hljs-string">&quot;/usr/local/python3/lib/python3.6/site-packages/virtualenv.py&quot;</span>, line <span class="hljs-number">712</span>, <span class="hljs-keyword">in</span> main<br>    symlink=options.symlink)<br>  File <span class="hljs-string">&quot;/usr/local/python3/lib/python3.6/site-packages/virtualenv.py&quot;</span>, line <span class="hljs-number">927</span>, <span class="hljs-keyword">in</span> create_e<br>nvironment    site_packages=site_packages, clear=clear, symlink=symlink))<br>  File <span class="hljs-string">&quot;/usr/local/python3/lib/python3.6/site-packages/virtualenv.py&quot;</span>, line <span class="hljs-number">1389</span>, <span class="hljs-keyword">in</span> install<br>_python    os.symlink(py_executable_base, full_pth)<br>OSError: [Errno <span class="hljs-number">71</span>] Protocol error: <span class="hljs-string">&#x27;python&#x27;</span> -&gt; <span class="hljs-string">&#x27;/vagrant/devops/venv/bin/python3&#x27;</span><br></code></pre></td></tr></table></figure><p><em><strong>解决办法</strong></em><br>虚拟环境在vagrant中的bug，加入–always-copy参数运行即可成功创建</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">This error can be fixed <span class="hljs-keyword">if</span> you <span class="hljs-built_in">create</span> <span class="hljs-keyword">the</span> virtual env outside <span class="hljs-keyword">the</span> /vagrant/ shared <span class="hljs-built_in">folder</span>...<br><br>If go <span class="hljs-built_in">to</span> <span class="hljs-keyword">the</span> home <span class="hljs-built_in">folder</span> <span class="hljs-keyword">of</span> your vagrant user, you can <span class="hljs-built_in">create</span> <span class="hljs-keyword">the</span> virtualenv <span class="hljs-keyword">in</span> there <span class="hljs-keyword">without</span> this problem!<br><br>Just <span class="hljs-keyword">the</span> venv must be out <span class="hljs-keyword">of</span> this /vagrant/ <span class="hljs-built_in">directory</span>... <span class="hljs-keyword">after</span> that you can go work <span class="hljs-keyword">as</span> usually activating this venv <span class="hljs-keyword">and</span> working <span class="hljs-keyword">with</span> your sorce code <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> usual /vagrat/ shared dir.<br></code></pre></td></tr></table></figure><p><strong>问题五：手动python版本升级后yum等运行不正常</strong></p><p><em><strong>解决办法</strong></em><br>在升级前做好备份工作，给原Python重命名成<code>python_old</code>,手动编辑<code>/usr/yum</code>文件，将其指向老版本的python，如：<code>#!/usr/bin/python_old</code>,这样yum运行的时候会找到老版本的Python，可以正常运行；同时修改<code>/usr/libexec/urlgrabber-ext-down</code>文件，修改方法同上。</p><p><strong>问题六：UnicodeEncodeError: ‘ascii’ codec can’t encode characters in position 8-11: ordinal not in range(128)</strong></p><p><em><strong>解决方法</strong></em><br>字符集问题，在程序开头加上：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">reload</span><span class="hljs-params">(sys)</span></span><br>sys<span class="hljs-selector-class">.setdefaultencoding</span>( <span class="hljs-string">&quot;utf-8&quot;</span> )<br></code></pre></td></tr></table></figure><p>指定字符集即可解决。</p><p><strong>问题七：在IDE的命令行下提示django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.</strong></p><p><em><strong>解决办法（待确认）</strong></em><br>使用intelliJ Idea开发django项目，启动 manage.py 测试时，会出现如上所示问题。根据提示，有两种解决方法： </p><ol><li>define the environment variable DJANGO_SETTINGS_MODULE</li></ol><p>在manage.py文件中添加</p><figure class="highlight moonscript"><table><tr><td class="code"><pre><code class="hljs moonscript"><span class="hljs-keyword">import</span> <span class="hljs-built_in">os</span><br><span class="hljs-built_in">os</span>.environ.setdefault(<span class="hljs-string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, <span class="hljs-string">&quot;你的project.settings&quot;</span>)<br></code></pre></td></tr></table></figure><ol start="2"><li>call settings.configure() before accessing settings</li></ol><p>manage.py文件中添加</p><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> django.conf import<span class="hljs-built_in"> settings</span><br><span class="hljs-built_in"></span>settings.configure(<span class="hljs-attribute">DEBUG</span>=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><p>添加完代码后，检查是否修改项目的project structure设置 </p><figure class="highlight clean"><table><tr><td class="code"><pre><code class="hljs clean">Project structure-&gt;Facets-&gt;Django-&gt;django project root:  ##你的django项目路径<br>settings:  ##你的settings.py文件路径<br>manage.py script:  manage.py<br>Environment variables:   ##添写需要的环境变量<br></code></pre></td></tr></table></figure><p><strong>问题八： 导入django_filters不成功，提示<code>No module named ‘django_filter’</code></strong></p><p><em><strong>解决方法</strong></em><br>进入到虚拟环境, 输入<code>pip list</code>看到pip安装列表, 有django-filters 0.2.1, 看着没啥问题</p><p>手动进入到虚拟环境的site-packages目录:<br><code>cd ~/.virtualenvs/django_py3_1.11/lib/python3.5/site-packages/</code>输入ll 命令查看目录所有文件<br>…&#x2F;site-packages$ ll<br>发现只有’‘django_filters-0.2.1.dist-info’‘目录,并没有’‘django_filters’’, 而导入包的时候是需要找’‘django_filters’’, 证明包是有问题的<br>发现只有’’django_filters-0.2.1.dist-info’’目录,并没有’’django_filters’’, 而导入包的时候是需要找’’django_filters’’, 证明包是有问题的</p><p>阅读了README文档, 发现新版本的安装方式为:<br><code>pip install django-filter  # 新版本安装后面不用s</code><br>卸载了原来的版本,再使用<code>pip install django-filter</code>安装了新版本, 然后问题就迎刃而解了, site-packages目录发生了变化<br>出现了django_filters目录,这样导包就不会有问题了</p><p><strong>问题九： 在Django项目外使用其ORM模块</strong></p><p><em><strong>解决办法</strong></em><br>在脚本开头加入如下内容：</p><figure class="highlight stylus"><table><tr><td class="code"><pre><code class="hljs stylus">#!/usr/bin/env python<br>import os<br>import sys<br> <br>import django<br> <br> <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dir = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.dirname</span>(os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.abspath</span>(__file__))<br>    dir = os<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.join</span>(dir, <span class="hljs-string">&#x27;db&#x27;</span>)<br>    sys<span class="hljs-selector-class">.path</span><span class="hljs-selector-class">.insert</span>(<span class="hljs-number">0</span>, dir)<br>    settings_path = <span class="hljs-string">&#x27;db.settings&#x27;</span><br>    os<span class="hljs-selector-class">.environ</span><span class="hljs-selector-class">.setdefault</span>(<span class="hljs-string">&quot;DJANGO_SETTINGS_MODULE&quot;</span>, settings_path)<br>    django<span class="hljs-selector-class">.setup</span>()<br></code></pre></td></tr></table></figure><p>之后就可以导入models操作数据库。</p><p><strong>问题十：ERROR in .&#x2F;node_modules&#x2F;<a href="mailto:&#x5f;&#101;&#x6c;&#x65;&#x6d;&#101;&#x6e;&#x74;&#45;&#117;&#x69;&#64;&#50;&#x2e;&#52;&#46;&#x32;">&#x5f;&#101;&#x6c;&#x65;&#x6d;&#101;&#x6e;&#x74;&#45;&#117;&#x69;&#64;&#50;&#x2e;&#52;&#46;&#x32;</a>@element-ui&#x2F;lib&#x2F;theme-chalk&#x2F;fonts&#x2F;element-icons.ttf</strong></p><p><em><strong>问题描述</strong></em></p><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle">ERROR in .<span class="hljs-regexp">/node_modules/</span>_element-ui@<span class="hljs-number">2.4</span>.<span class="hljs-number">2</span>@element-ui<span class="hljs-regexp">/lib/</span>theme-chalk<span class="hljs-regexp">/fonts/</span>element-icons.ttf<br>Module parse failed: Unexpected character <span class="hljs-string">&#x27; &#x27;</span> (<span class="hljs-number">1</span>:<span class="hljs-number">0</span>)<br>You may need an appropriate loader to handle <span class="hljs-keyword">this</span> <span class="hljs-keyword">file</span> type.<br>(<span class="hljs-keyword">Source</span> code omitted <span class="hljs-keyword">for</span> <span class="hljs-keyword">this</span> binary <span class="hljs-keyword">file</span>)<br> @ .<span class="hljs-regexp">/node_modules/</span>_css-loader@<span class="hljs-number">0.28</span>.<span class="hljs-number">11</span>@css-loader!.<span class="hljs-regexp">/node_modules/</span>_element-ui@<span class="hljs-number">2.4</span>.<span class="hljs-number">2</span>@element-ui<span class="hljs-regexp">/lib/</span>theme-chalk/index.css <span class="hljs-number">7</span>:<span class="hljs-number">411</span>-<span class="hljs-number">447</span><br> @ .<span class="hljs-regexp">/node_modules/</span>_element-ui@<span class="hljs-number">2.4</span>.<span class="hljs-number">2</span>@element-ui<span class="hljs-regexp">/lib/</span>theme-chalk/index.css<br> @ .<span class="hljs-regexp">/src/m</span>ain.js<br> @ multi .<span class="hljs-regexp">/node_modules/</span>_webpack-dev-server@<span class="hljs-number">2.11</span>.<span class="hljs-number">2</span>@webpack-dev-server<span class="hljs-regexp">/client?http:/</span><span class="hljs-regexp">/localhost:8080 webpack/</span>hot<span class="hljs-regexp">/dev-server ./</span>src/main.js<br></code></pre></td></tr></table></figure><p><strong>解决办法</strong><br>在webpack.config.js里配置</p><figure class="highlight js"><table><tr><td class="code"><pre><code class="hljs js">&#123;<br>  <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,<br>  <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;file-loader&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>问题十一 <code>python manage.py makemigrations</code>运行时提示<code>get_new_connection     conn.encoders[SafeBytes] = conn.encoders[bytes] KeyError: &lt;class &#39;bytes&#39;&gt;</code></strong></p><p><em><strong>解决办法</strong></em><br>在PROJECTNAME目录下新建一个<code>__init__.py</code>文件,里面内容如下：</p><figure class="highlight elm"><table><tr><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> pymysql<br><span class="hljs-title">pymysql</span>.install_as_MySQLdb()<br></code></pre></td></tr></table></figure><p>重新创建数据库迁移文件即可。</p><p><strong>问题十二 后端页面提示<code>&#39;CSRFCheck&#39; object has no attribute &#39;process_request&#39;</code></strong></p><p><em><strong>问题描述</strong></em><br>django1.11.1版本使用APIView<br><code>from rest_framework.views import APIView</code><br>的时候(也出现过引入JWT的时候)，后端前端会报错，<br><code>&#39;CSRFCheck&#39; object has no attribute &#39;process_request&#39;</code></p><p><em><strong>解决办法</strong></em></p><p>方法一：<br>将Django版本升级到1.11.6以上：</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pip</span> install --upgrade django==<span class="hljs-number">1</span>.<span class="hljs-number">11</span>.<span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>方法二：<br>在settings.py文件中找到如下内容并注释：</p><figure class="highlight autoit"><table><tr><td class="code"><pre><code class="hljs autoit">...<br><span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (<br>    <span class="hljs-string">&#x27;rest_framework_jwt.authentication.JSONWebTokenAuthentication&#x27;</span>,<br>    <span class="hljs-meta"># <span class="hljs-string">&#x27;rest_framework.authentication.SessionAuthentication&#x27;</span>,</span><br>    <span class="hljs-meta"># <span class="hljs-string">&#x27;rest_framework.authentication.BasicAuthentication&#x27;</span>,</span><br>)<br></code></pre></td></tr></table></figure><p><strong>问题十三: Django继承AbstractUser新建User Model时出现fields.E304错误</strong></p><p><em><strong>问题描述</strong></em><br>makemigratios时出现：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">auth.<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>: (fields.E304) <span class="hljs-keyword">Reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’ clashes <span class="hljs-keyword">with</span> <span class="hljs-keyword">reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’.<br>HINT: <span class="hljs-keyword">Add</span> <span class="hljs-keyword">or</span> change a related_name argument <span class="hljs-keyword">to</span> the definition <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’ <span class="hljs-keyword">or</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’.<br>auth.<span class="hljs-keyword">User</span>.user_permissions: (fields.E304) <span class="hljs-keyword">Reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’ clashes <span class="hljs-keyword">with</span> <span class="hljs-keyword">reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’.<br>HINT: <span class="hljs-keyword">Add</span> <span class="hljs-keyword">or</span> change a related_name argument <span class="hljs-keyword">to</span> the definition <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’ <span class="hljs-keyword">or</span> ‘<span class="hljs-keyword">User</span>.user_permissions’.<br>users.<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>: (fields.E304) <span class="hljs-keyword">Reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’ clashes <span class="hljs-keyword">with</span> <span class="hljs-keyword">reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’.<br>HINT: <span class="hljs-keyword">Add</span> <span class="hljs-keyword">or</span> change a related_name argument <span class="hljs-keyword">to</span> the definition <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’ <span class="hljs-keyword">or</span> ‘<span class="hljs-keyword">User</span>.<span class="hljs-keyword">groups</span>’.<br>users.<span class="hljs-keyword">User</span>.head_url: (fields.E210) Cannot use ImageField because Pillow <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> installed.<br>HINT: <span class="hljs-keyword">Get</span> Pillow at https://pypi.python.org/pypi/Pillow <span class="hljs-keyword">or</span> run command “pip install Pillow”.<br>users.<span class="hljs-keyword">User</span>.user_permissions: (fields.E304) <span class="hljs-keyword">Reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’ clashes <span class="hljs-keyword">with</span> <span class="hljs-keyword">reverse</span> accessor <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’.<br>HINT: <span class="hljs-keyword">Add</span> <span class="hljs-keyword">or</span> change a related_name argument <span class="hljs-keyword">to</span> the definition <span class="hljs-keyword">for</span> ‘<span class="hljs-keyword">User</span>.user_permissions’ <span class="hljs-keyword">or</span> ‘<span class="hljs-keyword">User</span>.user_permissions’.<br></code></pre></td></tr></table></figure><p><em><strong>解决办法</strong></em><br>需要在setting中重载AUTH_USER_MODEL</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">AUTH_USER_MODEL = <span class="hljs-string">&#x27;users.UserProfile&#x27;</span><br><span class="hljs-built_in">users</span>：appname<br>UserProfile：modelname<br></code></pre></td></tr></table></figure><p><strong>问题十四：Django执行manage.py migrate无效,提示No migrations to apply.</strong></p><p><em><strong>问题描述</strong></em><br>已有的model，修改之后，想重新建模，于是将migrations文件夹中除__init__.py之外其他文件都删掉，再次执行以下步骤python manage.py makemigrations确认成功，执行python manage.py migrate，提示No migrations to apply. 表示一脸懵逼。</p><p><em><strong>解决办法</strong></em><br>造成多次应用migrations失败的原因是，当前model是修改过的，原来的migrations已经被我删除，但是，重新生成的migrations使用递增整数记名，所以，在django_migrations表中0001，0002等前面几个数字的文件都已被记录，在Django看来，被记录了就相当于已应用，所以，会出现刚开始的No migrations to apply.到数据库中删除相应记录和对应migration文件即可。即：</p><p>第一步：</p><p>删除该app名字下的migrations下的__init__.py等文件。</p><p>第二步：</p><p>进入数据库，找到django_migrations的表，删除该app名字的所有记录。</p><p>第三步：执行下面这两条命令：（在项目目录下）</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> makemigrations<br><br><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate<br></code></pre></td></tr></table></figure><p><strong>问题十五：celery + redis执行异步任务时报错 AttributeError: ‘unicode’ object has no attribute ‘iteritems’</strong></p><p><strong>解决办法</strong><br>如果python版本为2.7,将pip安装的reids库的版本降到2.X即可</p><p><strong>问题十六： 在生产环境中使用gunicorn方式启动，Django的日志不能按正确的方式打印到设置的文件夹中</strong></p><p><strong>解决办法</strong></p><p>目前经测试，使用如下的设置可以正常的输出日志文件到Django中设置的对应log目录：</p><ul><li>安装gunicorn后，在程序对应的目录下新建gunicorn_config.py文件，内容如下：</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=utf-8</span><br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> multiprocessing<br><br>path_of_current_file = os.path.abspath(__file__)<br>path_of_current_dir = os.path.split(path_of_current_file)[<span class="hljs-number">0</span>]<br>_file_name = os.path.basename(__file__)<br>sys.path.insert(<span class="hljs-number">0</span>, path_of_current_dir)<br><br>worker_class = <span class="hljs-string">&#x27;sync&#x27;</span><br>workers = multiprocessing.cpu_count() * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>  <span class="hljs-comment"># 根据情况设置</span><br>chdir = path_of_current_dir<br><br>worker_connections = <span class="hljs-number">1000</span><br>timeout = <span class="hljs-number">30</span><br>max_requests = <span class="hljs-number">2000</span><br>graceful_timeout = <span class="hljs-number">30</span><br>loglevel = <span class="hljs-string">&#x27;info&#x27;</span><br>reload = <span class="hljs-literal">True</span><br>debug = <span class="hljs-literal">False</span><br><br>bind = <span class="hljs-string">&quot;%s:%s&quot;</span> % (<span class="hljs-string">&quot;0.0.0.0&quot;</span>, <span class="hljs-number">8000</span>)<br>pidfile = <span class="hljs-string">&#x27;%s/run/%s.pid&#x27;</span> % (path_of_current_dir, _file_name)<br>errorlog = <span class="hljs-string">&#x27;%s/logs/%s_error.log&#x27;</span> % (path_of_current_dir, _file_name)<br>accesslog = <span class="hljs-string">&#x27;%s/logs/%s_access.log&#x27;</span> % (path_of_current_dir, _file_name)<br></code></pre></td></tr></table></figure><ul><li>使用<code>gunicorn -c</code>方式指定刚写入的配置文件启动：</li></ul><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/home/</span>qintianjun<span class="hljs-regexp">/hostinfo/</span>venv<span class="hljs-regexp">/bin/gu</span>nicorn hostinfo.wsgi:application -c ./gunicorn_config.py --preload  <span class="hljs-comment"># 加上preload参数是为了显示debug信息，可以省略</span><br></code></pre></td></tr></table></figure><p>可以加上-daemon参数让gunicorn以后台方式启动</p><ul><li>确认Django中settings.py文件里的日志设置正确，参考：</li></ul><figure class="highlight lua"><table><tr><td class="code"><pre><code class="hljs lua"># 记录日志<br>LOGBASEPATH = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(BASE_DIR, <span class="hljs-string">&#x27;logs&#x27;</span>)<br>LOGPATH = <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(LOGBASEPATH, <span class="hljs-built_in">time</span>.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>, <span class="hljs-built_in">time</span>.localtime(<span class="hljs-built_in">time</span>.<span class="hljs-built_in">time</span>())))<br><br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.exists(LOGPATH):<br>    <span class="hljs-built_in">os</span>.mkdir(LOGPATH)<br>......<br>    # 定义具体处理日志的方式<br>    <span class="hljs-string">&#x27;handlers&#x27;</span>: &#123;<br>        # 默认记录所有日志<br>        <span class="hljs-string">&#x27;default&#x27;</span>: &#123;<br>            <span class="hljs-string">&#x27;level&#x27;</span>: <span class="hljs-string">&#x27;INFO&#x27;</span>,<br>            <span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;logging.handlers.RotatingFileHandler&#x27;</span>,<br>            <span class="hljs-string">&#x27;filename&#x27;</span>: <span class="hljs-built_in">os</span>.<span class="hljs-built_in">path</span>.join(LOGPATH, <span class="hljs-string">&#x27;all-&#123;&#125;.log&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">time</span>.strftime(<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>))),<br>            <span class="hljs-string">&#x27;maxBytes&#x27;</span>: <span class="hljs-number">1024</span> * <span class="hljs-number">1024</span> * <span class="hljs-number">5</span>,  # 文件大小<br>            <span class="hljs-string">&#x27;backupCount&#x27;</span>: <span class="hljs-number">5</span>,  # 备份数<br>            <span class="hljs-string">&#x27;formatter&#x27;</span>: <span class="hljs-string">&#x27;standard&#x27;</span>,  # 输出格式<br>            <span class="hljs-string">&#x27;encoding&#x27;</span>: <span class="hljs-string">&#x27;utf-8&#x27;</span><br>        &#125;,<br>......<br></code></pre></td></tr></table></figure><p>这样Django日志会安照日期为目录建立在项目对应logs目录下</p><p><strong>问题十七 修改过Django默认user模型后提示:<code>django.db.migrations.exceptions.InconsistentMigrationHistory: Migration admin.0001_initial is applied before its dependency users.0001_initial on database &#39;default&#39;.</code></strong></p><p><em><strong>解决方法</strong></em><br>Since you are using a custom User model, your can first comment out<br>一旦你使用自定义的用户模型，你可以首先在INSTALL_APPS注释：</p><figure class="highlight node-repl"><table><tr><td class="code"><pre><code class="hljs node-repl">INSTALLED_APPS = [<br><span class="hljs-meta prompt_">...</span><br>#‘django.contrib.admin’,<br><span class="hljs-meta prompt_">...</span><br>]<br></code></pre></td></tr></table></figure><p>然后执行迁移：</p><figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> migrate.<br></code></pre></td></tr></table></figure><p>当迁移完成后再取消对它的注释：</p><figure class="highlight erlang"><table><tr><td class="code"><pre><code class="hljs erlang">‘django.contrib.admin’.<br></code></pre></td></tr></table></figure><p>即可顺利迁移。</p><p><strong>问题十八 今天在使用Git创建项目的时候，在两个分支合并的时候，出现了下面的这个错误。</strong></p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><code class="hljs livecodeserver">~/SpringSpace/newframe <span class="hljs-keyword">on</span>  <span class="hljs-title">master</span> ⌚ <span class="hljs-title">11</span>:<span class="hljs-title">35</span>:<span class="hljs-title">56</span><br>$ git <span class="hljs-built_in">merge</span> origin/druid<br>fatal: refusing <span class="hljs-built_in">to</span> <span class="hljs-built_in">merge</span> unrelated histories<br></code></pre></td></tr></table></figure><p><em><strong>问题分析</strong></em></p><p>这里的问题的关键在于：<code>fatal: refusing to merge unrelated histories </code>,因为你在本地和远程都创建了git仓库而他们之间没有联系。<br>你可能会在git pull或者git push中都有可能会遇到，这是因为两个分支没有取得关系。</p><p><em><strong>解决方案</strong></em></p><p>在你操作命令后面加<code>--allow-unrelated-histories</code><br>例如： </p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">git merge master <span class="hljs-comment">--allow-unrelated-histories</span><br><br>~/SpringSpace/newframe <span class="hljs-keyword">on</span>  druid ⌚ <span class="hljs-number">11</span>:<span class="hljs-number">36</span>:<span class="hljs-number">49</span><br>$ git merge master <span class="hljs-comment">--allow-unrelated-histories</span><br>Auto-merging .gitignore<br><span class="hljs-keyword">CONFLICT</span> (<span class="hljs-keyword">add</span>/<span class="hljs-keyword">add</span>): Merge <span class="hljs-keyword">conflict</span> <span class="hljs-keyword">in</span> .gitignore<br>Automatic merge failed; fix conflicts <span class="hljs-keyword">and</span> <span class="hljs-keyword">then</span> <span class="hljs-keyword">commit</span> the result.<br></code></pre></td></tr></table></figure><p>如果你是git pull或者git push报<code>fatal: refusing to merge unrelated histories</code><br>同理：<br><code>git pull origin master --allow-unrelated-histories</code><br>就这样完美的解决咯！</p><p><strong>问题十九 npm run eslint 报错</strong></p><p><em><strong>问题描述</strong></em><br>在npm编译时eslint提示<code>xxx warnings potentially fixable with the --fix option.</code></p><p><em><strong>解决方案</strong></em><br>报这个错是因为package.json中配置项少了 –fixed，更改为：</p><figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;lint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;eslint --fix --ext .js,.vue src&quot;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>继续运行，这里还有一些错是不能自动修复的，按ctrl单击，直接进到文件里，按照提示修改，比如这个报错声明但未定义的，直接删除或暂时注释掉就欧克了</p><p><strong>问题二十 makemigrations出错，提示<code>django.db.utils.OperationalError: (1071, &#39;Specified key was too long; max key length is 3072 bytes&#39;)</code></strong></p><p><em><strong>解决方案</strong></em><br>由于 MySQL Innodb 引擎表索引字段长度的限制为 767 字节，因此对于多字节字符集的大字段（或者多字段组合索引），创建索引会出现上面的错误。</p><p>以 utf8mb4 字符集 字符串类型字段为例：utf8mb4 是 4 字节字符集，则默认支持的索引字段最大长度是： 767 字节 &#x2F; 4 字节每字符 &#x3D; 191 字符，因此在 varchar(255) 或 char(255) 类型字段上创建索引会失败。</p><p>可以尝试修改表的字符集：</p><figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">DATABASE</span> `databasename` <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span> utf8;<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/shengulong/p/10105128.html">参考链接1</a></p><p><a href="http://www.voidcn.com/article/p-ezipelvv-bth.html">参考链接2</a></p><p><strong>问题二十 Vue报错Custom elements in iteration require ‘v-bind:key’ directives.”</strong></p><p><em><strong>问题描述</strong></em><br>错误代码</p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in typeList&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.label</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">i-option</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><em><strong>解决方案</strong></em></p><figure class="highlight handlebars"><table><tr><td class="code"><pre><code class="hljs handlebars"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">i-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in typeList&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.label&quot;</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">&quot;item.value&quot;</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123; <span class="hljs-name">item.label</span> &#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">i-option</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p>添加一个：key就可以了</p><p><strong>问题二十一 Vue编译时报错<code>TypeError: Cannot destructure property </code>compile<code> of &#39;undefined&#39; or &#39;null&#39;</code></strong></p><p><strong>问题描述</strong><br>进入到VUE项目运行命令：npm run dev的时候报错。错误提示：TypeError: Cannot destructure property <code>compile</code> of ‘undefined’ or ‘null’</p><p><strong>解决方案</strong><br>经过分析，发现是因为webpack-dev-server版本过高导致。进入到项目中，运行如下命令：</p><figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">npm</span> install -D webpack-dev-server@<span class="hljs-number">3</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>然后再运行npm run dev即可。</p><p><strong>问题二十二 使用requirements.txt安装python包时提示g++ error:&#x2F;usr&#x2F;lib&#x2F;rpm&#x2F;redhat&#x2F;redhat-hardened-cc1 No that file and directory</strong></p><p><strong>解决方案</strong></p><figure class="highlight mipsasm"><table><tr><td class="code"><pre><code class="hljs mipsasm">yum <span class="hljs-keyword">install </span>gcc libffi-devel python-devel openssl-devel -y<br> <br>sudo dnf <span class="hljs-keyword">install </span>redhat-rpm-<span class="hljs-built_in">config</span><br></code></pre></td></tr></table></figure><p><strong>问题二十三 Django 2.x中创建Model时报以下错误：<br>TypeError: init() missing 1 required positional argument: ‘on_delete’</strong></p><p><strong>解决方案</strong></p><p>定义外键的时候需要加上 on_delete&#x3D;;<br>即：contract &#x3D; models.ForeignKey(Contract, on_delete&#x3D;models.CASCADE)</p><p>原因如下：<br>django 升级到2.0之后,表与表之间关联的时候,必须要写on_delete参数,否则会报异常:<code>TypeError: init() missing 1 required positional argument: ‘on_delete’</code></p><blockquote><p>附: on_delete各个参数的含义如下：</p></blockquote><figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">on_delete</span>=None,               # 删除关联表中的数据时,当前表与其关联的field的行为<br><span class="hljs-attribute">on_delete</span>=models.CASCADE,     # 删除关联数据,与之关联也删除<br><span class="hljs-attribute">on_delete</span>=models.DO_NOTHING,  # 删除关联数据,什么也不做<br><span class="hljs-attribute">on_delete</span>=models.PROTECT,     # 删除关联数据,引发错误ProtectedError<br><span class="hljs-comment"># models.ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_NULL, blank=True, null=True)</span><br><span class="hljs-attribute">on_delete</span>=models.SET_NULL,    # 删除关联数据,与之关联的值设置为<span class="hljs-literal">null</span>（前提FK字段需要设置为可空,一对一同理）<br><span class="hljs-comment"># models.ForeignKey(&#x27;关联表&#x27;, on_delete=models.SET_DEFAULT, default=&#x27;默认值&#x27;)</span><br><span class="hljs-attribute">on_delete</span>=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）<br><span class="hljs-attribute">on_delete</span>=models.SET,         # 删除关联数据,<br> a. 与之关联的值设置为指定值,设置：models.<span class="hljs-built_in">SET</span>(值)<br> b. 与之关联的值设置为可执行对象的返回值,设置：models.<span class="hljs-built_in">SET</span>(可执行对象)<br></code></pre></td></tr></table></figure><p>由于多对多(ManyToManyField)没有 on_delete 参数,所以以上只针对外键(ForeignKey)和一对一(OneToOneField)</p><p><strong>问题二十四 supervisorctl启动时报unix:&#x2F;&#x2F;&#x2F;tmp&#x2F;supervisor.sock no such file的问题</strong></p><p><strong>解决方案</strong></p><p>1、打开配置文件</p><p>vim &#x2F;etc&#x2F;supervisord.conf<br>这里把所有的&#x2F;tmp路径改掉，&#x2F;tmp&#x2F;supervisor.sock 改成 &#x2F;var&#x2F;run&#x2F;supervisor.sock，&#x2F;tmp&#x2F;supervisord.log 改成&#x2F;var&#x2F;log&#x2F;supervisor.log，&#x2F;tmp&#x2F;supervisord.pid 改成&#x2F;var&#x2F;run&#x2F;supervisor.pid 要不容易被linux自动清掉</p><p>2、修改权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">sudo <span class="hljs-built_in">chmod</span> 777 /run<br>sudo <span class="hljs-built_in">chmod</span> 777 /var/log<br></code></pre></td></tr></table></figure><p>如果没改，启动报错<code>IOError: [Errno 13] Permission denied: &#39;/var/log/supervisord.log&#39;</code></p><p>3、创建supervisor.sock</p><figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">sudo touch <span class="hljs-regexp">/var/</span>run/supervisor.sock<br>sudo chmod <span class="hljs-number">777</span> <span class="hljs-regexp">/var/</span>run/supervisor.sock<br></code></pre></td></tr></table></figure><p>4、启动supervisord，注意stop之前的实例或杀死进程</p>]]></content>
    
    
    <summary type="html">Django Rest Framework Bugzilla</summary>
    
    
    
    <category term="Python" scheme="http://www.qintianjun.top/categories/Python/"/>
    
    <category term="Django" scheme="http://www.qintianjun.top/categories/Python/Django/"/>
    
    
    <category term="Python" scheme="http://www.qintianjun.top/tags/Python/"/>
    
    <category term="Django" scheme="http://www.qintianjun.top/tags/Django/"/>
    
    <category term="DRF" scheme="http://www.qintianjun.top/tags/DRF/"/>
    
  </entry>
  
</feed>
